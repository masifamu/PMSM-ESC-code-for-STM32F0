
PMSM-ESC-code-for-STM32F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080072c0  080072c0  000172c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007570  08007570  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007570  08007570  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007570  08007570  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  2000000c  08007584  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08007584  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f48b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002992  00000000  00000000  0002f502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b18  00000000  00000000  00032cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c75  00000000  00000000  000337f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012535  00000000  00000000  00045465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00067818  00000000  00000000  0005799a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035a8  00000000  00000000  000bf1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080072a8 	.word	0x080072a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080072a8 	.word	0x080072a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ff47 	bl	8001298 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe97 	bl	8001148 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff39 	bl	8001298 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff2f 	bl	8001298 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 febf 	bl	80011cc <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 feb5 	bl	80011cc <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fdaf 	bl	8001fe8 <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f001 fa26 	bl	80018e4 <__aeabi_dsub>
 8000498:	f001 fda6 	bl	8001fe8 <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_dadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	4646      	mov	r6, r8
 80004b2:	46d6      	mov	lr, sl
 80004b4:	0004      	movs	r4, r0
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	001f      	movs	r7, r3
 80004ba:	030b      	lsls	r3, r1, #12
 80004bc:	0010      	movs	r0, r2
 80004be:	004e      	lsls	r6, r1, #1
 80004c0:	0a5b      	lsrs	r3, r3, #9
 80004c2:	0fcd      	lsrs	r5, r1, #31
 80004c4:	0f61      	lsrs	r1, r4, #29
 80004c6:	007a      	lsls	r2, r7, #1
 80004c8:	4319      	orrs	r1, r3
 80004ca:	00e3      	lsls	r3, r4, #3
 80004cc:	033c      	lsls	r4, r7, #12
 80004ce:	0fff      	lsrs	r7, r7, #31
 80004d0:	46bc      	mov	ip, r7
 80004d2:	0a64      	lsrs	r4, r4, #9
 80004d4:	0f47      	lsrs	r7, r0, #29
 80004d6:	4327      	orrs	r7, r4
 80004d8:	0d76      	lsrs	r6, r6, #21
 80004da:	0d52      	lsrs	r2, r2, #21
 80004dc:	00c0      	lsls	r0, r0, #3
 80004de:	46b9      	mov	r9, r7
 80004e0:	4680      	mov	r8, r0
 80004e2:	1ab7      	subs	r7, r6, r2
 80004e4:	4565      	cmp	r5, ip
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0x3e>
 80004e8:	e09b      	b.n	8000622 <__aeabi_dadd+0x176>
 80004ea:	2f00      	cmp	r7, #0
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_dadd+0x44>
 80004ee:	e084      	b.n	80005fa <__aeabi_dadd+0x14e>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4a>
 80004f4:	e0be      	b.n	8000674 <__aeabi_dadd+0x1c8>
 80004f6:	4ac8      	ldr	r2, [pc, #800]	; (8000818 <__aeabi_dadd+0x36c>)
 80004f8:	4296      	cmp	r6, r2
 80004fa:	d100      	bne.n	80004fe <__aeabi_dadd+0x52>
 80004fc:	e124      	b.n	8000748 <__aeabi_dadd+0x29c>
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	464c      	mov	r4, r9
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	4314      	orrs	r4, r2
 8000506:	46a1      	mov	r9, r4
 8000508:	2f38      	cmp	r7, #56	; 0x38
 800050a:	dd00      	ble.n	800050e <__aeabi_dadd+0x62>
 800050c:	e167      	b.n	80007de <__aeabi_dadd+0x332>
 800050e:	2f1f      	cmp	r7, #31
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x68>
 8000512:	e1d6      	b.n	80008c2 <__aeabi_dadd+0x416>
 8000514:	2220      	movs	r2, #32
 8000516:	464c      	mov	r4, r9
 8000518:	1bd2      	subs	r2, r2, r7
 800051a:	4094      	lsls	r4, r2
 800051c:	46a2      	mov	sl, r4
 800051e:	4644      	mov	r4, r8
 8000520:	40fc      	lsrs	r4, r7
 8000522:	0020      	movs	r0, r4
 8000524:	4654      	mov	r4, sl
 8000526:	4304      	orrs	r4, r0
 8000528:	4640      	mov	r0, r8
 800052a:	4090      	lsls	r0, r2
 800052c:	1e42      	subs	r2, r0, #1
 800052e:	4190      	sbcs	r0, r2
 8000530:	464a      	mov	r2, r9
 8000532:	40fa      	lsrs	r2, r7
 8000534:	4304      	orrs	r4, r0
 8000536:	1a89      	subs	r1, r1, r2
 8000538:	1b1c      	subs	r4, r3, r4
 800053a:	42a3      	cmp	r3, r4
 800053c:	4192      	sbcs	r2, r2
 800053e:	4252      	negs	r2, r2
 8000540:	1a8b      	subs	r3, r1, r2
 8000542:	469a      	mov	sl, r3
 8000544:	4653      	mov	r3, sl
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0xa0>
 800054a:	e0d4      	b.n	80006f6 <__aeabi_dadd+0x24a>
 800054c:	4653      	mov	r3, sl
 800054e:	025a      	lsls	r2, r3, #9
 8000550:	0a53      	lsrs	r3, r2, #9
 8000552:	469a      	mov	sl, r3
 8000554:	4653      	mov	r3, sl
 8000556:	2b00      	cmp	r3, #0
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xb0>
 800055a:	e104      	b.n	8000766 <__aeabi_dadd+0x2ba>
 800055c:	4650      	mov	r0, sl
 800055e:	f001 fdf1 	bl	8002144 <__clzsi2>
 8000562:	0003      	movs	r3, r0
 8000564:	3b08      	subs	r3, #8
 8000566:	2220      	movs	r2, #32
 8000568:	0020      	movs	r0, r4
 800056a:	1ad2      	subs	r2, r2, r3
 800056c:	4651      	mov	r1, sl
 800056e:	40d0      	lsrs	r0, r2
 8000570:	4099      	lsls	r1, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409c      	lsls	r4, r3
 8000576:	430a      	orrs	r2, r1
 8000578:	42b3      	cmp	r3, r6
 800057a:	da00      	bge.n	800057e <__aeabi_dadd+0xd2>
 800057c:	e102      	b.n	8000784 <__aeabi_dadd+0x2d8>
 800057e:	1b9b      	subs	r3, r3, r6
 8000580:	1c59      	adds	r1, r3, #1
 8000582:	291f      	cmp	r1, #31
 8000584:	dd00      	ble.n	8000588 <__aeabi_dadd+0xdc>
 8000586:	e0a7      	b.n	80006d8 <__aeabi_dadd+0x22c>
 8000588:	2320      	movs	r3, #32
 800058a:	0010      	movs	r0, r2
 800058c:	0026      	movs	r6, r4
 800058e:	1a5b      	subs	r3, r3, r1
 8000590:	409c      	lsls	r4, r3
 8000592:	4098      	lsls	r0, r3
 8000594:	40ce      	lsrs	r6, r1
 8000596:	40ca      	lsrs	r2, r1
 8000598:	1e63      	subs	r3, r4, #1
 800059a:	419c      	sbcs	r4, r3
 800059c:	4330      	orrs	r0, r6
 800059e:	4692      	mov	sl, r2
 80005a0:	2600      	movs	r6, #0
 80005a2:	4304      	orrs	r4, r0
 80005a4:	0763      	lsls	r3, r4, #29
 80005a6:	d009      	beq.n	80005bc <__aeabi_dadd+0x110>
 80005a8:	230f      	movs	r3, #15
 80005aa:	4023      	ands	r3, r4
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d005      	beq.n	80005bc <__aeabi_dadd+0x110>
 80005b0:	1d23      	adds	r3, r4, #4
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	41a4      	sbcs	r4, r4
 80005b6:	4264      	negs	r4, r4
 80005b8:	44a2      	add	sl, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	4653      	mov	r3, sl
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	d400      	bmi.n	80005c4 <__aeabi_dadd+0x118>
 80005c2:	e09b      	b.n	80006fc <__aeabi_dadd+0x250>
 80005c4:	4b94      	ldr	r3, [pc, #592]	; (8000818 <__aeabi_dadd+0x36c>)
 80005c6:	3601      	adds	r6, #1
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x122>
 80005cc:	e0b8      	b.n	8000740 <__aeabi_dadd+0x294>
 80005ce:	4653      	mov	r3, sl
 80005d0:	4992      	ldr	r1, [pc, #584]	; (800081c <__aeabi_dadd+0x370>)
 80005d2:	08e4      	lsrs	r4, r4, #3
 80005d4:	400b      	ands	r3, r1
 80005d6:	0019      	movs	r1, r3
 80005d8:	075b      	lsls	r3, r3, #29
 80005da:	4323      	orrs	r3, r4
 80005dc:	0572      	lsls	r2, r6, #21
 80005de:	024c      	lsls	r4, r1, #9
 80005e0:	0b24      	lsrs	r4, r4, #12
 80005e2:	0d52      	lsrs	r2, r2, #21
 80005e4:	0512      	lsls	r2, r2, #20
 80005e6:	07ed      	lsls	r5, r5, #31
 80005e8:	4322      	orrs	r2, r4
 80005ea:	432a      	orrs	r2, r5
 80005ec:	0018      	movs	r0, r3
 80005ee:	0011      	movs	r1, r2
 80005f0:	bce0      	pop	{r5, r6, r7}
 80005f2:	46ba      	mov	sl, r7
 80005f4:	46b1      	mov	r9, r6
 80005f6:	46a8      	mov	r8, r5
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	d048      	beq.n	8000690 <__aeabi_dadd+0x1e4>
 80005fe:	1b97      	subs	r7, r2, r6
 8000600:	2e00      	cmp	r6, #0
 8000602:	d000      	beq.n	8000606 <__aeabi_dadd+0x15a>
 8000604:	e10e      	b.n	8000824 <__aeabi_dadd+0x378>
 8000606:	000c      	movs	r4, r1
 8000608:	431c      	orrs	r4, r3
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x162>
 800060c:	e1b7      	b.n	800097e <__aeabi_dadd+0x4d2>
 800060e:	1e7c      	subs	r4, r7, #1
 8000610:	2f01      	cmp	r7, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16a>
 8000614:	e226      	b.n	8000a64 <__aeabi_dadd+0x5b8>
 8000616:	4d80      	ldr	r5, [pc, #512]	; (8000818 <__aeabi_dadd+0x36c>)
 8000618:	42af      	cmp	r7, r5
 800061a:	d100      	bne.n	800061e <__aeabi_dadd+0x172>
 800061c:	e1d5      	b.n	80009ca <__aeabi_dadd+0x51e>
 800061e:	0027      	movs	r7, r4
 8000620:	e107      	b.n	8000832 <__aeabi_dadd+0x386>
 8000622:	2f00      	cmp	r7, #0
 8000624:	dc00      	bgt.n	8000628 <__aeabi_dadd+0x17c>
 8000626:	e0b2      	b.n	800078e <__aeabi_dadd+0x2e2>
 8000628:	2a00      	cmp	r2, #0
 800062a:	d047      	beq.n	80006bc <__aeabi_dadd+0x210>
 800062c:	4a7a      	ldr	r2, [pc, #488]	; (8000818 <__aeabi_dadd+0x36c>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x188>
 8000632:	e089      	b.n	8000748 <__aeabi_dadd+0x29c>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	464c      	mov	r4, r9
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a1      	mov	r9, r4
 800063e:	2f38      	cmp	r7, #56	; 0x38
 8000640:	dc6b      	bgt.n	800071a <__aeabi_dadd+0x26e>
 8000642:	2f1f      	cmp	r7, #31
 8000644:	dc00      	bgt.n	8000648 <__aeabi_dadd+0x19c>
 8000646:	e16e      	b.n	8000926 <__aeabi_dadd+0x47a>
 8000648:	003a      	movs	r2, r7
 800064a:	4648      	mov	r0, r9
 800064c:	3a20      	subs	r2, #32
 800064e:	40d0      	lsrs	r0, r2
 8000650:	4684      	mov	ip, r0
 8000652:	2f20      	cmp	r7, #32
 8000654:	d007      	beq.n	8000666 <__aeabi_dadd+0x1ba>
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	4648      	mov	r0, r9
 800065a:	1bd2      	subs	r2, r2, r7
 800065c:	4090      	lsls	r0, r2
 800065e:	0002      	movs	r2, r0
 8000660:	4640      	mov	r0, r8
 8000662:	4310      	orrs	r0, r2
 8000664:	4680      	mov	r8, r0
 8000666:	4640      	mov	r0, r8
 8000668:	1e42      	subs	r2, r0, #1
 800066a:	4190      	sbcs	r0, r2
 800066c:	4662      	mov	r2, ip
 800066e:	0004      	movs	r4, r0
 8000670:	4314      	orrs	r4, r2
 8000672:	e057      	b.n	8000724 <__aeabi_dadd+0x278>
 8000674:	464a      	mov	r2, r9
 8000676:	4302      	orrs	r2, r0
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x1d0>
 800067a:	e103      	b.n	8000884 <__aeabi_dadd+0x3d8>
 800067c:	1e7a      	subs	r2, r7, #1
 800067e:	2f01      	cmp	r7, #1
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x1d8>
 8000682:	e193      	b.n	80009ac <__aeabi_dadd+0x500>
 8000684:	4c64      	ldr	r4, [pc, #400]	; (8000818 <__aeabi_dadd+0x36c>)
 8000686:	42a7      	cmp	r7, r4
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x1e0>
 800068a:	e18a      	b.n	80009a2 <__aeabi_dadd+0x4f6>
 800068c:	0017      	movs	r7, r2
 800068e:	e73b      	b.n	8000508 <__aeabi_dadd+0x5c>
 8000690:	4c63      	ldr	r4, [pc, #396]	; (8000820 <__aeabi_dadd+0x374>)
 8000692:	1c72      	adds	r2, r6, #1
 8000694:	4222      	tst	r2, r4
 8000696:	d000      	beq.n	800069a <__aeabi_dadd+0x1ee>
 8000698:	e0e0      	b.n	800085c <__aeabi_dadd+0x3b0>
 800069a:	000a      	movs	r2, r1
 800069c:	431a      	orrs	r2, r3
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d000      	beq.n	80006a4 <__aeabi_dadd+0x1f8>
 80006a2:	e174      	b.n	800098e <__aeabi_dadd+0x4e2>
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x1fe>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a0>
 80006aa:	464a      	mov	r2, r9
 80006ac:	4302      	orrs	r2, r0
 80006ae:	d000      	beq.n	80006b2 <__aeabi_dadd+0x206>
 80006b0:	e1e3      	b.n	8000a7a <__aeabi_dadd+0x5ce>
 80006b2:	074a      	lsls	r2, r1, #29
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	08c9      	lsrs	r1, r1, #3
 80006ba:	e029      	b.n	8000710 <__aeabi_dadd+0x264>
 80006bc:	464a      	mov	r2, r9
 80006be:	4302      	orrs	r2, r0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x218>
 80006c2:	e17d      	b.n	80009c0 <__aeabi_dadd+0x514>
 80006c4:	1e7a      	subs	r2, r7, #1
 80006c6:	2f01      	cmp	r7, #1
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x220>
 80006ca:	e0e0      	b.n	800088e <__aeabi_dadd+0x3e2>
 80006cc:	4c52      	ldr	r4, [pc, #328]	; (8000818 <__aeabi_dadd+0x36c>)
 80006ce:	42a7      	cmp	r7, r4
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x228>
 80006d2:	e166      	b.n	80009a2 <__aeabi_dadd+0x4f6>
 80006d4:	0017      	movs	r7, r2
 80006d6:	e7b2      	b.n	800063e <__aeabi_dadd+0x192>
 80006d8:	0010      	movs	r0, r2
 80006da:	3b1f      	subs	r3, #31
 80006dc:	40d8      	lsrs	r0, r3
 80006de:	2920      	cmp	r1, #32
 80006e0:	d003      	beq.n	80006ea <__aeabi_dadd+0x23e>
 80006e2:	2340      	movs	r3, #64	; 0x40
 80006e4:	1a5b      	subs	r3, r3, r1
 80006e6:	409a      	lsls	r2, r3
 80006e8:	4314      	orrs	r4, r2
 80006ea:	1e63      	subs	r3, r4, #1
 80006ec:	419c      	sbcs	r4, r3
 80006ee:	2300      	movs	r3, #0
 80006f0:	2600      	movs	r6, #0
 80006f2:	469a      	mov	sl, r3
 80006f4:	4304      	orrs	r4, r0
 80006f6:	0763      	lsls	r3, r4, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_dadd+0x250>
 80006fa:	e755      	b.n	80005a8 <__aeabi_dadd+0xfc>
 80006fc:	4652      	mov	r2, sl
 80006fe:	08e3      	lsrs	r3, r4, #3
 8000700:	0752      	lsls	r2, r2, #29
 8000702:	4313      	orrs	r3, r2
 8000704:	4652      	mov	r2, sl
 8000706:	0037      	movs	r7, r6
 8000708:	08d1      	lsrs	r1, r2, #3
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <__aeabi_dadd+0x36c>)
 800070c:	4297      	cmp	r7, r2
 800070e:	d01f      	beq.n	8000750 <__aeabi_dadd+0x2a4>
 8000710:	0309      	lsls	r1, r1, #12
 8000712:	057a      	lsls	r2, r7, #21
 8000714:	0b0c      	lsrs	r4, r1, #12
 8000716:	0d52      	lsrs	r2, r2, #21
 8000718:	e764      	b.n	80005e4 <__aeabi_dadd+0x138>
 800071a:	4642      	mov	r2, r8
 800071c:	464c      	mov	r4, r9
 800071e:	4314      	orrs	r4, r2
 8000720:	1e62      	subs	r2, r4, #1
 8000722:	4194      	sbcs	r4, r2
 8000724:	18e4      	adds	r4, r4, r3
 8000726:	429c      	cmp	r4, r3
 8000728:	4192      	sbcs	r2, r2
 800072a:	4252      	negs	r2, r2
 800072c:	4692      	mov	sl, r2
 800072e:	448a      	add	sl, r1
 8000730:	4653      	mov	r3, sl
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	d5df      	bpl.n	80006f6 <__aeabi_dadd+0x24a>
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <__aeabi_dadd+0x36c>)
 8000738:	3601      	adds	r6, #1
 800073a:	429e      	cmp	r6, r3
 800073c:	d000      	beq.n	8000740 <__aeabi_dadd+0x294>
 800073e:	e0b3      	b.n	80008a8 <__aeabi_dadd+0x3fc>
 8000740:	0032      	movs	r2, r6
 8000742:	2400      	movs	r4, #0
 8000744:	2300      	movs	r3, #0
 8000746:	e74d      	b.n	80005e4 <__aeabi_dadd+0x138>
 8000748:	074a      	lsls	r2, r1, #29
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	4313      	orrs	r3, r2
 800074e:	08c9      	lsrs	r1, r1, #3
 8000750:	001a      	movs	r2, r3
 8000752:	430a      	orrs	r2, r1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x2ac>
 8000756:	e200      	b.n	8000b5a <__aeabi_dadd+0x6ae>
 8000758:	2480      	movs	r4, #128	; 0x80
 800075a:	0324      	lsls	r4, r4, #12
 800075c:	430c      	orrs	r4, r1
 800075e:	0324      	lsls	r4, r4, #12
 8000760:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <__aeabi_dadd+0x36c>)
 8000762:	0b24      	lsrs	r4, r4, #12
 8000764:	e73e      	b.n	80005e4 <__aeabi_dadd+0x138>
 8000766:	0020      	movs	r0, r4
 8000768:	f001 fcec 	bl	8002144 <__clzsi2>
 800076c:	0003      	movs	r3, r0
 800076e:	3318      	adds	r3, #24
 8000770:	2b1f      	cmp	r3, #31
 8000772:	dc00      	bgt.n	8000776 <__aeabi_dadd+0x2ca>
 8000774:	e6f7      	b.n	8000566 <__aeabi_dadd+0xba>
 8000776:	0022      	movs	r2, r4
 8000778:	3808      	subs	r0, #8
 800077a:	4082      	lsls	r2, r0
 800077c:	2400      	movs	r4, #0
 800077e:	42b3      	cmp	r3, r6
 8000780:	db00      	blt.n	8000784 <__aeabi_dadd+0x2d8>
 8000782:	e6fc      	b.n	800057e <__aeabi_dadd+0xd2>
 8000784:	1af6      	subs	r6, r6, r3
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <__aeabi_dadd+0x370>)
 8000788:	401a      	ands	r2, r3
 800078a:	4692      	mov	sl, r2
 800078c:	e70a      	b.n	80005a4 <__aeabi_dadd+0xf8>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d02b      	beq.n	80007ea <__aeabi_dadd+0x33e>
 8000792:	1b97      	subs	r7, r2, r6
 8000794:	2e00      	cmp	r6, #0
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2ee>
 8000798:	e0b8      	b.n	800090c <__aeabi_dadd+0x460>
 800079a:	4c1f      	ldr	r4, [pc, #124]	; (8000818 <__aeabi_dadd+0x36c>)
 800079c:	42a2      	cmp	r2, r4
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x2f6>
 80007a0:	e11c      	b.n	80009dc <__aeabi_dadd+0x530>
 80007a2:	2480      	movs	r4, #128	; 0x80
 80007a4:	0424      	lsls	r4, r4, #16
 80007a6:	4321      	orrs	r1, r4
 80007a8:	2f38      	cmp	r7, #56	; 0x38
 80007aa:	dd00      	ble.n	80007ae <__aeabi_dadd+0x302>
 80007ac:	e11e      	b.n	80009ec <__aeabi_dadd+0x540>
 80007ae:	2f1f      	cmp	r7, #31
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dadd+0x308>
 80007b2:	e19e      	b.n	8000af2 <__aeabi_dadd+0x646>
 80007b4:	2620      	movs	r6, #32
 80007b6:	000c      	movs	r4, r1
 80007b8:	1bf6      	subs	r6, r6, r7
 80007ba:	0018      	movs	r0, r3
 80007bc:	40b3      	lsls	r3, r6
 80007be:	40b4      	lsls	r4, r6
 80007c0:	40f8      	lsrs	r0, r7
 80007c2:	1e5e      	subs	r6, r3, #1
 80007c4:	41b3      	sbcs	r3, r6
 80007c6:	40f9      	lsrs	r1, r7
 80007c8:	4304      	orrs	r4, r0
 80007ca:	431c      	orrs	r4, r3
 80007cc:	4489      	add	r9, r1
 80007ce:	4444      	add	r4, r8
 80007d0:	4544      	cmp	r4, r8
 80007d2:	419b      	sbcs	r3, r3
 80007d4:	425b      	negs	r3, r3
 80007d6:	444b      	add	r3, r9
 80007d8:	469a      	mov	sl, r3
 80007da:	0016      	movs	r6, r2
 80007dc:	e7a8      	b.n	8000730 <__aeabi_dadd+0x284>
 80007de:	4642      	mov	r2, r8
 80007e0:	464c      	mov	r4, r9
 80007e2:	4314      	orrs	r4, r2
 80007e4:	1e62      	subs	r2, r4, #1
 80007e6:	4194      	sbcs	r4, r2
 80007e8:	e6a6      	b.n	8000538 <__aeabi_dadd+0x8c>
 80007ea:	4c0d      	ldr	r4, [pc, #52]	; (8000820 <__aeabi_dadd+0x374>)
 80007ec:	1c72      	adds	r2, r6, #1
 80007ee:	4222      	tst	r2, r4
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x348>
 80007f2:	e0a8      	b.n	8000946 <__aeabi_dadd+0x49a>
 80007f4:	000a      	movs	r2, r1
 80007f6:	431a      	orrs	r2, r3
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x352>
 80007fc:	e10a      	b.n	8000a14 <__aeabi_dadd+0x568>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x358>
 8000802:	e15e      	b.n	8000ac2 <__aeabi_dadd+0x616>
 8000804:	464a      	mov	r2, r9
 8000806:	4302      	orrs	r2, r0
 8000808:	d000      	beq.n	800080c <__aeabi_dadd+0x360>
 800080a:	e161      	b.n	8000ad0 <__aeabi_dadd+0x624>
 800080c:	074a      	lsls	r2, r1, #29
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	4313      	orrs	r3, r2
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	e77c      	b.n	8000710 <__aeabi_dadd+0x264>
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	000007ff 	.word	0x000007ff
 800081c:	ff7fffff 	.word	0xff7fffff
 8000820:	000007fe 	.word	0x000007fe
 8000824:	4ccf      	ldr	r4, [pc, #828]	; (8000b64 <__aeabi_dadd+0x6b8>)
 8000826:	42a2      	cmp	r2, r4
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x380>
 800082a:	e0ce      	b.n	80009ca <__aeabi_dadd+0x51e>
 800082c:	2480      	movs	r4, #128	; 0x80
 800082e:	0424      	lsls	r4, r4, #16
 8000830:	4321      	orrs	r1, r4
 8000832:	2f38      	cmp	r7, #56	; 0x38
 8000834:	dc5b      	bgt.n	80008ee <__aeabi_dadd+0x442>
 8000836:	2f1f      	cmp	r7, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x390>
 800083a:	e0dc      	b.n	80009f6 <__aeabi_dadd+0x54a>
 800083c:	2520      	movs	r5, #32
 800083e:	000c      	movs	r4, r1
 8000840:	1bed      	subs	r5, r5, r7
 8000842:	001e      	movs	r6, r3
 8000844:	40ab      	lsls	r3, r5
 8000846:	40ac      	lsls	r4, r5
 8000848:	40fe      	lsrs	r6, r7
 800084a:	1e5d      	subs	r5, r3, #1
 800084c:	41ab      	sbcs	r3, r5
 800084e:	4334      	orrs	r4, r6
 8000850:	40f9      	lsrs	r1, r7
 8000852:	431c      	orrs	r4, r3
 8000854:	464b      	mov	r3, r9
 8000856:	1a5b      	subs	r3, r3, r1
 8000858:	4699      	mov	r9, r3
 800085a:	e04c      	b.n	80008f6 <__aeabi_dadd+0x44a>
 800085c:	464a      	mov	r2, r9
 800085e:	1a1c      	subs	r4, r3, r0
 8000860:	1a88      	subs	r0, r1, r2
 8000862:	42a3      	cmp	r3, r4
 8000864:	4192      	sbcs	r2, r2
 8000866:	4252      	negs	r2, r2
 8000868:	4692      	mov	sl, r2
 800086a:	0002      	movs	r2, r0
 800086c:	4650      	mov	r0, sl
 800086e:	1a12      	subs	r2, r2, r0
 8000870:	4692      	mov	sl, r2
 8000872:	0212      	lsls	r2, r2, #8
 8000874:	d478      	bmi.n	8000968 <__aeabi_dadd+0x4bc>
 8000876:	4653      	mov	r3, sl
 8000878:	4323      	orrs	r3, r4
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x3d2>
 800087c:	e66a      	b.n	8000554 <__aeabi_dadd+0xa8>
 800087e:	2100      	movs	r1, #0
 8000880:	2500      	movs	r5, #0
 8000882:	e745      	b.n	8000710 <__aeabi_dadd+0x264>
 8000884:	074a      	lsls	r2, r1, #29
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	4313      	orrs	r3, r2
 800088a:	08c9      	lsrs	r1, r1, #3
 800088c:	e73d      	b.n	800070a <__aeabi_dadd+0x25e>
 800088e:	181c      	adds	r4, r3, r0
 8000890:	429c      	cmp	r4, r3
 8000892:	419b      	sbcs	r3, r3
 8000894:	4449      	add	r1, r9
 8000896:	468a      	mov	sl, r1
 8000898:	425b      	negs	r3, r3
 800089a:	449a      	add	sl, r3
 800089c:	4653      	mov	r3, sl
 800089e:	2601      	movs	r6, #1
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	d400      	bmi.n	80008a6 <__aeabi_dadd+0x3fa>
 80008a4:	e727      	b.n	80006f6 <__aeabi_dadd+0x24a>
 80008a6:	2602      	movs	r6, #2
 80008a8:	4652      	mov	r2, sl
 80008aa:	4baf      	ldr	r3, [pc, #700]	; (8000b68 <__aeabi_dadd+0x6bc>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	401a      	ands	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	4021      	ands	r1, r4
 80008b4:	0862      	lsrs	r2, r4, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	07dc      	lsls	r4, r3, #31
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	469a      	mov	sl, r3
 80008be:	4314      	orrs	r4, r2
 80008c0:	e670      	b.n	80005a4 <__aeabi_dadd+0xf8>
 80008c2:	003a      	movs	r2, r7
 80008c4:	464c      	mov	r4, r9
 80008c6:	3a20      	subs	r2, #32
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	46a4      	mov	ip, r4
 80008cc:	2f20      	cmp	r7, #32
 80008ce:	d007      	beq.n	80008e0 <__aeabi_dadd+0x434>
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	4648      	mov	r0, r9
 80008d4:	1bd2      	subs	r2, r2, r7
 80008d6:	4090      	lsls	r0, r2
 80008d8:	0002      	movs	r2, r0
 80008da:	4640      	mov	r0, r8
 80008dc:	4310      	orrs	r0, r2
 80008de:	4680      	mov	r8, r0
 80008e0:	4640      	mov	r0, r8
 80008e2:	1e42      	subs	r2, r0, #1
 80008e4:	4190      	sbcs	r0, r2
 80008e6:	4662      	mov	r2, ip
 80008e8:	0004      	movs	r4, r0
 80008ea:	4314      	orrs	r4, r2
 80008ec:	e624      	b.n	8000538 <__aeabi_dadd+0x8c>
 80008ee:	4319      	orrs	r1, r3
 80008f0:	000c      	movs	r4, r1
 80008f2:	1e63      	subs	r3, r4, #1
 80008f4:	419c      	sbcs	r4, r3
 80008f6:	4643      	mov	r3, r8
 80008f8:	1b1c      	subs	r4, r3, r4
 80008fa:	45a0      	cmp	r8, r4
 80008fc:	419b      	sbcs	r3, r3
 80008fe:	4649      	mov	r1, r9
 8000900:	425b      	negs	r3, r3
 8000902:	1acb      	subs	r3, r1, r3
 8000904:	469a      	mov	sl, r3
 8000906:	4665      	mov	r5, ip
 8000908:	0016      	movs	r6, r2
 800090a:	e61b      	b.n	8000544 <__aeabi_dadd+0x98>
 800090c:	000c      	movs	r4, r1
 800090e:	431c      	orrs	r4, r3
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x468>
 8000912:	e0c7      	b.n	8000aa4 <__aeabi_dadd+0x5f8>
 8000914:	1e7c      	subs	r4, r7, #1
 8000916:	2f01      	cmp	r7, #1
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x470>
 800091a:	e0f9      	b.n	8000b10 <__aeabi_dadd+0x664>
 800091c:	4e91      	ldr	r6, [pc, #580]	; (8000b64 <__aeabi_dadd+0x6b8>)
 800091e:	42b7      	cmp	r7, r6
 8000920:	d05c      	beq.n	80009dc <__aeabi_dadd+0x530>
 8000922:	0027      	movs	r7, r4
 8000924:	e740      	b.n	80007a8 <__aeabi_dadd+0x2fc>
 8000926:	2220      	movs	r2, #32
 8000928:	464c      	mov	r4, r9
 800092a:	4640      	mov	r0, r8
 800092c:	1bd2      	subs	r2, r2, r7
 800092e:	4094      	lsls	r4, r2
 8000930:	40f8      	lsrs	r0, r7
 8000932:	4304      	orrs	r4, r0
 8000934:	4640      	mov	r0, r8
 8000936:	4090      	lsls	r0, r2
 8000938:	1e42      	subs	r2, r0, #1
 800093a:	4190      	sbcs	r0, r2
 800093c:	464a      	mov	r2, r9
 800093e:	40fa      	lsrs	r2, r7
 8000940:	4304      	orrs	r4, r0
 8000942:	1889      	adds	r1, r1, r2
 8000944:	e6ee      	b.n	8000724 <__aeabi_dadd+0x278>
 8000946:	4c87      	ldr	r4, [pc, #540]	; (8000b64 <__aeabi_dadd+0x6b8>)
 8000948:	42a2      	cmp	r2, r4
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x4a2>
 800094c:	e6f9      	b.n	8000742 <__aeabi_dadd+0x296>
 800094e:	1818      	adds	r0, r3, r0
 8000950:	4298      	cmp	r0, r3
 8000952:	419b      	sbcs	r3, r3
 8000954:	4449      	add	r1, r9
 8000956:	425b      	negs	r3, r3
 8000958:	18cb      	adds	r3, r1, r3
 800095a:	07dc      	lsls	r4, r3, #31
 800095c:	0840      	lsrs	r0, r0, #1
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	469a      	mov	sl, r3
 8000962:	0016      	movs	r6, r2
 8000964:	4304      	orrs	r4, r0
 8000966:	e6c6      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000968:	4642      	mov	r2, r8
 800096a:	1ad4      	subs	r4, r2, r3
 800096c:	45a0      	cmp	r8, r4
 800096e:	4180      	sbcs	r0, r0
 8000970:	464b      	mov	r3, r9
 8000972:	4240      	negs	r0, r0
 8000974:	1a59      	subs	r1, r3, r1
 8000976:	1a0b      	subs	r3, r1, r0
 8000978:	469a      	mov	sl, r3
 800097a:	4665      	mov	r5, ip
 800097c:	e5ea      	b.n	8000554 <__aeabi_dadd+0xa8>
 800097e:	464b      	mov	r3, r9
 8000980:	464a      	mov	r2, r9
 8000982:	08c0      	lsrs	r0, r0, #3
 8000984:	075b      	lsls	r3, r3, #29
 8000986:	4665      	mov	r5, ip
 8000988:	4303      	orrs	r3, r0
 800098a:	08d1      	lsrs	r1, r2, #3
 800098c:	e6bd      	b.n	800070a <__aeabi_dadd+0x25e>
 800098e:	2a00      	cmp	r2, #0
 8000990:	d000      	beq.n	8000994 <__aeabi_dadd+0x4e8>
 8000992:	e08e      	b.n	8000ab2 <__aeabi_dadd+0x606>
 8000994:	464b      	mov	r3, r9
 8000996:	4303      	orrs	r3, r0
 8000998:	d117      	bne.n	80009ca <__aeabi_dadd+0x51e>
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	2500      	movs	r5, #0
 800099e:	0309      	lsls	r1, r1, #12
 80009a0:	e6da      	b.n	8000758 <__aeabi_dadd+0x2ac>
 80009a2:	074a      	lsls	r2, r1, #29
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	08c9      	lsrs	r1, r1, #3
 80009aa:	e6d1      	b.n	8000750 <__aeabi_dadd+0x2a4>
 80009ac:	1a1c      	subs	r4, r3, r0
 80009ae:	464a      	mov	r2, r9
 80009b0:	42a3      	cmp	r3, r4
 80009b2:	419b      	sbcs	r3, r3
 80009b4:	1a89      	subs	r1, r1, r2
 80009b6:	425b      	negs	r3, r3
 80009b8:	1acb      	subs	r3, r1, r3
 80009ba:	469a      	mov	sl, r3
 80009bc:	2601      	movs	r6, #1
 80009be:	e5c1      	b.n	8000544 <__aeabi_dadd+0x98>
 80009c0:	074a      	lsls	r2, r1, #29
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	08c9      	lsrs	r1, r1, #3
 80009c8:	e69f      	b.n	800070a <__aeabi_dadd+0x25e>
 80009ca:	4643      	mov	r3, r8
 80009cc:	08d8      	lsrs	r0, r3, #3
 80009ce:	464b      	mov	r3, r9
 80009d0:	464a      	mov	r2, r9
 80009d2:	075b      	lsls	r3, r3, #29
 80009d4:	4665      	mov	r5, ip
 80009d6:	4303      	orrs	r3, r0
 80009d8:	08d1      	lsrs	r1, r2, #3
 80009da:	e6b9      	b.n	8000750 <__aeabi_dadd+0x2a4>
 80009dc:	4643      	mov	r3, r8
 80009de:	08d8      	lsrs	r0, r3, #3
 80009e0:	464b      	mov	r3, r9
 80009e2:	464a      	mov	r2, r9
 80009e4:	075b      	lsls	r3, r3, #29
 80009e6:	4303      	orrs	r3, r0
 80009e8:	08d1      	lsrs	r1, r2, #3
 80009ea:	e6b1      	b.n	8000750 <__aeabi_dadd+0x2a4>
 80009ec:	4319      	orrs	r1, r3
 80009ee:	000c      	movs	r4, r1
 80009f0:	1e63      	subs	r3, r4, #1
 80009f2:	419c      	sbcs	r4, r3
 80009f4:	e6eb      	b.n	80007ce <__aeabi_dadd+0x322>
 80009f6:	003c      	movs	r4, r7
 80009f8:	000d      	movs	r5, r1
 80009fa:	3c20      	subs	r4, #32
 80009fc:	40e5      	lsrs	r5, r4
 80009fe:	2f20      	cmp	r7, #32
 8000a00:	d003      	beq.n	8000a0a <__aeabi_dadd+0x55e>
 8000a02:	2440      	movs	r4, #64	; 0x40
 8000a04:	1be4      	subs	r4, r4, r7
 8000a06:	40a1      	lsls	r1, r4
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	001c      	movs	r4, r3
 8000a0c:	1e63      	subs	r3, r4, #1
 8000a0e:	419c      	sbcs	r4, r3
 8000a10:	432c      	orrs	r4, r5
 8000a12:	e770      	b.n	80008f6 <__aeabi_dadd+0x44a>
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d0e1      	beq.n	80009dc <__aeabi_dadd+0x530>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	4302      	orrs	r2, r0
 8000a1c:	d0c1      	beq.n	80009a2 <__aeabi_dadd+0x4f6>
 8000a1e:	074a      	lsls	r2, r1, #29
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	0312      	lsls	r2, r2, #12
 8000a2a:	4211      	tst	r1, r2
 8000a2c:	d008      	beq.n	8000a40 <__aeabi_dadd+0x594>
 8000a2e:	4648      	mov	r0, r9
 8000a30:	08c4      	lsrs	r4, r0, #3
 8000a32:	4214      	tst	r4, r2
 8000a34:	d104      	bne.n	8000a40 <__aeabi_dadd+0x594>
 8000a36:	4643      	mov	r3, r8
 8000a38:	0021      	movs	r1, r4
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	0742      	lsls	r2, r0, #29
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	0f5a      	lsrs	r2, r3, #29
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	0752      	lsls	r2, r2, #29
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	e681      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4303      	orrs	r3, r0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x5a8>
 8000a52:	e714      	b.n	800087e <__aeabi_dadd+0x3d2>
 8000a54:	464b      	mov	r3, r9
 8000a56:	464a      	mov	r2, r9
 8000a58:	08c0      	lsrs	r0, r0, #3
 8000a5a:	075b      	lsls	r3, r3, #29
 8000a5c:	4665      	mov	r5, ip
 8000a5e:	4303      	orrs	r3, r0
 8000a60:	08d1      	lsrs	r1, r2, #3
 8000a62:	e655      	b.n	8000710 <__aeabi_dadd+0x264>
 8000a64:	1ac4      	subs	r4, r0, r3
 8000a66:	45a0      	cmp	r8, r4
 8000a68:	4180      	sbcs	r0, r0
 8000a6a:	464b      	mov	r3, r9
 8000a6c:	4240      	negs	r0, r0
 8000a6e:	1a59      	subs	r1, r3, r1
 8000a70:	1a0b      	subs	r3, r1, r0
 8000a72:	469a      	mov	sl, r3
 8000a74:	4665      	mov	r5, ip
 8000a76:	2601      	movs	r6, #1
 8000a78:	e564      	b.n	8000544 <__aeabi_dadd+0x98>
 8000a7a:	1a1c      	subs	r4, r3, r0
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	4180      	sbcs	r0, r0
 8000a82:	1a8a      	subs	r2, r1, r2
 8000a84:	4240      	negs	r0, r0
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	4692      	mov	sl, r2
 8000a8a:	0212      	lsls	r2, r2, #8
 8000a8c:	d549      	bpl.n	8000b22 <__aeabi_dadd+0x676>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	1ad4      	subs	r4, r2, r3
 8000a92:	45a0      	cmp	r8, r4
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	464b      	mov	r3, r9
 8000a98:	4240      	negs	r0, r0
 8000a9a:	1a59      	subs	r1, r3, r1
 8000a9c:	1a0b      	subs	r3, r1, r0
 8000a9e:	469a      	mov	sl, r3
 8000aa0:	4665      	mov	r5, ip
 8000aa2:	e57f      	b.n	80005a4 <__aeabi_dadd+0xf8>
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	08c0      	lsrs	r0, r0, #3
 8000aaa:	075b      	lsls	r3, r3, #29
 8000aac:	4303      	orrs	r3, r0
 8000aae:	08d1      	lsrs	r1, r2, #3
 8000ab0:	e62b      	b.n	800070a <__aeabi_dadd+0x25e>
 8000ab2:	464a      	mov	r2, r9
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d138      	bne.n	8000b2c <__aeabi_dadd+0x680>
 8000aba:	074a      	lsls	r2, r1, #29
 8000abc:	4313      	orrs	r3, r2
 8000abe:	08c9      	lsrs	r1, r1, #3
 8000ac0:	e646      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000ac2:	464b      	mov	r3, r9
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	08c0      	lsrs	r0, r0, #3
 8000ac8:	075b      	lsls	r3, r3, #29
 8000aca:	4303      	orrs	r3, r0
 8000acc:	08d1      	lsrs	r1, r2, #3
 8000ace:	e61f      	b.n	8000710 <__aeabi_dadd+0x264>
 8000ad0:	181c      	adds	r4, r3, r0
 8000ad2:	429c      	cmp	r4, r3
 8000ad4:	419b      	sbcs	r3, r3
 8000ad6:	4449      	add	r1, r9
 8000ad8:	468a      	mov	sl, r1
 8000ada:	425b      	negs	r3, r3
 8000adc:	449a      	add	sl, r3
 8000ade:	4653      	mov	r3, sl
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_dadd+0x63a>
 8000ae4:	e607      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000ae6:	4652      	mov	r2, sl
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <__aeabi_dadd+0x6bc>)
 8000aea:	2601      	movs	r6, #1
 8000aec:	401a      	ands	r2, r3
 8000aee:	4692      	mov	sl, r2
 8000af0:	e601      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000af2:	003c      	movs	r4, r7
 8000af4:	000e      	movs	r6, r1
 8000af6:	3c20      	subs	r4, #32
 8000af8:	40e6      	lsrs	r6, r4
 8000afa:	2f20      	cmp	r7, #32
 8000afc:	d003      	beq.n	8000b06 <__aeabi_dadd+0x65a>
 8000afe:	2440      	movs	r4, #64	; 0x40
 8000b00:	1be4      	subs	r4, r4, r7
 8000b02:	40a1      	lsls	r1, r4
 8000b04:	430b      	orrs	r3, r1
 8000b06:	001c      	movs	r4, r3
 8000b08:	1e63      	subs	r3, r4, #1
 8000b0a:	419c      	sbcs	r4, r3
 8000b0c:	4334      	orrs	r4, r6
 8000b0e:	e65e      	b.n	80007ce <__aeabi_dadd+0x322>
 8000b10:	4443      	add	r3, r8
 8000b12:	4283      	cmp	r3, r0
 8000b14:	4180      	sbcs	r0, r0
 8000b16:	4449      	add	r1, r9
 8000b18:	468a      	mov	sl, r1
 8000b1a:	4240      	negs	r0, r0
 8000b1c:	001c      	movs	r4, r3
 8000b1e:	4482      	add	sl, r0
 8000b20:	e6bc      	b.n	800089c <__aeabi_dadd+0x3f0>
 8000b22:	4653      	mov	r3, sl
 8000b24:	4323      	orrs	r3, r4
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x67e>
 8000b28:	e6a9      	b.n	800087e <__aeabi_dadd+0x3d2>
 8000b2a:	e5e4      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000b2c:	074a      	lsls	r2, r1, #29
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	08c9      	lsrs	r1, r1, #3
 8000b34:	0312      	lsls	r2, r2, #12
 8000b36:	4211      	tst	r1, r2
 8000b38:	d009      	beq.n	8000b4e <__aeabi_dadd+0x6a2>
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	08c4      	lsrs	r4, r0, #3
 8000b3e:	4214      	tst	r4, r2
 8000b40:	d105      	bne.n	8000b4e <__aeabi_dadd+0x6a2>
 8000b42:	4643      	mov	r3, r8
 8000b44:	4665      	mov	r5, ip
 8000b46:	0021      	movs	r1, r4
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	0742      	lsls	r2, r0, #29
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	0f5a      	lsrs	r2, r3, #29
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	0752      	lsls	r2, r2, #29
 8000b56:	4313      	orrs	r3, r2
 8000b58:	e5fa      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	4a01      	ldr	r2, [pc, #4]	; (8000b64 <__aeabi_dadd+0x6b8>)
 8000b5e:	001c      	movs	r4, r3
 8000b60:	e540      	b.n	80005e4 <__aeabi_dadd+0x138>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff

08000b6c <__aeabi_ddiv>:
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	4657      	mov	r7, sl
 8000b70:	464e      	mov	r6, r9
 8000b72:	4645      	mov	r5, r8
 8000b74:	46de      	mov	lr, fp
 8000b76:	b5e0      	push	{r5, r6, r7, lr}
 8000b78:	030c      	lsls	r4, r1, #12
 8000b7a:	001f      	movs	r7, r3
 8000b7c:	004b      	lsls	r3, r1, #1
 8000b7e:	4681      	mov	r9, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0005      	movs	r5, r0
 8000b84:	b085      	sub	sp, #20
 8000b86:	0b24      	lsrs	r4, r4, #12
 8000b88:	0d5b      	lsrs	r3, r3, #21
 8000b8a:	0fce      	lsrs	r6, r1, #31
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x26>
 8000b90:	e152      	b.n	8000e38 <__aeabi_ddiv+0x2cc>
 8000b92:	4ad2      	ldr	r2, [pc, #840]	; (8000edc <__aeabi_ddiv+0x370>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d100      	bne.n	8000b9a <__aeabi_ddiv+0x2e>
 8000b98:	e16e      	b.n	8000e78 <__aeabi_ddiv+0x30c>
 8000b9a:	0f42      	lsrs	r2, r0, #29
 8000b9c:	00e4      	lsls	r4, r4, #3
 8000b9e:	4314      	orrs	r4, r2
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0412      	lsls	r2, r2, #16
 8000ba4:	4322      	orrs	r2, r4
 8000ba6:	4690      	mov	r8, r2
 8000ba8:	4acd      	ldr	r2, [pc, #820]	; (8000ee0 <__aeabi_ddiv+0x374>)
 8000baa:	00c5      	lsls	r5, r0, #3
 8000bac:	4693      	mov	fp, r2
 8000bae:	449b      	add	fp, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	033c      	lsls	r4, r7, #12
 8000bb8:	007b      	lsls	r3, r7, #1
 8000bba:	4650      	mov	r0, sl
 8000bbc:	0b24      	lsrs	r4, r4, #12
 8000bbe:	0d5b      	lsrs	r3, r3, #21
 8000bc0:	0fff      	lsrs	r7, r7, #31
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_ddiv+0x5c>
 8000bc6:	e11a      	b.n	8000dfe <__aeabi_ddiv+0x292>
 8000bc8:	4ac4      	ldr	r2, [pc, #784]	; (8000edc <__aeabi_ddiv+0x370>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_ddiv+0x64>
 8000bce:	e15e      	b.n	8000e8e <__aeabi_ddiv+0x322>
 8000bd0:	0f42      	lsrs	r2, r0, #29
 8000bd2:	00e4      	lsls	r4, r4, #3
 8000bd4:	4322      	orrs	r2, r4
 8000bd6:	2480      	movs	r4, #128	; 0x80
 8000bd8:	0424      	lsls	r4, r4, #16
 8000bda:	4314      	orrs	r4, r2
 8000bdc:	4ac0      	ldr	r2, [pc, #768]	; (8000ee0 <__aeabi_ddiv+0x374>)
 8000bde:	00c1      	lsls	r1, r0, #3
 8000be0:	4694      	mov	ip, r2
 8000be2:	465a      	mov	r2, fp
 8000be4:	4463      	add	r3, ip
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	469b      	mov	fp, r3
 8000bea:	2000      	movs	r0, #0
 8000bec:	0033      	movs	r3, r6
 8000bee:	407b      	eors	r3, r7
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	464b      	mov	r3, r9
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d827      	bhi.n	8000c48 <__aeabi_ddiv+0xdc>
 8000bf8:	4aba      	ldr	r2, [pc, #744]	; (8000ee4 <__aeabi_ddiv+0x378>)
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	58d3      	ldr	r3, [r2, r3]
 8000bfe:	469f      	mov	pc, r3
 8000c00:	46b2      	mov	sl, r6
 8000c02:	9b00      	ldr	r3, [sp, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d016      	beq.n	8000c36 <__aeabi_ddiv+0xca>
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_ddiv+0xa2>
 8000c0c:	e287      	b.n	800111e <__aeabi_ddiv+0x5b2>
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d000      	beq.n	8000c14 <__aeabi_ddiv+0xa8>
 8000c12:	e0d5      	b.n	8000dc0 <__aeabi_ddiv+0x254>
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2500      	movs	r5, #0
 8000c1a:	051b      	lsls	r3, r3, #20
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	4652      	mov	r2, sl
 8000c20:	07d2      	lsls	r2, r2, #31
 8000c22:	4313      	orrs	r3, r2
 8000c24:	0028      	movs	r0, r5
 8000c26:	0019      	movs	r1, r3
 8000c28:	b005      	add	sp, #20
 8000c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c2c:	46bb      	mov	fp, r7
 8000c2e:	46b2      	mov	sl, r6
 8000c30:	46a9      	mov	r9, r5
 8000c32:	46a0      	mov	r8, r4
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c36:	2200      	movs	r2, #0
 8000c38:	2500      	movs	r5, #0
 8000c3a:	4ba8      	ldr	r3, [pc, #672]	; (8000edc <__aeabi_ddiv+0x370>)
 8000c3c:	e7ed      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000c3e:	46ba      	mov	sl, r7
 8000c40:	46a0      	mov	r8, r4
 8000c42:	000d      	movs	r5, r1
 8000c44:	9000      	str	r0, [sp, #0]
 8000c46:	e7dc      	b.n	8000c02 <__aeabi_ddiv+0x96>
 8000c48:	4544      	cmp	r4, r8
 8000c4a:	d200      	bcs.n	8000c4e <__aeabi_ddiv+0xe2>
 8000c4c:	e1c4      	b.n	8000fd8 <__aeabi_ddiv+0x46c>
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_ddiv+0xe6>
 8000c50:	e1bf      	b.n	8000fd2 <__aeabi_ddiv+0x466>
 8000c52:	2301      	movs	r3, #1
 8000c54:	425b      	negs	r3, r3
 8000c56:	469c      	mov	ip, r3
 8000c58:	002e      	movs	r6, r5
 8000c5a:	4640      	mov	r0, r8
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	44e3      	add	fp, ip
 8000c60:	0223      	lsls	r3, r4, #8
 8000c62:	0e0c      	lsrs	r4, r1, #24
 8000c64:	431c      	orrs	r4, r3
 8000c66:	0c1b      	lsrs	r3, r3, #16
 8000c68:	4699      	mov	r9, r3
 8000c6a:	0423      	lsls	r3, r4, #16
 8000c6c:	020a      	lsls	r2, r1, #8
 8000c6e:	0c1f      	lsrs	r7, r3, #16
 8000c70:	4649      	mov	r1, r9
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	9701      	str	r7, [sp, #4]
 8000c76:	f7ff facd 	bl	8000214 <__aeabi_uidivmod>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	437a      	muls	r2, r7
 8000c7e:	040b      	lsls	r3, r1, #16
 8000c80:	0c31      	lsrs	r1, r6, #16
 8000c82:	4680      	mov	r8, r0
 8000c84:	4319      	orrs	r1, r3
 8000c86:	428a      	cmp	r2, r1
 8000c88:	d907      	bls.n	8000c9a <__aeabi_ddiv+0x12e>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	469c      	mov	ip, r3
 8000c90:	1909      	adds	r1, r1, r4
 8000c92:	44e0      	add	r8, ip
 8000c94:	428c      	cmp	r4, r1
 8000c96:	d800      	bhi.n	8000c9a <__aeabi_ddiv+0x12e>
 8000c98:	e201      	b.n	800109e <__aeabi_ddiv+0x532>
 8000c9a:	1a88      	subs	r0, r1, r2
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	f7ff fab9 	bl	8000214 <__aeabi_uidivmod>
 8000ca2:	9a01      	ldr	r2, [sp, #4]
 8000ca4:	0436      	lsls	r6, r6, #16
 8000ca6:	4342      	muls	r2, r0
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	0003      	movs	r3, r0
 8000cae:	430e      	orrs	r6, r1
 8000cb0:	42b2      	cmp	r2, r6
 8000cb2:	d904      	bls.n	8000cbe <__aeabi_ddiv+0x152>
 8000cb4:	1936      	adds	r6, r6, r4
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	42b4      	cmp	r4, r6
 8000cba:	d800      	bhi.n	8000cbe <__aeabi_ddiv+0x152>
 8000cbc:	e1e9      	b.n	8001092 <__aeabi_ddiv+0x526>
 8000cbe:	1ab0      	subs	r0, r6, r2
 8000cc0:	4642      	mov	r2, r8
 8000cc2:	9e00      	ldr	r6, [sp, #0]
 8000cc4:	0412      	lsls	r2, r2, #16
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	0c33      	lsrs	r3, r6, #16
 8000cca:	001f      	movs	r7, r3
 8000ccc:	0c11      	lsrs	r1, r2, #16
 8000cce:	4690      	mov	r8, r2
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	0413      	lsls	r3, r2, #16
 8000cd4:	0432      	lsls	r2, r6, #16
 8000cd6:	0c16      	lsrs	r6, r2, #16
 8000cd8:	0032      	movs	r2, r6
 8000cda:	0c1b      	lsrs	r3, r3, #16
 8000cdc:	435a      	muls	r2, r3
 8000cde:	9603      	str	r6, [sp, #12]
 8000ce0:	437b      	muls	r3, r7
 8000ce2:	434e      	muls	r6, r1
 8000ce4:	4379      	muls	r1, r7
 8000ce6:	0c17      	lsrs	r7, r2, #16
 8000ce8:	46bc      	mov	ip, r7
 8000cea:	199b      	adds	r3, r3, r6
 8000cec:	4463      	add	r3, ip
 8000cee:	429e      	cmp	r6, r3
 8000cf0:	d903      	bls.n	8000cfa <__aeabi_ddiv+0x18e>
 8000cf2:	2680      	movs	r6, #128	; 0x80
 8000cf4:	0276      	lsls	r6, r6, #9
 8000cf6:	46b4      	mov	ip, r6
 8000cf8:	4461      	add	r1, ip
 8000cfa:	0c1e      	lsrs	r6, r3, #16
 8000cfc:	1871      	adds	r1, r6, r1
 8000cfe:	0416      	lsls	r6, r2, #16
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	0c36      	lsrs	r6, r6, #16
 8000d04:	199e      	adds	r6, r3, r6
 8000d06:	4288      	cmp	r0, r1
 8000d08:	d302      	bcc.n	8000d10 <__aeabi_ddiv+0x1a4>
 8000d0a:	d112      	bne.n	8000d32 <__aeabi_ddiv+0x1c6>
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	d210      	bcs.n	8000d32 <__aeabi_ddiv+0x1c6>
 8000d10:	4643      	mov	r3, r8
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	9b00      	ldr	r3, [sp, #0]
 8000d16:	469c      	mov	ip, r3
 8000d18:	4465      	add	r5, ip
 8000d1a:	001f      	movs	r7, r3
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	419b      	sbcs	r3, r3
 8000d20:	425b      	negs	r3, r3
 8000d22:	191b      	adds	r3, r3, r4
 8000d24:	18c0      	adds	r0, r0, r3
 8000d26:	4284      	cmp	r4, r0
 8000d28:	d200      	bcs.n	8000d2c <__aeabi_ddiv+0x1c0>
 8000d2a:	e19e      	b.n	800106a <__aeabi_ddiv+0x4fe>
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x1c4>
 8000d2e:	e199      	b.n	8001064 <__aeabi_ddiv+0x4f8>
 8000d30:	4690      	mov	r8, r2
 8000d32:	1bae      	subs	r6, r5, r6
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	41ad      	sbcs	r5, r5
 8000d38:	1a40      	subs	r0, r0, r1
 8000d3a:	426d      	negs	r5, r5
 8000d3c:	1b40      	subs	r0, r0, r5
 8000d3e:	4284      	cmp	r4, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x1d8>
 8000d42:	e1d2      	b.n	80010ea <__aeabi_ddiv+0x57e>
 8000d44:	4649      	mov	r1, r9
 8000d46:	f7ff fa65 	bl	8000214 <__aeabi_uidivmod>
 8000d4a:	9a01      	ldr	r2, [sp, #4]
 8000d4c:	040b      	lsls	r3, r1, #16
 8000d4e:	4342      	muls	r2, r0
 8000d50:	0c31      	lsrs	r1, r6, #16
 8000d52:	0005      	movs	r5, r0
 8000d54:	4319      	orrs	r1, r3
 8000d56:	428a      	cmp	r2, r1
 8000d58:	d900      	bls.n	8000d5c <__aeabi_ddiv+0x1f0>
 8000d5a:	e16c      	b.n	8001036 <__aeabi_ddiv+0x4ca>
 8000d5c:	1a88      	subs	r0, r1, r2
 8000d5e:	4649      	mov	r1, r9
 8000d60:	f7ff fa58 	bl	8000214 <__aeabi_uidivmod>
 8000d64:	9a01      	ldr	r2, [sp, #4]
 8000d66:	0436      	lsls	r6, r6, #16
 8000d68:	4342      	muls	r2, r0
 8000d6a:	0409      	lsls	r1, r1, #16
 8000d6c:	0c36      	lsrs	r6, r6, #16
 8000d6e:	0003      	movs	r3, r0
 8000d70:	430e      	orrs	r6, r1
 8000d72:	42b2      	cmp	r2, r6
 8000d74:	d900      	bls.n	8000d78 <__aeabi_ddiv+0x20c>
 8000d76:	e153      	b.n	8001020 <__aeabi_ddiv+0x4b4>
 8000d78:	9803      	ldr	r0, [sp, #12]
 8000d7a:	1ab6      	subs	r6, r6, r2
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	042d      	lsls	r5, r5, #16
 8000d80:	431d      	orrs	r5, r3
 8000d82:	9f02      	ldr	r7, [sp, #8]
 8000d84:	042b      	lsls	r3, r5, #16
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	435a      	muls	r2, r3
 8000d8a:	437b      	muls	r3, r7
 8000d8c:	469c      	mov	ip, r3
 8000d8e:	0c29      	lsrs	r1, r5, #16
 8000d90:	4348      	muls	r0, r1
 8000d92:	0c13      	lsrs	r3, r2, #16
 8000d94:	4484      	add	ip, r0
 8000d96:	4463      	add	r3, ip
 8000d98:	4379      	muls	r1, r7
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d903      	bls.n	8000da6 <__aeabi_ddiv+0x23a>
 8000d9e:	2080      	movs	r0, #128	; 0x80
 8000da0:	0240      	lsls	r0, r0, #9
 8000da2:	4684      	mov	ip, r0
 8000da4:	4461      	add	r1, ip
 8000da6:	0c18      	lsrs	r0, r3, #16
 8000da8:	0412      	lsls	r2, r2, #16
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	0c12      	lsrs	r2, r2, #16
 8000dae:	1840      	adds	r0, r0, r1
 8000db0:	189b      	adds	r3, r3, r2
 8000db2:	4286      	cmp	r6, r0
 8000db4:	d200      	bcs.n	8000db8 <__aeabi_ddiv+0x24c>
 8000db6:	e100      	b.n	8000fba <__aeabi_ddiv+0x44e>
 8000db8:	d100      	bne.n	8000dbc <__aeabi_ddiv+0x250>
 8000dba:	e0fb      	b.n	8000fb4 <__aeabi_ddiv+0x448>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	431d      	orrs	r5, r3
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <__aeabi_ddiv+0x37c>)
 8000dc2:	445b      	add	r3, fp
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dc00      	bgt.n	8000dca <__aeabi_ddiv+0x25e>
 8000dc8:	e0aa      	b.n	8000f20 <__aeabi_ddiv+0x3b4>
 8000dca:	076a      	lsls	r2, r5, #29
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_ddiv+0x264>
 8000dce:	e13d      	b.n	800104c <__aeabi_ddiv+0x4e0>
 8000dd0:	08e9      	lsrs	r1, r5, #3
 8000dd2:	4642      	mov	r2, r8
 8000dd4:	01d2      	lsls	r2, r2, #7
 8000dd6:	d506      	bpl.n	8000de6 <__aeabi_ddiv+0x27a>
 8000dd8:	4642      	mov	r2, r8
 8000dda:	4b44      	ldr	r3, [pc, #272]	; (8000eec <__aeabi_ddiv+0x380>)
 8000ddc:	401a      	ands	r2, r3
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	4690      	mov	r8, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	445b      	add	r3, fp
 8000de6:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <__aeabi_ddiv+0x384>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	dd00      	ble.n	8000dee <__aeabi_ddiv+0x282>
 8000dec:	e723      	b.n	8000c36 <__aeabi_ddiv+0xca>
 8000dee:	4642      	mov	r2, r8
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	0755      	lsls	r5, r2, #29
 8000df4:	0252      	lsls	r2, r2, #9
 8000df6:	430d      	orrs	r5, r1
 8000df8:	0b12      	lsrs	r2, r2, #12
 8000dfa:	0d5b      	lsrs	r3, r3, #21
 8000dfc:	e70d      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000dfe:	4651      	mov	r1, sl
 8000e00:	4321      	orrs	r1, r4
 8000e02:	d100      	bne.n	8000e06 <__aeabi_ddiv+0x29a>
 8000e04:	e07c      	b.n	8000f00 <__aeabi_ddiv+0x394>
 8000e06:	2c00      	cmp	r4, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x2a0>
 8000e0a:	e0fb      	b.n	8001004 <__aeabi_ddiv+0x498>
 8000e0c:	0020      	movs	r0, r4
 8000e0e:	f001 f999 	bl	8002144 <__clzsi2>
 8000e12:	0002      	movs	r2, r0
 8000e14:	3a0b      	subs	r2, #11
 8000e16:	231d      	movs	r3, #29
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	4652      	mov	r2, sl
 8000e1c:	0001      	movs	r1, r0
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	4653      	mov	r3, sl
 8000e22:	3908      	subs	r1, #8
 8000e24:	408b      	lsls	r3, r1
 8000e26:	408c      	lsls	r4, r1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	4314      	orrs	r4, r2
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <__aeabi_ddiv+0x388>)
 8000e2e:	4458      	add	r0, fp
 8000e30:	469b      	mov	fp, r3
 8000e32:	4483      	add	fp, r0
 8000e34:	2000      	movs	r0, #0
 8000e36:	e6d9      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4323      	orrs	r3, r4
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	d044      	beq.n	8000eca <__aeabi_ddiv+0x35e>
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_ddiv+0x2da>
 8000e44:	e0cf      	b.n	8000fe6 <__aeabi_ddiv+0x47a>
 8000e46:	0020      	movs	r0, r4
 8000e48:	f001 f97c 	bl	8002144 <__clzsi2>
 8000e4c:	0001      	movs	r1, r0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	390b      	subs	r1, #11
 8000e52:	231d      	movs	r3, #29
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	4649      	mov	r1, r9
 8000e58:	0010      	movs	r0, r2
 8000e5a:	40d9      	lsrs	r1, r3
 8000e5c:	3808      	subs	r0, #8
 8000e5e:	4084      	lsls	r4, r0
 8000e60:	000b      	movs	r3, r1
 8000e62:	464d      	mov	r5, r9
 8000e64:	4323      	orrs	r3, r4
 8000e66:	4698      	mov	r8, r3
 8000e68:	4085      	lsls	r5, r0
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <__aeabi_ddiv+0x38c>)
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	469b      	mov	fp, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	4699      	mov	r9, r3
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	e69e      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	4690      	mov	r8, r2
 8000e7e:	d11d      	bne.n	8000ebc <__aeabi_ddiv+0x350>
 8000e80:	2208      	movs	r2, #8
 8000e82:	469b      	mov	fp, r3
 8000e84:	2302      	movs	r3, #2
 8000e86:	2500      	movs	r5, #0
 8000e88:	4691      	mov	r9, r2
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	e693      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000e8e:	4651      	mov	r1, sl
 8000e90:	4321      	orrs	r1, r4
 8000e92:	d109      	bne.n	8000ea8 <__aeabi_ddiv+0x33c>
 8000e94:	2302      	movs	r3, #2
 8000e96:	464a      	mov	r2, r9
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <__aeabi_ddiv+0x390>)
 8000e9c:	4691      	mov	r9, r2
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	44e3      	add	fp, ip
 8000ea6:	e6a1      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	464a      	mov	r2, r9
 8000eac:	431a      	orrs	r2, r3
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <__aeabi_ddiv+0x390>)
 8000eb0:	4691      	mov	r9, r2
 8000eb2:	469c      	mov	ip, r3
 8000eb4:	4651      	mov	r1, sl
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	44e3      	add	fp, ip
 8000eba:	e697      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	469b      	mov	fp, r3
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	46a0      	mov	r8, r4
 8000ec4:	4691      	mov	r9, r2
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	e675      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	4699      	mov	r9, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	e66d      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	000007ff 	.word	0x000007ff
 8000ee0:	fffffc01 	.word	0xfffffc01
 8000ee4:	080072c0 	.word	0x080072c0
 8000ee8:	000003ff 	.word	0x000003ff
 8000eec:	feffffff 	.word	0xfeffffff
 8000ef0:	000007fe 	.word	0x000007fe
 8000ef4:	000003f3 	.word	0x000003f3
 8000ef8:	fffffc0d 	.word	0xfffffc0d
 8000efc:	fffff801 	.word	0xfffff801
 8000f00:	464a      	mov	r2, r9
 8000f02:	2301      	movs	r3, #1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4691      	mov	r9, r2
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	e66e      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	469a      	mov	sl, r3
 8000f14:	2500      	movs	r5, #0
 8000f16:	4b88      	ldr	r3, [pc, #544]	; (8001138 <__aeabi_ddiv+0x5cc>)
 8000f18:	0312      	lsls	r2, r2, #12
 8000f1a:	e67e      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000f1c:	2501      	movs	r5, #1
 8000f1e:	426d      	negs	r5, r5
 8000f20:	2201      	movs	r2, #1
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	2a38      	cmp	r2, #56	; 0x38
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_ddiv+0x3be>
 8000f28:	e674      	b.n	8000c14 <__aeabi_ddiv+0xa8>
 8000f2a:	2a1f      	cmp	r2, #31
 8000f2c:	dc00      	bgt.n	8000f30 <__aeabi_ddiv+0x3c4>
 8000f2e:	e0bd      	b.n	80010ac <__aeabi_ddiv+0x540>
 8000f30:	211f      	movs	r1, #31
 8000f32:	4249      	negs	r1, r1
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	4641      	mov	r1, r8
 8000f38:	40d9      	lsrs	r1, r3
 8000f3a:	000b      	movs	r3, r1
 8000f3c:	2a20      	cmp	r2, #32
 8000f3e:	d004      	beq.n	8000f4a <__aeabi_ddiv+0x3de>
 8000f40:	4641      	mov	r1, r8
 8000f42:	4a7e      	ldr	r2, [pc, #504]	; (800113c <__aeabi_ddiv+0x5d0>)
 8000f44:	445a      	add	r2, fp
 8000f46:	4091      	lsls	r1, r2
 8000f48:	430d      	orrs	r5, r1
 8000f4a:	0029      	movs	r1, r5
 8000f4c:	1e4a      	subs	r2, r1, #1
 8000f4e:	4191      	sbcs	r1, r2
 8000f50:	4319      	orrs	r1, r3
 8000f52:	2307      	movs	r3, #7
 8000f54:	001d      	movs	r5, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	400d      	ands	r5, r1
 8000f5a:	420b      	tst	r3, r1
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x3f4>
 8000f5e:	e0d0      	b.n	8001102 <__aeabi_ddiv+0x596>
 8000f60:	220f      	movs	r2, #15
 8000f62:	2300      	movs	r3, #0
 8000f64:	400a      	ands	r2, r1
 8000f66:	2a04      	cmp	r2, #4
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x400>
 8000f6a:	e0c7      	b.n	80010fc <__aeabi_ddiv+0x590>
 8000f6c:	1d0a      	adds	r2, r1, #4
 8000f6e:	428a      	cmp	r2, r1
 8000f70:	4189      	sbcs	r1, r1
 8000f72:	4249      	negs	r1, r1
 8000f74:	185b      	adds	r3, r3, r1
 8000f76:	0011      	movs	r1, r2
 8000f78:	021a      	lsls	r2, r3, #8
 8000f7a:	d400      	bmi.n	8000f7e <__aeabi_ddiv+0x412>
 8000f7c:	e0be      	b.n	80010fc <__aeabi_ddiv+0x590>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2200      	movs	r2, #0
 8000f82:	2500      	movs	r5, #0
 8000f84:	e649      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	4643      	mov	r3, r8
 8000f8a:	0312      	lsls	r2, r2, #12
 8000f8c:	4213      	tst	r3, r2
 8000f8e:	d008      	beq.n	8000fa2 <__aeabi_ddiv+0x436>
 8000f90:	4214      	tst	r4, r2
 8000f92:	d106      	bne.n	8000fa2 <__aeabi_ddiv+0x436>
 8000f94:	4322      	orrs	r2, r4
 8000f96:	0312      	lsls	r2, r2, #12
 8000f98:	46ba      	mov	sl, r7
 8000f9a:	000d      	movs	r5, r1
 8000f9c:	4b66      	ldr	r3, [pc, #408]	; (8001138 <__aeabi_ddiv+0x5cc>)
 8000f9e:	0b12      	lsrs	r2, r2, #12
 8000fa0:	e63b      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	0312      	lsls	r2, r2, #12
 8000fac:	46b2      	mov	sl, r6
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <__aeabi_ddiv+0x5cc>)
 8000fb0:	0b12      	lsrs	r2, r2, #12
 8000fb2:	e632      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_ddiv+0x44e>
 8000fb8:	e702      	b.n	8000dc0 <__aeabi_ddiv+0x254>
 8000fba:	19a6      	adds	r6, r4, r6
 8000fbc:	1e6a      	subs	r2, r5, #1
 8000fbe:	42a6      	cmp	r6, r4
 8000fc0:	d200      	bcs.n	8000fc4 <__aeabi_ddiv+0x458>
 8000fc2:	e089      	b.n	80010d8 <__aeabi_ddiv+0x56c>
 8000fc4:	4286      	cmp	r6, r0
 8000fc6:	d200      	bcs.n	8000fca <__aeabi_ddiv+0x45e>
 8000fc8:	e09f      	b.n	800110a <__aeabi_ddiv+0x59e>
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x462>
 8000fcc:	e0af      	b.n	800112e <__aeabi_ddiv+0x5c2>
 8000fce:	0015      	movs	r5, r2
 8000fd0:	e6f4      	b.n	8000dbc <__aeabi_ddiv+0x250>
 8000fd2:	42a9      	cmp	r1, r5
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x46c>
 8000fd6:	e63c      	b.n	8000c52 <__aeabi_ddiv+0xe6>
 8000fd8:	4643      	mov	r3, r8
 8000fda:	07de      	lsls	r6, r3, #31
 8000fdc:	0858      	lsrs	r0, r3, #1
 8000fde:	086b      	lsrs	r3, r5, #1
 8000fe0:	431e      	orrs	r6, r3
 8000fe2:	07ed      	lsls	r5, r5, #31
 8000fe4:	e63c      	b.n	8000c60 <__aeabi_ddiv+0xf4>
 8000fe6:	f001 f8ad 	bl	8002144 <__clzsi2>
 8000fea:	0001      	movs	r1, r0
 8000fec:	0002      	movs	r2, r0
 8000fee:	3115      	adds	r1, #21
 8000ff0:	3220      	adds	r2, #32
 8000ff2:	291c      	cmp	r1, #28
 8000ff4:	dc00      	bgt.n	8000ff8 <__aeabi_ddiv+0x48c>
 8000ff6:	e72c      	b.n	8000e52 <__aeabi_ddiv+0x2e6>
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	3808      	subs	r0, #8
 8000ffc:	4083      	lsls	r3, r0
 8000ffe:	2500      	movs	r5, #0
 8001000:	4698      	mov	r8, r3
 8001002:	e732      	b.n	8000e6a <__aeabi_ddiv+0x2fe>
 8001004:	f001 f89e 	bl	8002144 <__clzsi2>
 8001008:	0003      	movs	r3, r0
 800100a:	001a      	movs	r2, r3
 800100c:	3215      	adds	r2, #21
 800100e:	3020      	adds	r0, #32
 8001010:	2a1c      	cmp	r2, #28
 8001012:	dc00      	bgt.n	8001016 <__aeabi_ddiv+0x4aa>
 8001014:	e6ff      	b.n	8000e16 <__aeabi_ddiv+0x2aa>
 8001016:	4654      	mov	r4, sl
 8001018:	3b08      	subs	r3, #8
 800101a:	2100      	movs	r1, #0
 800101c:	409c      	lsls	r4, r3
 800101e:	e705      	b.n	8000e2c <__aeabi_ddiv+0x2c0>
 8001020:	1936      	adds	r6, r6, r4
 8001022:	3b01      	subs	r3, #1
 8001024:	42b4      	cmp	r4, r6
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x4be>
 8001028:	e6a6      	b.n	8000d78 <__aeabi_ddiv+0x20c>
 800102a:	42b2      	cmp	r2, r6
 800102c:	d800      	bhi.n	8001030 <__aeabi_ddiv+0x4c4>
 800102e:	e6a3      	b.n	8000d78 <__aeabi_ddiv+0x20c>
 8001030:	1e83      	subs	r3, r0, #2
 8001032:	1936      	adds	r6, r6, r4
 8001034:	e6a0      	b.n	8000d78 <__aeabi_ddiv+0x20c>
 8001036:	1909      	adds	r1, r1, r4
 8001038:	3d01      	subs	r5, #1
 800103a:	428c      	cmp	r4, r1
 800103c:	d900      	bls.n	8001040 <__aeabi_ddiv+0x4d4>
 800103e:	e68d      	b.n	8000d5c <__aeabi_ddiv+0x1f0>
 8001040:	428a      	cmp	r2, r1
 8001042:	d800      	bhi.n	8001046 <__aeabi_ddiv+0x4da>
 8001044:	e68a      	b.n	8000d5c <__aeabi_ddiv+0x1f0>
 8001046:	1e85      	subs	r5, r0, #2
 8001048:	1909      	adds	r1, r1, r4
 800104a:	e687      	b.n	8000d5c <__aeabi_ddiv+0x1f0>
 800104c:	220f      	movs	r2, #15
 800104e:	402a      	ands	r2, r5
 8001050:	2a04      	cmp	r2, #4
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x4ea>
 8001054:	e6bc      	b.n	8000dd0 <__aeabi_ddiv+0x264>
 8001056:	1d29      	adds	r1, r5, #4
 8001058:	42a9      	cmp	r1, r5
 800105a:	41ad      	sbcs	r5, r5
 800105c:	426d      	negs	r5, r5
 800105e:	08c9      	lsrs	r1, r1, #3
 8001060:	44a8      	add	r8, r5
 8001062:	e6b6      	b.n	8000dd2 <__aeabi_ddiv+0x266>
 8001064:	42af      	cmp	r7, r5
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fe>
 8001068:	e662      	b.n	8000d30 <__aeabi_ddiv+0x1c4>
 800106a:	4281      	cmp	r1, r0
 800106c:	d804      	bhi.n	8001078 <__aeabi_ddiv+0x50c>
 800106e:	d000      	beq.n	8001072 <__aeabi_ddiv+0x506>
 8001070:	e65e      	b.n	8000d30 <__aeabi_ddiv+0x1c4>
 8001072:	42ae      	cmp	r6, r5
 8001074:	d800      	bhi.n	8001078 <__aeabi_ddiv+0x50c>
 8001076:	e65b      	b.n	8000d30 <__aeabi_ddiv+0x1c4>
 8001078:	2302      	movs	r3, #2
 800107a:	425b      	negs	r3, r3
 800107c:	469c      	mov	ip, r3
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	44e0      	add	r8, ip
 8001082:	469c      	mov	ip, r3
 8001084:	4465      	add	r5, ip
 8001086:	429d      	cmp	r5, r3
 8001088:	419b      	sbcs	r3, r3
 800108a:	425b      	negs	r3, r3
 800108c:	191b      	adds	r3, r3, r4
 800108e:	18c0      	adds	r0, r0, r3
 8001090:	e64f      	b.n	8000d32 <__aeabi_ddiv+0x1c6>
 8001092:	42b2      	cmp	r2, r6
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x52c>
 8001096:	e612      	b.n	8000cbe <__aeabi_ddiv+0x152>
 8001098:	1e83      	subs	r3, r0, #2
 800109a:	1936      	adds	r6, r6, r4
 800109c:	e60f      	b.n	8000cbe <__aeabi_ddiv+0x152>
 800109e:	428a      	cmp	r2, r1
 80010a0:	d800      	bhi.n	80010a4 <__aeabi_ddiv+0x538>
 80010a2:	e5fa      	b.n	8000c9a <__aeabi_ddiv+0x12e>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	4698      	mov	r8, r3
 80010a8:	1909      	adds	r1, r1, r4
 80010aa:	e5f6      	b.n	8000c9a <__aeabi_ddiv+0x12e>
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <__aeabi_ddiv+0x5d4>)
 80010ae:	0028      	movs	r0, r5
 80010b0:	445b      	add	r3, fp
 80010b2:	4641      	mov	r1, r8
 80010b4:	409d      	lsls	r5, r3
 80010b6:	4099      	lsls	r1, r3
 80010b8:	40d0      	lsrs	r0, r2
 80010ba:	1e6b      	subs	r3, r5, #1
 80010bc:	419d      	sbcs	r5, r3
 80010be:	4643      	mov	r3, r8
 80010c0:	4301      	orrs	r1, r0
 80010c2:	4329      	orrs	r1, r5
 80010c4:	40d3      	lsrs	r3, r2
 80010c6:	074a      	lsls	r2, r1, #29
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x560>
 80010ca:	e755      	b.n	8000f78 <__aeabi_ddiv+0x40c>
 80010cc:	220f      	movs	r2, #15
 80010ce:	400a      	ands	r2, r1
 80010d0:	2a04      	cmp	r2, #4
 80010d2:	d000      	beq.n	80010d6 <__aeabi_ddiv+0x56a>
 80010d4:	e74a      	b.n	8000f6c <__aeabi_ddiv+0x400>
 80010d6:	e74f      	b.n	8000f78 <__aeabi_ddiv+0x40c>
 80010d8:	0015      	movs	r5, r2
 80010da:	4286      	cmp	r6, r0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x574>
 80010de:	e66d      	b.n	8000dbc <__aeabi_ddiv+0x250>
 80010e0:	9a00      	ldr	r2, [sp, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d000      	beq.n	80010e8 <__aeabi_ddiv+0x57c>
 80010e6:	e669      	b.n	8000dbc <__aeabi_ddiv+0x250>
 80010e8:	e66a      	b.n	8000dc0 <__aeabi_ddiv+0x254>
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <__aeabi_ddiv+0x5d8>)
 80010ec:	445b      	add	r3, fp
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dc00      	bgt.n	80010f4 <__aeabi_ddiv+0x588>
 80010f2:	e713      	b.n	8000f1c <__aeabi_ddiv+0x3b0>
 80010f4:	2501      	movs	r5, #1
 80010f6:	2100      	movs	r1, #0
 80010f8:	44a8      	add	r8, r5
 80010fa:	e66a      	b.n	8000dd2 <__aeabi_ddiv+0x266>
 80010fc:	075d      	lsls	r5, r3, #29
 80010fe:	025b      	lsls	r3, r3, #9
 8001100:	0b1a      	lsrs	r2, r3, #12
 8001102:	08c9      	lsrs	r1, r1, #3
 8001104:	2300      	movs	r3, #0
 8001106:	430d      	orrs	r5, r1
 8001108:	e587      	b.n	8000c1a <__aeabi_ddiv+0xae>
 800110a:	9900      	ldr	r1, [sp, #0]
 800110c:	3d02      	subs	r5, #2
 800110e:	004a      	lsls	r2, r1, #1
 8001110:	428a      	cmp	r2, r1
 8001112:	41bf      	sbcs	r7, r7
 8001114:	427f      	negs	r7, r7
 8001116:	193f      	adds	r7, r7, r4
 8001118:	19f6      	adds	r6, r6, r7
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	e7dd      	b.n	80010da <__aeabi_ddiv+0x56e>
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	4643      	mov	r3, r8
 8001122:	0312      	lsls	r2, r2, #12
 8001124:	431a      	orrs	r2, r3
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <__aeabi_ddiv+0x5cc>)
 800112a:	0b12      	lsrs	r2, r2, #12
 800112c:	e575      	b.n	8000c1a <__aeabi_ddiv+0xae>
 800112e:	9900      	ldr	r1, [sp, #0]
 8001130:	4299      	cmp	r1, r3
 8001132:	d3ea      	bcc.n	800110a <__aeabi_ddiv+0x59e>
 8001134:	0015      	movs	r5, r2
 8001136:	e7d3      	b.n	80010e0 <__aeabi_ddiv+0x574>
 8001138:	000007ff 	.word	0x000007ff
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff

08001148 <__eqdf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464e      	mov	r6, r9
 800114c:	4645      	mov	r5, r8
 800114e:	46de      	mov	lr, fp
 8001150:	4657      	mov	r7, sl
 8001152:	4690      	mov	r8, r2
 8001154:	b5e0      	push	{r5, r6, r7, lr}
 8001156:	0017      	movs	r7, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	0005      	movs	r5, r0
 800115e:	4684      	mov	ip, r0
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <__eqdf2+0x80>)
 8001162:	030e      	lsls	r6, r1, #12
 8001164:	004c      	lsls	r4, r1, #1
 8001166:	4691      	mov	r9, r2
 8001168:	005a      	lsls	r2, r3, #1
 800116a:	0fdb      	lsrs	r3, r3, #31
 800116c:	469b      	mov	fp, r3
 800116e:	0b36      	lsrs	r6, r6, #12
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	4284      	cmp	r4, r0
 8001178:	d019      	beq.n	80011ae <__eqdf2+0x66>
 800117a:	4282      	cmp	r2, r0
 800117c:	d010      	beq.n	80011a0 <__eqdf2+0x58>
 800117e:	2001      	movs	r0, #1
 8001180:	4294      	cmp	r4, r2
 8001182:	d10e      	bne.n	80011a2 <__eqdf2+0x5a>
 8001184:	454e      	cmp	r6, r9
 8001186:	d10c      	bne.n	80011a2 <__eqdf2+0x5a>
 8001188:	2001      	movs	r0, #1
 800118a:	45c4      	cmp	ip, r8
 800118c:	d109      	bne.n	80011a2 <__eqdf2+0x5a>
 800118e:	4559      	cmp	r1, fp
 8001190:	d017      	beq.n	80011c2 <__eqdf2+0x7a>
 8001192:	2c00      	cmp	r4, #0
 8001194:	d105      	bne.n	80011a2 <__eqdf2+0x5a>
 8001196:	0030      	movs	r0, r6
 8001198:	4328      	orrs	r0, r5
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	4198      	sbcs	r0, r3
 800119e:	e000      	b.n	80011a2 <__eqdf2+0x5a>
 80011a0:	2001      	movs	r0, #1
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	46bb      	mov	fp, r7
 80011a6:	46b2      	mov	sl, r6
 80011a8:	46a9      	mov	r9, r5
 80011aa:	46a0      	mov	r8, r4
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	0033      	movs	r3, r6
 80011b0:	2001      	movs	r0, #1
 80011b2:	432b      	orrs	r3, r5
 80011b4:	d1f5      	bne.n	80011a2 <__eqdf2+0x5a>
 80011b6:	42a2      	cmp	r2, r4
 80011b8:	d1f3      	bne.n	80011a2 <__eqdf2+0x5a>
 80011ba:	464b      	mov	r3, r9
 80011bc:	433b      	orrs	r3, r7
 80011be:	d1f0      	bne.n	80011a2 <__eqdf2+0x5a>
 80011c0:	e7e2      	b.n	8001188 <__eqdf2+0x40>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7ed      	b.n	80011a2 <__eqdf2+0x5a>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	000007ff 	.word	0x000007ff

080011cc <__gedf2>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	4647      	mov	r7, r8
 80011d0:	46ce      	mov	lr, r9
 80011d2:	0004      	movs	r4, r0
 80011d4:	0018      	movs	r0, r3
 80011d6:	0016      	movs	r6, r2
 80011d8:	031b      	lsls	r3, r3, #12
 80011da:	0b1b      	lsrs	r3, r3, #12
 80011dc:	4d2d      	ldr	r5, [pc, #180]	; (8001294 <__gedf2+0xc8>)
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	b580      	push	{r7, lr}
 80011e4:	0043      	lsls	r3, r0, #1
 80011e6:	030f      	lsls	r7, r1, #12
 80011e8:	46a4      	mov	ip, r4
 80011ea:	46b0      	mov	r8, r6
 80011ec:	0b3f      	lsrs	r7, r7, #12
 80011ee:	0d52      	lsrs	r2, r2, #21
 80011f0:	0fc9      	lsrs	r1, r1, #31
 80011f2:	0d5b      	lsrs	r3, r3, #21
 80011f4:	0fc0      	lsrs	r0, r0, #31
 80011f6:	42aa      	cmp	r2, r5
 80011f8:	d021      	beq.n	800123e <__gedf2+0x72>
 80011fa:	42ab      	cmp	r3, r5
 80011fc:	d013      	beq.n	8001226 <__gedf2+0x5a>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d122      	bne.n	8001248 <__gedf2+0x7c>
 8001202:	433c      	orrs	r4, r7
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <__gedf2+0x42>
 8001208:	464d      	mov	r5, r9
 800120a:	432e      	orrs	r6, r5
 800120c:	d022      	beq.n	8001254 <__gedf2+0x88>
 800120e:	2c00      	cmp	r4, #0
 8001210:	d010      	beq.n	8001234 <__gedf2+0x68>
 8001212:	4281      	cmp	r1, r0
 8001214:	d022      	beq.n	800125c <__gedf2+0x90>
 8001216:	2002      	movs	r0, #2
 8001218:	3901      	subs	r1, #1
 800121a:	4008      	ands	r0, r1
 800121c:	3801      	subs	r0, #1
 800121e:	bcc0      	pop	{r6, r7}
 8001220:	46b9      	mov	r9, r7
 8001222:	46b0      	mov	r8, r6
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001226:	464d      	mov	r5, r9
 8001228:	432e      	orrs	r6, r5
 800122a:	d129      	bne.n	8001280 <__gedf2+0xb4>
 800122c:	2a00      	cmp	r2, #0
 800122e:	d1f0      	bne.n	8001212 <__gedf2+0x46>
 8001230:	433c      	orrs	r4, r7
 8001232:	d1ee      	bne.n	8001212 <__gedf2+0x46>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1f2      	bne.n	800121e <__gedf2+0x52>
 8001238:	2001      	movs	r0, #1
 800123a:	4240      	negs	r0, r0
 800123c:	e7ef      	b.n	800121e <__gedf2+0x52>
 800123e:	003d      	movs	r5, r7
 8001240:	4325      	orrs	r5, r4
 8001242:	d11d      	bne.n	8001280 <__gedf2+0xb4>
 8001244:	4293      	cmp	r3, r2
 8001246:	d0ee      	beq.n	8001226 <__gedf2+0x5a>
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e2      	bne.n	8001212 <__gedf2+0x46>
 800124c:	464c      	mov	r4, r9
 800124e:	4326      	orrs	r6, r4
 8001250:	d1df      	bne.n	8001212 <__gedf2+0x46>
 8001252:	e7e0      	b.n	8001216 <__gedf2+0x4a>
 8001254:	2000      	movs	r0, #0
 8001256:	2c00      	cmp	r4, #0
 8001258:	d0e1      	beq.n	800121e <__gedf2+0x52>
 800125a:	e7dc      	b.n	8001216 <__gedf2+0x4a>
 800125c:	429a      	cmp	r2, r3
 800125e:	dc0a      	bgt.n	8001276 <__gedf2+0xaa>
 8001260:	dbe8      	blt.n	8001234 <__gedf2+0x68>
 8001262:	454f      	cmp	r7, r9
 8001264:	d8d7      	bhi.n	8001216 <__gedf2+0x4a>
 8001266:	d00e      	beq.n	8001286 <__gedf2+0xba>
 8001268:	2000      	movs	r0, #0
 800126a:	454f      	cmp	r7, r9
 800126c:	d2d7      	bcs.n	800121e <__gedf2+0x52>
 800126e:	2900      	cmp	r1, #0
 8001270:	d0e2      	beq.n	8001238 <__gedf2+0x6c>
 8001272:	0008      	movs	r0, r1
 8001274:	e7d3      	b.n	800121e <__gedf2+0x52>
 8001276:	4243      	negs	r3, r0
 8001278:	4158      	adcs	r0, r3
 800127a:	0040      	lsls	r0, r0, #1
 800127c:	3801      	subs	r0, #1
 800127e:	e7ce      	b.n	800121e <__gedf2+0x52>
 8001280:	2002      	movs	r0, #2
 8001282:	4240      	negs	r0, r0
 8001284:	e7cb      	b.n	800121e <__gedf2+0x52>
 8001286:	45c4      	cmp	ip, r8
 8001288:	d8c5      	bhi.n	8001216 <__gedf2+0x4a>
 800128a:	2000      	movs	r0, #0
 800128c:	45c4      	cmp	ip, r8
 800128e:	d2c6      	bcs.n	800121e <__gedf2+0x52>
 8001290:	e7ed      	b.n	800126e <__gedf2+0xa2>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	000007ff 	.word	0x000007ff

08001298 <__ledf2>:
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	4647      	mov	r7, r8
 800129c:	46ce      	mov	lr, r9
 800129e:	0004      	movs	r4, r0
 80012a0:	0018      	movs	r0, r3
 80012a2:	0016      	movs	r6, r2
 80012a4:	031b      	lsls	r3, r3, #12
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4d2c      	ldr	r5, [pc, #176]	; (800135c <__ledf2+0xc4>)
 80012aa:	004a      	lsls	r2, r1, #1
 80012ac:	4699      	mov	r9, r3
 80012ae:	b580      	push	{r7, lr}
 80012b0:	0043      	lsls	r3, r0, #1
 80012b2:	030f      	lsls	r7, r1, #12
 80012b4:	46a4      	mov	ip, r4
 80012b6:	46b0      	mov	r8, r6
 80012b8:	0b3f      	lsrs	r7, r7, #12
 80012ba:	0d52      	lsrs	r2, r2, #21
 80012bc:	0fc9      	lsrs	r1, r1, #31
 80012be:	0d5b      	lsrs	r3, r3, #21
 80012c0:	0fc0      	lsrs	r0, r0, #31
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d00d      	beq.n	80012e2 <__ledf2+0x4a>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d010      	beq.n	80012ec <__ledf2+0x54>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d127      	bne.n	800131e <__ledf2+0x86>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d111      	bne.n	80012f8 <__ledf2+0x60>
 80012d4:	464d      	mov	r5, r9
 80012d6:	432e      	orrs	r6, r5
 80012d8:	d10e      	bne.n	80012f8 <__ledf2+0x60>
 80012da:	2000      	movs	r0, #0
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d015      	beq.n	800130c <__ledf2+0x74>
 80012e0:	e00e      	b.n	8001300 <__ledf2+0x68>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d110      	bne.n	800130a <__ledf2+0x72>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d118      	bne.n	800131e <__ledf2+0x86>
 80012ec:	464d      	mov	r5, r9
 80012ee:	432e      	orrs	r6, r5
 80012f0:	d10b      	bne.n	800130a <__ledf2+0x72>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d102      	bne.n	80012fc <__ledf2+0x64>
 80012f6:	433c      	orrs	r4, r7
 80012f8:	2c00      	cmp	r4, #0
 80012fa:	d00b      	beq.n	8001314 <__ledf2+0x7c>
 80012fc:	4281      	cmp	r1, r0
 80012fe:	d014      	beq.n	800132a <__ledf2+0x92>
 8001300:	2002      	movs	r0, #2
 8001302:	3901      	subs	r1, #1
 8001304:	4008      	ands	r0, r1
 8001306:	3801      	subs	r0, #1
 8001308:	e000      	b.n	800130c <__ledf2+0x74>
 800130a:	2002      	movs	r0, #2
 800130c:	bcc0      	pop	{r6, r7}
 800130e:	46b9      	mov	r9, r7
 8001310:	46b0      	mov	r8, r6
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	2800      	cmp	r0, #0
 8001316:	d1f9      	bne.n	800130c <__ledf2+0x74>
 8001318:	2001      	movs	r0, #1
 800131a:	4240      	negs	r0, r0
 800131c:	e7f6      	b.n	800130c <__ledf2+0x74>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ec      	bne.n	80012fc <__ledf2+0x64>
 8001322:	464c      	mov	r4, r9
 8001324:	4326      	orrs	r6, r4
 8001326:	d1e9      	bne.n	80012fc <__ledf2+0x64>
 8001328:	e7ea      	b.n	8001300 <__ledf2+0x68>
 800132a:	429a      	cmp	r2, r3
 800132c:	dd04      	ble.n	8001338 <__ledf2+0xa0>
 800132e:	4243      	negs	r3, r0
 8001330:	4158      	adcs	r0, r3
 8001332:	0040      	lsls	r0, r0, #1
 8001334:	3801      	subs	r0, #1
 8001336:	e7e9      	b.n	800130c <__ledf2+0x74>
 8001338:	429a      	cmp	r2, r3
 800133a:	dbeb      	blt.n	8001314 <__ledf2+0x7c>
 800133c:	454f      	cmp	r7, r9
 800133e:	d8df      	bhi.n	8001300 <__ledf2+0x68>
 8001340:	d006      	beq.n	8001350 <__ledf2+0xb8>
 8001342:	2000      	movs	r0, #0
 8001344:	454f      	cmp	r7, r9
 8001346:	d2e1      	bcs.n	800130c <__ledf2+0x74>
 8001348:	2900      	cmp	r1, #0
 800134a:	d0e5      	beq.n	8001318 <__ledf2+0x80>
 800134c:	0008      	movs	r0, r1
 800134e:	e7dd      	b.n	800130c <__ledf2+0x74>
 8001350:	45c4      	cmp	ip, r8
 8001352:	d8d5      	bhi.n	8001300 <__ledf2+0x68>
 8001354:	2000      	movs	r0, #0
 8001356:	45c4      	cmp	ip, r8
 8001358:	d2d8      	bcs.n	800130c <__ledf2+0x74>
 800135a:	e7f5      	b.n	8001348 <__ledf2+0xb0>
 800135c:	000007ff 	.word	0x000007ff

08001360 <__aeabi_dmul>:
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	4645      	mov	r5, r8
 8001364:	46de      	mov	lr, fp
 8001366:	4657      	mov	r7, sl
 8001368:	464e      	mov	r6, r9
 800136a:	b5e0      	push	{r5, r6, r7, lr}
 800136c:	001f      	movs	r7, r3
 800136e:	030b      	lsls	r3, r1, #12
 8001370:	0b1b      	lsrs	r3, r3, #12
 8001372:	469b      	mov	fp, r3
 8001374:	004d      	lsls	r5, r1, #1
 8001376:	0fcb      	lsrs	r3, r1, #31
 8001378:	0004      	movs	r4, r0
 800137a:	4691      	mov	r9, r2
 800137c:	4698      	mov	r8, r3
 800137e:	b087      	sub	sp, #28
 8001380:	0d6d      	lsrs	r5, r5, #21
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x26>
 8001384:	e1cd      	b.n	8001722 <__aeabi_dmul+0x3c2>
 8001386:	4bce      	ldr	r3, [pc, #824]	; (80016c0 <__aeabi_dmul+0x360>)
 8001388:	429d      	cmp	r5, r3
 800138a:	d100      	bne.n	800138e <__aeabi_dmul+0x2e>
 800138c:	e1e9      	b.n	8001762 <__aeabi_dmul+0x402>
 800138e:	465a      	mov	r2, fp
 8001390:	0f43      	lsrs	r3, r0, #29
 8001392:	00d2      	lsls	r2, r2, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0412      	lsls	r2, r2, #16
 800139a:	431a      	orrs	r2, r3
 800139c:	00c3      	lsls	r3, r0, #3
 800139e:	469a      	mov	sl, r3
 80013a0:	4bc8      	ldr	r3, [pc, #800]	; (80016c4 <__aeabi_dmul+0x364>)
 80013a2:	4693      	mov	fp, r2
 80013a4:	469c      	mov	ip, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	2600      	movs	r6, #0
 80013aa:	4465      	add	r5, ip
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	033c      	lsls	r4, r7, #12
 80013b0:	007b      	lsls	r3, r7, #1
 80013b2:	4648      	mov	r0, r9
 80013b4:	0b24      	lsrs	r4, r4, #12
 80013b6:	0d5b      	lsrs	r3, r3, #21
 80013b8:	0fff      	lsrs	r7, r7, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dmul+0x60>
 80013be:	e189      	b.n	80016d4 <__aeabi_dmul+0x374>
 80013c0:	4abf      	ldr	r2, [pc, #764]	; (80016c0 <__aeabi_dmul+0x360>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <__aeabi_dmul+0x9a>
 80013c6:	0f42      	lsrs	r2, r0, #29
 80013c8:	00e4      	lsls	r4, r4, #3
 80013ca:	4322      	orrs	r2, r4
 80013cc:	2480      	movs	r4, #128	; 0x80
 80013ce:	0424      	lsls	r4, r4, #16
 80013d0:	4314      	orrs	r4, r2
 80013d2:	4abc      	ldr	r2, [pc, #752]	; (80016c4 <__aeabi_dmul+0x364>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4694      	mov	ip, r2
 80013d8:	4642      	mov	r2, r8
 80013da:	4463      	add	r3, ip
 80013dc:	195b      	adds	r3, r3, r5
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	407a      	eors	r2, r7
 80013e4:	3301      	adds	r3, #1
 80013e6:	00c0      	lsls	r0, r0, #3
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2e0a      	cmp	r6, #10
 80013ee:	dd1c      	ble.n	800142a <__aeabi_dmul+0xca>
 80013f0:	003a      	movs	r2, r7
 80013f2:	2e0b      	cmp	r6, #11
 80013f4:	d05e      	beq.n	80014b4 <__aeabi_dmul+0x154>
 80013f6:	4647      	mov	r7, r8
 80013f8:	e056      	b.n	80014a8 <__aeabi_dmul+0x148>
 80013fa:	4649      	mov	r1, r9
 80013fc:	4bb0      	ldr	r3, [pc, #704]	; (80016c0 <__aeabi_dmul+0x360>)
 80013fe:	4321      	orrs	r1, r4
 8001400:	18eb      	adds	r3, r5, r3
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	2900      	cmp	r1, #0
 8001406:	d12a      	bne.n	800145e <__aeabi_dmul+0xfe>
 8001408:	2080      	movs	r0, #128	; 0x80
 800140a:	2202      	movs	r2, #2
 800140c:	0100      	lsls	r0, r0, #4
 800140e:	002b      	movs	r3, r5
 8001410:	4684      	mov	ip, r0
 8001412:	4316      	orrs	r6, r2
 8001414:	4642      	mov	r2, r8
 8001416:	4463      	add	r3, ip
 8001418:	407a      	eors	r2, r7
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2e0a      	cmp	r6, #10
 8001420:	dd00      	ble.n	8001424 <__aeabi_dmul+0xc4>
 8001422:	e231      	b.n	8001888 <__aeabi_dmul+0x528>
 8001424:	2000      	movs	r0, #0
 8001426:	2400      	movs	r4, #0
 8001428:	2102      	movs	r1, #2
 800142a:	2e02      	cmp	r6, #2
 800142c:	dc26      	bgt.n	800147c <__aeabi_dmul+0x11c>
 800142e:	3e01      	subs	r6, #1
 8001430:	2e01      	cmp	r6, #1
 8001432:	d852      	bhi.n	80014da <__aeabi_dmul+0x17a>
 8001434:	2902      	cmp	r1, #2
 8001436:	d04c      	beq.n	80014d2 <__aeabi_dmul+0x172>
 8001438:	2901      	cmp	r1, #1
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0xde>
 800143c:	e118      	b.n	8001670 <__aeabi_dmul+0x310>
 800143e:	2300      	movs	r3, #0
 8001440:	2400      	movs	r4, #0
 8001442:	2500      	movs	r5, #0
 8001444:	051b      	lsls	r3, r3, #20
 8001446:	4323      	orrs	r3, r4
 8001448:	07d2      	lsls	r2, r2, #31
 800144a:	4313      	orrs	r3, r2
 800144c:	0028      	movs	r0, r5
 800144e:	0019      	movs	r1, r3
 8001450:	b007      	add	sp, #28
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	2203      	movs	r2, #3
 8001462:	0109      	lsls	r1, r1, #4
 8001464:	002b      	movs	r3, r5
 8001466:	468c      	mov	ip, r1
 8001468:	4316      	orrs	r6, r2
 800146a:	4642      	mov	r2, r8
 800146c:	4463      	add	r3, ip
 800146e:	407a      	eors	r2, r7
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2e0a      	cmp	r6, #10
 8001476:	dd00      	ble.n	800147a <__aeabi_dmul+0x11a>
 8001478:	e228      	b.n	80018cc <__aeabi_dmul+0x56c>
 800147a:	2103      	movs	r1, #3
 800147c:	2501      	movs	r5, #1
 800147e:	40b5      	lsls	r5, r6
 8001480:	46ac      	mov	ip, r5
 8001482:	26a6      	movs	r6, #166	; 0xa6
 8001484:	4663      	mov	r3, ip
 8001486:	00f6      	lsls	r6, r6, #3
 8001488:	4035      	ands	r5, r6
 800148a:	4233      	tst	r3, r6
 800148c:	d10b      	bne.n	80014a6 <__aeabi_dmul+0x146>
 800148e:	2690      	movs	r6, #144	; 0x90
 8001490:	00b6      	lsls	r6, r6, #2
 8001492:	4233      	tst	r3, r6
 8001494:	d118      	bne.n	80014c8 <__aeabi_dmul+0x168>
 8001496:	3eb9      	subs	r6, #185	; 0xb9
 8001498:	3eff      	subs	r6, #255	; 0xff
 800149a:	421e      	tst	r6, r3
 800149c:	d01d      	beq.n	80014da <__aeabi_dmul+0x17a>
 800149e:	46a3      	mov	fp, r4
 80014a0:	4682      	mov	sl, r0
 80014a2:	9100      	str	r1, [sp, #0]
 80014a4:	e000      	b.n	80014a8 <__aeabi_dmul+0x148>
 80014a6:	0017      	movs	r7, r2
 80014a8:	9900      	ldr	r1, [sp, #0]
 80014aa:	003a      	movs	r2, r7
 80014ac:	2902      	cmp	r1, #2
 80014ae:	d010      	beq.n	80014d2 <__aeabi_dmul+0x172>
 80014b0:	465c      	mov	r4, fp
 80014b2:	4650      	mov	r0, sl
 80014b4:	2903      	cmp	r1, #3
 80014b6:	d1bf      	bne.n	8001438 <__aeabi_dmul+0xd8>
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	431c      	orrs	r4, r3
 80014be:	0324      	lsls	r4, r4, #12
 80014c0:	0005      	movs	r5, r0
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <__aeabi_dmul+0x360>)
 80014c4:	0b24      	lsrs	r4, r4, #12
 80014c6:	e7bd      	b.n	8001444 <__aeabi_dmul+0xe4>
 80014c8:	2480      	movs	r4, #128	; 0x80
 80014ca:	2200      	movs	r2, #0
 80014cc:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <__aeabi_dmul+0x360>)
 80014ce:	0324      	lsls	r4, r4, #12
 80014d0:	e7b8      	b.n	8001444 <__aeabi_dmul+0xe4>
 80014d2:	2400      	movs	r4, #0
 80014d4:	2500      	movs	r5, #0
 80014d6:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <__aeabi_dmul+0x360>)
 80014d8:	e7b4      	b.n	8001444 <__aeabi_dmul+0xe4>
 80014da:	4653      	mov	r3, sl
 80014dc:	041e      	lsls	r6, r3, #16
 80014de:	0c36      	lsrs	r6, r6, #16
 80014e0:	0c1f      	lsrs	r7, r3, #16
 80014e2:	0033      	movs	r3, r6
 80014e4:	0c01      	lsrs	r1, r0, #16
 80014e6:	0400      	lsls	r0, r0, #16
 80014e8:	0c00      	lsrs	r0, r0, #16
 80014ea:	4343      	muls	r3, r0
 80014ec:	4698      	mov	r8, r3
 80014ee:	0003      	movs	r3, r0
 80014f0:	437b      	muls	r3, r7
 80014f2:	4699      	mov	r9, r3
 80014f4:	0033      	movs	r3, r6
 80014f6:	434b      	muls	r3, r1
 80014f8:	469c      	mov	ip, r3
 80014fa:	4643      	mov	r3, r8
 80014fc:	000d      	movs	r5, r1
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	469a      	mov	sl, r3
 8001502:	437d      	muls	r5, r7
 8001504:	44cc      	add	ip, r9
 8001506:	44d4      	add	ip, sl
 8001508:	9500      	str	r5, [sp, #0]
 800150a:	45e1      	cmp	r9, ip
 800150c:	d904      	bls.n	8001518 <__aeabi_dmul+0x1b8>
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	4699      	mov	r9, r3
 8001514:	444d      	add	r5, r9
 8001516:	9500      	str	r5, [sp, #0]
 8001518:	4663      	mov	r3, ip
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	001d      	movs	r5, r3
 800151e:	4663      	mov	r3, ip
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	469c      	mov	ip, r3
 8001524:	4643      	mov	r3, r8
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	4698      	mov	r8, r3
 800152c:	4663      	mov	r3, ip
 800152e:	4443      	add	r3, r8
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	0c23      	lsrs	r3, r4, #16
 8001534:	4698      	mov	r8, r3
 8001536:	0033      	movs	r3, r6
 8001538:	0424      	lsls	r4, r4, #16
 800153a:	0c24      	lsrs	r4, r4, #16
 800153c:	4363      	muls	r3, r4
 800153e:	469c      	mov	ip, r3
 8001540:	0023      	movs	r3, r4
 8001542:	437b      	muls	r3, r7
 8001544:	4699      	mov	r9, r3
 8001546:	4643      	mov	r3, r8
 8001548:	435e      	muls	r6, r3
 800154a:	435f      	muls	r7, r3
 800154c:	444e      	add	r6, r9
 800154e:	4663      	mov	r3, ip
 8001550:	46b2      	mov	sl, r6
 8001552:	0c1e      	lsrs	r6, r3, #16
 8001554:	4456      	add	r6, sl
 8001556:	45b1      	cmp	r9, r6
 8001558:	d903      	bls.n	8001562 <__aeabi_dmul+0x202>
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	4699      	mov	r9, r3
 8001560:	444f      	add	r7, r9
 8001562:	0c33      	lsrs	r3, r6, #16
 8001564:	4699      	mov	r9, r3
 8001566:	003b      	movs	r3, r7
 8001568:	444b      	add	r3, r9
 800156a:	9305      	str	r3, [sp, #20]
 800156c:	4663      	mov	r3, ip
 800156e:	46ac      	mov	ip, r5
 8001570:	041f      	lsls	r7, r3, #16
 8001572:	0c3f      	lsrs	r7, r7, #16
 8001574:	0436      	lsls	r6, r6, #16
 8001576:	19f6      	adds	r6, r6, r7
 8001578:	44b4      	add	ip, r6
 800157a:	4663      	mov	r3, ip
 800157c:	9304      	str	r3, [sp, #16]
 800157e:	465b      	mov	r3, fp
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	469c      	mov	ip, r3
 8001584:	465b      	mov	r3, fp
 8001586:	041f      	lsls	r7, r3, #16
 8001588:	0c3f      	lsrs	r7, r7, #16
 800158a:	003b      	movs	r3, r7
 800158c:	4343      	muls	r3, r0
 800158e:	4699      	mov	r9, r3
 8001590:	4663      	mov	r3, ip
 8001592:	4343      	muls	r3, r0
 8001594:	469a      	mov	sl, r3
 8001596:	464b      	mov	r3, r9
 8001598:	4660      	mov	r0, ip
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	469b      	mov	fp, r3
 800159e:	4348      	muls	r0, r1
 80015a0:	4379      	muls	r1, r7
 80015a2:	4451      	add	r1, sl
 80015a4:	4459      	add	r1, fp
 80015a6:	458a      	cmp	sl, r1
 80015a8:	d903      	bls.n	80015b2 <__aeabi_dmul+0x252>
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	469a      	mov	sl, r3
 80015b0:	4450      	add	r0, sl
 80015b2:	0c0b      	lsrs	r3, r1, #16
 80015b4:	469a      	mov	sl, r3
 80015b6:	464b      	mov	r3, r9
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	4699      	mov	r9, r3
 80015be:	003b      	movs	r3, r7
 80015c0:	4363      	muls	r3, r4
 80015c2:	0409      	lsls	r1, r1, #16
 80015c4:	4645      	mov	r5, r8
 80015c6:	4449      	add	r1, r9
 80015c8:	4699      	mov	r9, r3
 80015ca:	4663      	mov	r3, ip
 80015cc:	435c      	muls	r4, r3
 80015ce:	436b      	muls	r3, r5
 80015d0:	469c      	mov	ip, r3
 80015d2:	464b      	mov	r3, r9
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	4698      	mov	r8, r3
 80015d8:	436f      	muls	r7, r5
 80015da:	193f      	adds	r7, r7, r4
 80015dc:	4447      	add	r7, r8
 80015de:	4450      	add	r0, sl
 80015e0:	42bc      	cmp	r4, r7
 80015e2:	d903      	bls.n	80015ec <__aeabi_dmul+0x28c>
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4698      	mov	r8, r3
 80015ea:	44c4      	add	ip, r8
 80015ec:	9b04      	ldr	r3, [sp, #16]
 80015ee:	9d00      	ldr	r5, [sp, #0]
 80015f0:	4698      	mov	r8, r3
 80015f2:	4445      	add	r5, r8
 80015f4:	42b5      	cmp	r5, r6
 80015f6:	41b6      	sbcs	r6, r6
 80015f8:	4273      	negs	r3, r6
 80015fa:	4698      	mov	r8, r3
 80015fc:	464b      	mov	r3, r9
 80015fe:	041e      	lsls	r6, r3, #16
 8001600:	9b05      	ldr	r3, [sp, #20]
 8001602:	043c      	lsls	r4, r7, #16
 8001604:	4699      	mov	r9, r3
 8001606:	0c36      	lsrs	r6, r6, #16
 8001608:	19a4      	adds	r4, r4, r6
 800160a:	444c      	add	r4, r9
 800160c:	46a1      	mov	r9, r4
 800160e:	4683      	mov	fp, r0
 8001610:	186e      	adds	r6, r5, r1
 8001612:	44c1      	add	r9, r8
 8001614:	428e      	cmp	r6, r1
 8001616:	4189      	sbcs	r1, r1
 8001618:	44cb      	add	fp, r9
 800161a:	465d      	mov	r5, fp
 800161c:	4249      	negs	r1, r1
 800161e:	186d      	adds	r5, r5, r1
 8001620:	429c      	cmp	r4, r3
 8001622:	41a4      	sbcs	r4, r4
 8001624:	45c1      	cmp	r9, r8
 8001626:	419b      	sbcs	r3, r3
 8001628:	4583      	cmp	fp, r0
 800162a:	4180      	sbcs	r0, r0
 800162c:	428d      	cmp	r5, r1
 800162e:	4189      	sbcs	r1, r1
 8001630:	425b      	negs	r3, r3
 8001632:	4264      	negs	r4, r4
 8001634:	431c      	orrs	r4, r3
 8001636:	4240      	negs	r0, r0
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	4249      	negs	r1, r1
 800163c:	4301      	orrs	r1, r0
 800163e:	0270      	lsls	r0, r6, #9
 8001640:	0c3f      	lsrs	r7, r7, #16
 8001642:	4318      	orrs	r0, r3
 8001644:	19e4      	adds	r4, r4, r7
 8001646:	1e47      	subs	r7, r0, #1
 8001648:	41b8      	sbcs	r0, r7
 800164a:	1864      	adds	r4, r4, r1
 800164c:	4464      	add	r4, ip
 800164e:	0df6      	lsrs	r6, r6, #23
 8001650:	0261      	lsls	r1, r4, #9
 8001652:	4330      	orrs	r0, r6
 8001654:	0dec      	lsrs	r4, r5, #23
 8001656:	026e      	lsls	r6, r5, #9
 8001658:	430c      	orrs	r4, r1
 800165a:	4330      	orrs	r0, r6
 800165c:	01c9      	lsls	r1, r1, #7
 800165e:	d400      	bmi.n	8001662 <__aeabi_dmul+0x302>
 8001660:	e0f1      	b.n	8001846 <__aeabi_dmul+0x4e6>
 8001662:	2101      	movs	r1, #1
 8001664:	0843      	lsrs	r3, r0, #1
 8001666:	4001      	ands	r1, r0
 8001668:	430b      	orrs	r3, r1
 800166a:	07e0      	lsls	r0, r4, #31
 800166c:	4318      	orrs	r0, r3
 800166e:	0864      	lsrs	r4, r4, #1
 8001670:	4915      	ldr	r1, [pc, #84]	; (80016c8 <__aeabi_dmul+0x368>)
 8001672:	9b02      	ldr	r3, [sp, #8]
 8001674:	468c      	mov	ip, r1
 8001676:	4463      	add	r3, ip
 8001678:	2b00      	cmp	r3, #0
 800167a:	dc00      	bgt.n	800167e <__aeabi_dmul+0x31e>
 800167c:	e097      	b.n	80017ae <__aeabi_dmul+0x44e>
 800167e:	0741      	lsls	r1, r0, #29
 8001680:	d009      	beq.n	8001696 <__aeabi_dmul+0x336>
 8001682:	210f      	movs	r1, #15
 8001684:	4001      	ands	r1, r0
 8001686:	2904      	cmp	r1, #4
 8001688:	d005      	beq.n	8001696 <__aeabi_dmul+0x336>
 800168a:	1d01      	adds	r1, r0, #4
 800168c:	4281      	cmp	r1, r0
 800168e:	4180      	sbcs	r0, r0
 8001690:	4240      	negs	r0, r0
 8001692:	1824      	adds	r4, r4, r0
 8001694:	0008      	movs	r0, r1
 8001696:	01e1      	lsls	r1, r4, #7
 8001698:	d506      	bpl.n	80016a8 <__aeabi_dmul+0x348>
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	00c9      	lsls	r1, r1, #3
 800169e:	468c      	mov	ip, r1
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <__aeabi_dmul+0x36c>)
 80016a2:	401c      	ands	r4, r3
 80016a4:	9b02      	ldr	r3, [sp, #8]
 80016a6:	4463      	add	r3, ip
 80016a8:	4909      	ldr	r1, [pc, #36]	; (80016d0 <__aeabi_dmul+0x370>)
 80016aa:	428b      	cmp	r3, r1
 80016ac:	dd00      	ble.n	80016b0 <__aeabi_dmul+0x350>
 80016ae:	e710      	b.n	80014d2 <__aeabi_dmul+0x172>
 80016b0:	0761      	lsls	r1, r4, #29
 80016b2:	08c5      	lsrs	r5, r0, #3
 80016b4:	0264      	lsls	r4, r4, #9
 80016b6:	055b      	lsls	r3, r3, #21
 80016b8:	430d      	orrs	r5, r1
 80016ba:	0b24      	lsrs	r4, r4, #12
 80016bc:	0d5b      	lsrs	r3, r3, #21
 80016be:	e6c1      	b.n	8001444 <__aeabi_dmul+0xe4>
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	fffffc01 	.word	0xfffffc01
 80016c8:	000003ff 	.word	0x000003ff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	000007fe 	.word	0x000007fe
 80016d4:	464b      	mov	r3, r9
 80016d6:	4323      	orrs	r3, r4
 80016d8:	d059      	beq.n	800178e <__aeabi_dmul+0x42e>
 80016da:	2c00      	cmp	r4, #0
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0x380>
 80016de:	e0a3      	b.n	8001828 <__aeabi_dmul+0x4c8>
 80016e0:	0020      	movs	r0, r4
 80016e2:	f000 fd2f 	bl	8002144 <__clzsi2>
 80016e6:	0001      	movs	r1, r0
 80016e8:	0003      	movs	r3, r0
 80016ea:	390b      	subs	r1, #11
 80016ec:	221d      	movs	r2, #29
 80016ee:	1a52      	subs	r2, r2, r1
 80016f0:	4649      	mov	r1, r9
 80016f2:	0018      	movs	r0, r3
 80016f4:	40d1      	lsrs	r1, r2
 80016f6:	464a      	mov	r2, r9
 80016f8:	3808      	subs	r0, #8
 80016fa:	4082      	lsls	r2, r0
 80016fc:	4084      	lsls	r4, r0
 80016fe:	0010      	movs	r0, r2
 8001700:	430c      	orrs	r4, r1
 8001702:	4a74      	ldr	r2, [pc, #464]	; (80018d4 <__aeabi_dmul+0x574>)
 8001704:	1aeb      	subs	r3, r5, r3
 8001706:	4694      	mov	ip, r2
 8001708:	4642      	mov	r2, r8
 800170a:	4463      	add	r3, ip
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	9b01      	ldr	r3, [sp, #4]
 8001710:	407a      	eors	r2, r7
 8001712:	3301      	adds	r3, #1
 8001714:	2100      	movs	r1, #0
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	2e0a      	cmp	r6, #10
 800171c:	dd00      	ble.n	8001720 <__aeabi_dmul+0x3c0>
 800171e:	e667      	b.n	80013f0 <__aeabi_dmul+0x90>
 8001720:	e683      	b.n	800142a <__aeabi_dmul+0xca>
 8001722:	465b      	mov	r3, fp
 8001724:	4303      	orrs	r3, r0
 8001726:	469a      	mov	sl, r3
 8001728:	d02a      	beq.n	8001780 <__aeabi_dmul+0x420>
 800172a:	465b      	mov	r3, fp
 800172c:	2b00      	cmp	r3, #0
 800172e:	d06d      	beq.n	800180c <__aeabi_dmul+0x4ac>
 8001730:	4658      	mov	r0, fp
 8001732:	f000 fd07 	bl	8002144 <__clzsi2>
 8001736:	0001      	movs	r1, r0
 8001738:	0003      	movs	r3, r0
 800173a:	390b      	subs	r1, #11
 800173c:	221d      	movs	r2, #29
 800173e:	1a52      	subs	r2, r2, r1
 8001740:	0021      	movs	r1, r4
 8001742:	0018      	movs	r0, r3
 8001744:	465d      	mov	r5, fp
 8001746:	40d1      	lsrs	r1, r2
 8001748:	3808      	subs	r0, #8
 800174a:	4085      	lsls	r5, r0
 800174c:	000a      	movs	r2, r1
 800174e:	4084      	lsls	r4, r0
 8001750:	432a      	orrs	r2, r5
 8001752:	4693      	mov	fp, r2
 8001754:	46a2      	mov	sl, r4
 8001756:	4d5f      	ldr	r5, [pc, #380]	; (80018d4 <__aeabi_dmul+0x574>)
 8001758:	2600      	movs	r6, #0
 800175a:	1aed      	subs	r5, r5, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	e625      	b.n	80013ae <__aeabi_dmul+0x4e>
 8001762:	465b      	mov	r3, fp
 8001764:	4303      	orrs	r3, r0
 8001766:	469a      	mov	sl, r3
 8001768:	d105      	bne.n	8001776 <__aeabi_dmul+0x416>
 800176a:	2300      	movs	r3, #0
 800176c:	469b      	mov	fp, r3
 800176e:	3302      	adds	r3, #2
 8001770:	2608      	movs	r6, #8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	e61b      	b.n	80013ae <__aeabi_dmul+0x4e>
 8001776:	2303      	movs	r3, #3
 8001778:	4682      	mov	sl, r0
 800177a:	260c      	movs	r6, #12
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	e616      	b.n	80013ae <__aeabi_dmul+0x4e>
 8001780:	2300      	movs	r3, #0
 8001782:	469b      	mov	fp, r3
 8001784:	3301      	adds	r3, #1
 8001786:	2604      	movs	r6, #4
 8001788:	2500      	movs	r5, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	e60f      	b.n	80013ae <__aeabi_dmul+0x4e>
 800178e:	4642      	mov	r2, r8
 8001790:	3301      	adds	r3, #1
 8001792:	9501      	str	r5, [sp, #4]
 8001794:	431e      	orrs	r6, r3
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	407a      	eors	r2, r7
 800179a:	3301      	adds	r3, #1
 800179c:	2400      	movs	r4, #0
 800179e:	2000      	movs	r0, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2e0a      	cmp	r6, #10
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dmul+0x44c>
 80017aa:	e621      	b.n	80013f0 <__aeabi_dmul+0x90>
 80017ac:	e63d      	b.n	800142a <__aeabi_dmul+0xca>
 80017ae:	2101      	movs	r1, #1
 80017b0:	1ac9      	subs	r1, r1, r3
 80017b2:	2938      	cmp	r1, #56	; 0x38
 80017b4:	dd00      	ble.n	80017b8 <__aeabi_dmul+0x458>
 80017b6:	e642      	b.n	800143e <__aeabi_dmul+0xde>
 80017b8:	291f      	cmp	r1, #31
 80017ba:	dd47      	ble.n	800184c <__aeabi_dmul+0x4ec>
 80017bc:	261f      	movs	r6, #31
 80017be:	0025      	movs	r5, r4
 80017c0:	4276      	negs	r6, r6
 80017c2:	1af3      	subs	r3, r6, r3
 80017c4:	40dd      	lsrs	r5, r3
 80017c6:	002b      	movs	r3, r5
 80017c8:	2920      	cmp	r1, #32
 80017ca:	d005      	beq.n	80017d8 <__aeabi_dmul+0x478>
 80017cc:	4942      	ldr	r1, [pc, #264]	; (80018d8 <__aeabi_dmul+0x578>)
 80017ce:	9d02      	ldr	r5, [sp, #8]
 80017d0:	468c      	mov	ip, r1
 80017d2:	4465      	add	r5, ip
 80017d4:	40ac      	lsls	r4, r5
 80017d6:	4320      	orrs	r0, r4
 80017d8:	1e41      	subs	r1, r0, #1
 80017da:	4188      	sbcs	r0, r1
 80017dc:	4318      	orrs	r0, r3
 80017de:	2307      	movs	r3, #7
 80017e0:	001d      	movs	r5, r3
 80017e2:	2400      	movs	r4, #0
 80017e4:	4005      	ands	r5, r0
 80017e6:	4203      	tst	r3, r0
 80017e8:	d04a      	beq.n	8001880 <__aeabi_dmul+0x520>
 80017ea:	230f      	movs	r3, #15
 80017ec:	2400      	movs	r4, #0
 80017ee:	4003      	ands	r3, r0
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d042      	beq.n	800187a <__aeabi_dmul+0x51a>
 80017f4:	1d03      	adds	r3, r0, #4
 80017f6:	4283      	cmp	r3, r0
 80017f8:	4180      	sbcs	r0, r0
 80017fa:	4240      	negs	r0, r0
 80017fc:	1824      	adds	r4, r4, r0
 80017fe:	0018      	movs	r0, r3
 8001800:	0223      	lsls	r3, r4, #8
 8001802:	d53a      	bpl.n	800187a <__aeabi_dmul+0x51a>
 8001804:	2301      	movs	r3, #1
 8001806:	2400      	movs	r4, #0
 8001808:	2500      	movs	r5, #0
 800180a:	e61b      	b.n	8001444 <__aeabi_dmul+0xe4>
 800180c:	f000 fc9a 	bl	8002144 <__clzsi2>
 8001810:	0001      	movs	r1, r0
 8001812:	0003      	movs	r3, r0
 8001814:	3115      	adds	r1, #21
 8001816:	3320      	adds	r3, #32
 8001818:	291c      	cmp	r1, #28
 800181a:	dd8f      	ble.n	800173c <__aeabi_dmul+0x3dc>
 800181c:	3808      	subs	r0, #8
 800181e:	2200      	movs	r2, #0
 8001820:	4084      	lsls	r4, r0
 8001822:	4692      	mov	sl, r2
 8001824:	46a3      	mov	fp, r4
 8001826:	e796      	b.n	8001756 <__aeabi_dmul+0x3f6>
 8001828:	f000 fc8c 	bl	8002144 <__clzsi2>
 800182c:	0001      	movs	r1, r0
 800182e:	0003      	movs	r3, r0
 8001830:	3115      	adds	r1, #21
 8001832:	3320      	adds	r3, #32
 8001834:	291c      	cmp	r1, #28
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x4da>
 8001838:	e758      	b.n	80016ec <__aeabi_dmul+0x38c>
 800183a:	0002      	movs	r2, r0
 800183c:	464c      	mov	r4, r9
 800183e:	3a08      	subs	r2, #8
 8001840:	2000      	movs	r0, #0
 8001842:	4094      	lsls	r4, r2
 8001844:	e75d      	b.n	8001702 <__aeabi_dmul+0x3a2>
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	e711      	b.n	8001670 <__aeabi_dmul+0x310>
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <__aeabi_dmul+0x57c>)
 800184e:	0026      	movs	r6, r4
 8001850:	469c      	mov	ip, r3
 8001852:	0003      	movs	r3, r0
 8001854:	9d02      	ldr	r5, [sp, #8]
 8001856:	40cb      	lsrs	r3, r1
 8001858:	4465      	add	r5, ip
 800185a:	40ae      	lsls	r6, r5
 800185c:	431e      	orrs	r6, r3
 800185e:	0003      	movs	r3, r0
 8001860:	40ab      	lsls	r3, r5
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	4183      	sbcs	r3, r0
 8001866:	0030      	movs	r0, r6
 8001868:	4318      	orrs	r0, r3
 800186a:	40cc      	lsrs	r4, r1
 800186c:	0743      	lsls	r3, r0, #29
 800186e:	d0c7      	beq.n	8001800 <__aeabi_dmul+0x4a0>
 8001870:	230f      	movs	r3, #15
 8001872:	4003      	ands	r3, r0
 8001874:	2b04      	cmp	r3, #4
 8001876:	d1bd      	bne.n	80017f4 <__aeabi_dmul+0x494>
 8001878:	e7c2      	b.n	8001800 <__aeabi_dmul+0x4a0>
 800187a:	0765      	lsls	r5, r4, #29
 800187c:	0264      	lsls	r4, r4, #9
 800187e:	0b24      	lsrs	r4, r4, #12
 8001880:	08c0      	lsrs	r0, r0, #3
 8001882:	2300      	movs	r3, #0
 8001884:	4305      	orrs	r5, r0
 8001886:	e5dd      	b.n	8001444 <__aeabi_dmul+0xe4>
 8001888:	2500      	movs	r5, #0
 800188a:	2302      	movs	r3, #2
 800188c:	2e0f      	cmp	r6, #15
 800188e:	d10c      	bne.n	80018aa <__aeabi_dmul+0x54a>
 8001890:	2480      	movs	r4, #128	; 0x80
 8001892:	465b      	mov	r3, fp
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	4223      	tst	r3, r4
 8001898:	d00e      	beq.n	80018b8 <__aeabi_dmul+0x558>
 800189a:	4221      	tst	r1, r4
 800189c:	d10c      	bne.n	80018b8 <__aeabi_dmul+0x558>
 800189e:	430c      	orrs	r4, r1
 80018a0:	0324      	lsls	r4, r4, #12
 80018a2:	003a      	movs	r2, r7
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <__aeabi_dmul+0x580>)
 80018a6:	0b24      	lsrs	r4, r4, #12
 80018a8:	e5cc      	b.n	8001444 <__aeabi_dmul+0xe4>
 80018aa:	2e0b      	cmp	r6, #11
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dmul+0x550>
 80018ae:	e5a2      	b.n	80013f6 <__aeabi_dmul+0x96>
 80018b0:	468b      	mov	fp, r1
 80018b2:	46aa      	mov	sl, r5
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	e5f7      	b.n	80014a8 <__aeabi_dmul+0x148>
 80018b8:	2480      	movs	r4, #128	; 0x80
 80018ba:	465b      	mov	r3, fp
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	4642      	mov	r2, r8
 80018c4:	4655      	mov	r5, sl
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <__aeabi_dmul+0x580>)
 80018c8:	0b24      	lsrs	r4, r4, #12
 80018ca:	e5bb      	b.n	8001444 <__aeabi_dmul+0xe4>
 80018cc:	464d      	mov	r5, r9
 80018ce:	0021      	movs	r1, r4
 80018d0:	2303      	movs	r3, #3
 80018d2:	e7db      	b.n	800188c <__aeabi_dmul+0x52c>
 80018d4:	fffffc0d 	.word	0xfffffc0d
 80018d8:	0000043e 	.word	0x0000043e
 80018dc:	0000041e 	.word	0x0000041e
 80018e0:	000007ff 	.word	0x000007ff

080018e4 <__aeabi_dsub>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	4657      	mov	r7, sl
 80018e8:	464e      	mov	r6, r9
 80018ea:	4645      	mov	r5, r8
 80018ec:	46de      	mov	lr, fp
 80018ee:	b5e0      	push	{r5, r6, r7, lr}
 80018f0:	000d      	movs	r5, r1
 80018f2:	0004      	movs	r4, r0
 80018f4:	0019      	movs	r1, r3
 80018f6:	0010      	movs	r0, r2
 80018f8:	032b      	lsls	r3, r5, #12
 80018fa:	0a5b      	lsrs	r3, r3, #9
 80018fc:	0f62      	lsrs	r2, r4, #29
 80018fe:	431a      	orrs	r2, r3
 8001900:	00e3      	lsls	r3, r4, #3
 8001902:	030c      	lsls	r4, r1, #12
 8001904:	0a64      	lsrs	r4, r4, #9
 8001906:	0f47      	lsrs	r7, r0, #29
 8001908:	4327      	orrs	r7, r4
 800190a:	4cd0      	ldr	r4, [pc, #832]	; (8001c4c <__aeabi_dsub+0x368>)
 800190c:	006e      	lsls	r6, r5, #1
 800190e:	4691      	mov	r9, r2
 8001910:	b083      	sub	sp, #12
 8001912:	004a      	lsls	r2, r1, #1
 8001914:	00c0      	lsls	r0, r0, #3
 8001916:	4698      	mov	r8, r3
 8001918:	46a2      	mov	sl, r4
 800191a:	0d76      	lsrs	r6, r6, #21
 800191c:	0fed      	lsrs	r5, r5, #31
 800191e:	0d52      	lsrs	r2, r2, #21
 8001920:	0fc9      	lsrs	r1, r1, #31
 8001922:	9001      	str	r0, [sp, #4]
 8001924:	42a2      	cmp	r2, r4
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x46>
 8001928:	e0b9      	b.n	8001a9e <__aeabi_dsub+0x1ba>
 800192a:	2401      	movs	r4, #1
 800192c:	4061      	eors	r1, r4
 800192e:	468b      	mov	fp, r1
 8001930:	428d      	cmp	r5, r1
 8001932:	d100      	bne.n	8001936 <__aeabi_dsub+0x52>
 8001934:	e08d      	b.n	8001a52 <__aeabi_dsub+0x16e>
 8001936:	1ab4      	subs	r4, r6, r2
 8001938:	46a4      	mov	ip, r4
 800193a:	2c00      	cmp	r4, #0
 800193c:	dc00      	bgt.n	8001940 <__aeabi_dsub+0x5c>
 800193e:	e0b7      	b.n	8001ab0 <__aeabi_dsub+0x1cc>
 8001940:	2a00      	cmp	r2, #0
 8001942:	d100      	bne.n	8001946 <__aeabi_dsub+0x62>
 8001944:	e0cb      	b.n	8001ade <__aeabi_dsub+0x1fa>
 8001946:	4ac1      	ldr	r2, [pc, #772]	; (8001c4c <__aeabi_dsub+0x368>)
 8001948:	4296      	cmp	r6, r2
 800194a:	d100      	bne.n	800194e <__aeabi_dsub+0x6a>
 800194c:	e186      	b.n	8001c5c <__aeabi_dsub+0x378>
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	0412      	lsls	r2, r2, #16
 8001952:	4317      	orrs	r7, r2
 8001954:	4662      	mov	r2, ip
 8001956:	2a38      	cmp	r2, #56	; 0x38
 8001958:	dd00      	ble.n	800195c <__aeabi_dsub+0x78>
 800195a:	e1a4      	b.n	8001ca6 <__aeabi_dsub+0x3c2>
 800195c:	2a1f      	cmp	r2, #31
 800195e:	dd00      	ble.n	8001962 <__aeabi_dsub+0x7e>
 8001960:	e21d      	b.n	8001d9e <__aeabi_dsub+0x4ba>
 8001962:	4661      	mov	r1, ip
 8001964:	2220      	movs	r2, #32
 8001966:	003c      	movs	r4, r7
 8001968:	1a52      	subs	r2, r2, r1
 800196a:	0001      	movs	r1, r0
 800196c:	4090      	lsls	r0, r2
 800196e:	4094      	lsls	r4, r2
 8001970:	1e42      	subs	r2, r0, #1
 8001972:	4190      	sbcs	r0, r2
 8001974:	4662      	mov	r2, ip
 8001976:	46a0      	mov	r8, r4
 8001978:	4664      	mov	r4, ip
 800197a:	40d7      	lsrs	r7, r2
 800197c:	464a      	mov	r2, r9
 800197e:	40e1      	lsrs	r1, r4
 8001980:	4644      	mov	r4, r8
 8001982:	1bd2      	subs	r2, r2, r7
 8001984:	4691      	mov	r9, r2
 8001986:	430c      	orrs	r4, r1
 8001988:	4304      	orrs	r4, r0
 800198a:	1b1c      	subs	r4, r3, r4
 800198c:	42a3      	cmp	r3, r4
 800198e:	4192      	sbcs	r2, r2
 8001990:	464b      	mov	r3, r9
 8001992:	4252      	negs	r2, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	469a      	mov	sl, r3
 8001998:	4653      	mov	r3, sl
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	d400      	bmi.n	80019a0 <__aeabi_dsub+0xbc>
 800199e:	e12b      	b.n	8001bf8 <__aeabi_dsub+0x314>
 80019a0:	4653      	mov	r3, sl
 80019a2:	025a      	lsls	r2, r3, #9
 80019a4:	0a53      	lsrs	r3, r2, #9
 80019a6:	469a      	mov	sl, r3
 80019a8:	4653      	mov	r3, sl
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0xcc>
 80019ae:	e166      	b.n	8001c7e <__aeabi_dsub+0x39a>
 80019b0:	4650      	mov	r0, sl
 80019b2:	f000 fbc7 	bl	8002144 <__clzsi2>
 80019b6:	0003      	movs	r3, r0
 80019b8:	3b08      	subs	r3, #8
 80019ba:	2220      	movs	r2, #32
 80019bc:	0020      	movs	r0, r4
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	4651      	mov	r1, sl
 80019c2:	40d0      	lsrs	r0, r2
 80019c4:	4099      	lsls	r1, r3
 80019c6:	0002      	movs	r2, r0
 80019c8:	409c      	lsls	r4, r3
 80019ca:	430a      	orrs	r2, r1
 80019cc:	429e      	cmp	r6, r3
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dsub+0xee>
 80019d0:	e164      	b.n	8001c9c <__aeabi_dsub+0x3b8>
 80019d2:	1b9b      	subs	r3, r3, r6
 80019d4:	1c59      	adds	r1, r3, #1
 80019d6:	291f      	cmp	r1, #31
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dsub+0xf8>
 80019da:	e0fe      	b.n	8001bda <__aeabi_dsub+0x2f6>
 80019dc:	2320      	movs	r3, #32
 80019de:	0010      	movs	r0, r2
 80019e0:	0026      	movs	r6, r4
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	409c      	lsls	r4, r3
 80019e6:	4098      	lsls	r0, r3
 80019e8:	40ce      	lsrs	r6, r1
 80019ea:	40ca      	lsrs	r2, r1
 80019ec:	1e63      	subs	r3, r4, #1
 80019ee:	419c      	sbcs	r4, r3
 80019f0:	4330      	orrs	r0, r6
 80019f2:	4692      	mov	sl, r2
 80019f4:	2600      	movs	r6, #0
 80019f6:	4304      	orrs	r4, r0
 80019f8:	0763      	lsls	r3, r4, #29
 80019fa:	d009      	beq.n	8001a10 <__aeabi_dsub+0x12c>
 80019fc:	230f      	movs	r3, #15
 80019fe:	4023      	ands	r3, r4
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d005      	beq.n	8001a10 <__aeabi_dsub+0x12c>
 8001a04:	1d23      	adds	r3, r4, #4
 8001a06:	42a3      	cmp	r3, r4
 8001a08:	41a4      	sbcs	r4, r4
 8001a0a:	4264      	negs	r4, r4
 8001a0c:	44a2      	add	sl, r4
 8001a0e:	001c      	movs	r4, r3
 8001a10:	4653      	mov	r3, sl
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	d400      	bmi.n	8001a18 <__aeabi_dsub+0x134>
 8001a16:	e0f2      	b.n	8001bfe <__aeabi_dsub+0x31a>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <__aeabi_dsub+0x368>)
 8001a1a:	3601      	adds	r6, #1
 8001a1c:	429e      	cmp	r6, r3
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x13e>
 8001a20:	e10f      	b.n	8001c42 <__aeabi_dsub+0x35e>
 8001a22:	4653      	mov	r3, sl
 8001a24:	498a      	ldr	r1, [pc, #552]	; (8001c50 <__aeabi_dsub+0x36c>)
 8001a26:	08e4      	lsrs	r4, r4, #3
 8001a28:	400b      	ands	r3, r1
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	0572      	lsls	r2, r6, #21
 8001a32:	024c      	lsls	r4, r1, #9
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	0d52      	lsrs	r2, r2, #21
 8001a38:	0512      	lsls	r2, r2, #20
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	07ed      	lsls	r5, r5, #31
 8001a3e:	432a      	orrs	r2, r5
 8001a40:	0018      	movs	r0, r3
 8001a42:	0011      	movs	r1, r2
 8001a44:	b003      	add	sp, #12
 8001a46:	bcf0      	pop	{r4, r5, r6, r7}
 8001a48:	46bb      	mov	fp, r7
 8001a4a:	46b2      	mov	sl, r6
 8001a4c:	46a9      	mov	r9, r5
 8001a4e:	46a0      	mov	r8, r4
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a52:	1ab4      	subs	r4, r6, r2
 8001a54:	46a4      	mov	ip, r4
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	dd59      	ble.n	8001b0e <__aeabi_dsub+0x22a>
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x17c>
 8001a5e:	e0b0      	b.n	8001bc2 <__aeabi_dsub+0x2de>
 8001a60:	4556      	cmp	r6, sl
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x182>
 8001a64:	e0fa      	b.n	8001c5c <__aeabi_dsub+0x378>
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0412      	lsls	r2, r2, #16
 8001a6a:	4317      	orrs	r7, r2
 8001a6c:	4662      	mov	r2, ip
 8001a6e:	2a38      	cmp	r2, #56	; 0x38
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dsub+0x190>
 8001a72:	e0d4      	b.n	8001c1e <__aeabi_dsub+0x33a>
 8001a74:	2a1f      	cmp	r2, #31
 8001a76:	dc00      	bgt.n	8001a7a <__aeabi_dsub+0x196>
 8001a78:	e1c0      	b.n	8001dfc <__aeabi_dsub+0x518>
 8001a7a:	0039      	movs	r1, r7
 8001a7c:	3a20      	subs	r2, #32
 8001a7e:	40d1      	lsrs	r1, r2
 8001a80:	4662      	mov	r2, ip
 8001a82:	2a20      	cmp	r2, #32
 8001a84:	d006      	beq.n	8001a94 <__aeabi_dsub+0x1b0>
 8001a86:	4664      	mov	r4, ip
 8001a88:	2240      	movs	r2, #64	; 0x40
 8001a8a:	1b12      	subs	r2, r2, r4
 8001a8c:	003c      	movs	r4, r7
 8001a8e:	4094      	lsls	r4, r2
 8001a90:	4304      	orrs	r4, r0
 8001a92:	9401      	str	r4, [sp, #4]
 8001a94:	9c01      	ldr	r4, [sp, #4]
 8001a96:	1e62      	subs	r2, r4, #1
 8001a98:	4194      	sbcs	r4, r2
 8001a9a:	430c      	orrs	r4, r1
 8001a9c:	e0c3      	b.n	8001c26 <__aeabi_dsub+0x342>
 8001a9e:	003c      	movs	r4, r7
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d02b      	beq.n	8001afc <__aeabi_dsub+0x218>
 8001aa4:	468b      	mov	fp, r1
 8001aa6:	428d      	cmp	r5, r1
 8001aa8:	d02e      	beq.n	8001b08 <__aeabi_dsub+0x224>
 8001aaa:	4c6a      	ldr	r4, [pc, #424]	; (8001c54 <__aeabi_dsub+0x370>)
 8001aac:	46a4      	mov	ip, r4
 8001aae:	44b4      	add	ip, r6
 8001ab0:	4664      	mov	r4, ip
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d05f      	beq.n	8001b76 <__aeabi_dsub+0x292>
 8001ab6:	1b94      	subs	r4, r2, r6
 8001ab8:	46a4      	mov	ip, r4
 8001aba:	2e00      	cmp	r6, #0
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dsub+0x1dc>
 8001abe:	e120      	b.n	8001d02 <__aeabi_dsub+0x41e>
 8001ac0:	464c      	mov	r4, r9
 8001ac2:	431c      	orrs	r4, r3
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x1e4>
 8001ac6:	e1c7      	b.n	8001e58 <__aeabi_dsub+0x574>
 8001ac8:	4661      	mov	r1, ip
 8001aca:	1e4c      	subs	r4, r1, #1
 8001acc:	2901      	cmp	r1, #1
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x1ee>
 8001ad0:	e223      	b.n	8001f1a <__aeabi_dsub+0x636>
 8001ad2:	4d5e      	ldr	r5, [pc, #376]	; (8001c4c <__aeabi_dsub+0x368>)
 8001ad4:	45ac      	cmp	ip, r5
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x1f6>
 8001ad8:	e1d8      	b.n	8001e8c <__aeabi_dsub+0x5a8>
 8001ada:	46a4      	mov	ip, r4
 8001adc:	e11a      	b.n	8001d14 <__aeabi_dsub+0x430>
 8001ade:	003a      	movs	r2, r7
 8001ae0:	4302      	orrs	r2, r0
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x202>
 8001ae4:	e0e4      	b.n	8001cb0 <__aeabi_dsub+0x3cc>
 8001ae6:	0022      	movs	r2, r4
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	2c01      	cmp	r4, #1
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x20c>
 8001aee:	e1c3      	b.n	8001e78 <__aeabi_dsub+0x594>
 8001af0:	4956      	ldr	r1, [pc, #344]	; (8001c4c <__aeabi_dsub+0x368>)
 8001af2:	428c      	cmp	r4, r1
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x214>
 8001af6:	e0b1      	b.n	8001c5c <__aeabi_dsub+0x378>
 8001af8:	4694      	mov	ip, r2
 8001afa:	e72b      	b.n	8001954 <__aeabi_dsub+0x70>
 8001afc:	2401      	movs	r4, #1
 8001afe:	4061      	eors	r1, r4
 8001b00:	468b      	mov	fp, r1
 8001b02:	428d      	cmp	r5, r1
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x224>
 8001b06:	e716      	b.n	8001936 <__aeabi_dsub+0x52>
 8001b08:	4952      	ldr	r1, [pc, #328]	; (8001c54 <__aeabi_dsub+0x370>)
 8001b0a:	468c      	mov	ip, r1
 8001b0c:	44b4      	add	ip, r6
 8001b0e:	4664      	mov	r4, ip
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x232>
 8001b14:	e0d3      	b.n	8001cbe <__aeabi_dsub+0x3da>
 8001b16:	1b91      	subs	r1, r2, r6
 8001b18:	468c      	mov	ip, r1
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x23c>
 8001b1e:	e15e      	b.n	8001dde <__aeabi_dsub+0x4fa>
 8001b20:	494a      	ldr	r1, [pc, #296]	; (8001c4c <__aeabi_dsub+0x368>)
 8001b22:	428a      	cmp	r2, r1
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x244>
 8001b26:	e1be      	b.n	8001ea6 <__aeabi_dsub+0x5c2>
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	464c      	mov	r4, r9
 8001b2c:	0409      	lsls	r1, r1, #16
 8001b2e:	430c      	orrs	r4, r1
 8001b30:	46a1      	mov	r9, r4
 8001b32:	4661      	mov	r1, ip
 8001b34:	2938      	cmp	r1, #56	; 0x38
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dsub+0x256>
 8001b38:	e1ba      	b.n	8001eb0 <__aeabi_dsub+0x5cc>
 8001b3a:	291f      	cmp	r1, #31
 8001b3c:	dd00      	ble.n	8001b40 <__aeabi_dsub+0x25c>
 8001b3e:	e227      	b.n	8001f90 <__aeabi_dsub+0x6ac>
 8001b40:	2420      	movs	r4, #32
 8001b42:	1a64      	subs	r4, r4, r1
 8001b44:	4649      	mov	r1, r9
 8001b46:	40a1      	lsls	r1, r4
 8001b48:	001e      	movs	r6, r3
 8001b4a:	4688      	mov	r8, r1
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	40a3      	lsls	r3, r4
 8001b50:	40ce      	lsrs	r6, r1
 8001b52:	4641      	mov	r1, r8
 8001b54:	1e5c      	subs	r4, r3, #1
 8001b56:	41a3      	sbcs	r3, r4
 8001b58:	4331      	orrs	r1, r6
 8001b5a:	4319      	orrs	r1, r3
 8001b5c:	000c      	movs	r4, r1
 8001b5e:	4663      	mov	r3, ip
 8001b60:	4649      	mov	r1, r9
 8001b62:	40d9      	lsrs	r1, r3
 8001b64:	187f      	adds	r7, r7, r1
 8001b66:	1824      	adds	r4, r4, r0
 8001b68:	4284      	cmp	r4, r0
 8001b6a:	419b      	sbcs	r3, r3
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	469a      	mov	sl, r3
 8001b70:	0016      	movs	r6, r2
 8001b72:	44ba      	add	sl, r7
 8001b74:	e05d      	b.n	8001c32 <__aeabi_dsub+0x34e>
 8001b76:	4c38      	ldr	r4, [pc, #224]	; (8001c58 <__aeabi_dsub+0x374>)
 8001b78:	1c72      	adds	r2, r6, #1
 8001b7a:	4222      	tst	r2, r4
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dsub+0x29c>
 8001b7e:	e0df      	b.n	8001d40 <__aeabi_dsub+0x45c>
 8001b80:	464a      	mov	r2, r9
 8001b82:	431a      	orrs	r2, r3
 8001b84:	2e00      	cmp	r6, #0
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x2a6>
 8001b88:	e15c      	b.n	8001e44 <__aeabi_dsub+0x560>
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2ac>
 8001b8e:	e1cf      	b.n	8001f30 <__aeabi_dsub+0x64c>
 8001b90:	003a      	movs	r2, r7
 8001b92:	4302      	orrs	r2, r0
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x2b4>
 8001b96:	e17f      	b.n	8001e98 <__aeabi_dsub+0x5b4>
 8001b98:	1a1c      	subs	r4, r3, r0
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	42a3      	cmp	r3, r4
 8001b9e:	4189      	sbcs	r1, r1
 8001ba0:	1bd2      	subs	r2, r2, r7
 8001ba2:	4249      	negs	r1, r1
 8001ba4:	1a52      	subs	r2, r2, r1
 8001ba6:	4692      	mov	sl, r2
 8001ba8:	0212      	lsls	r2, r2, #8
 8001baa:	d400      	bmi.n	8001bae <__aeabi_dsub+0x2ca>
 8001bac:	e20a      	b.n	8001fc4 <__aeabi_dsub+0x6e0>
 8001bae:	1ac4      	subs	r4, r0, r3
 8001bb0:	42a0      	cmp	r0, r4
 8001bb2:	4180      	sbcs	r0, r0
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	1aff      	subs	r7, r7, r3
 8001bba:	1a3b      	subs	r3, r7, r0
 8001bbc:	469a      	mov	sl, r3
 8001bbe:	465d      	mov	r5, fp
 8001bc0:	e71a      	b.n	80019f8 <__aeabi_dsub+0x114>
 8001bc2:	003a      	movs	r2, r7
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	d073      	beq.n	8001cb0 <__aeabi_dsub+0x3cc>
 8001bc8:	0022      	movs	r2, r4
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	2c01      	cmp	r4, #1
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x2ee>
 8001bd0:	e0cb      	b.n	8001d6a <__aeabi_dsub+0x486>
 8001bd2:	4554      	cmp	r4, sl
 8001bd4:	d042      	beq.n	8001c5c <__aeabi_dsub+0x378>
 8001bd6:	4694      	mov	ip, r2
 8001bd8:	e748      	b.n	8001a6c <__aeabi_dsub+0x188>
 8001bda:	0010      	movs	r0, r2
 8001bdc:	3b1f      	subs	r3, #31
 8001bde:	40d8      	lsrs	r0, r3
 8001be0:	2920      	cmp	r1, #32
 8001be2:	d003      	beq.n	8001bec <__aeabi_dsub+0x308>
 8001be4:	2340      	movs	r3, #64	; 0x40
 8001be6:	1a5b      	subs	r3, r3, r1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	4314      	orrs	r4, r2
 8001bec:	1e63      	subs	r3, r4, #1
 8001bee:	419c      	sbcs	r4, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	469a      	mov	sl, r3
 8001bf6:	4304      	orrs	r4, r0
 8001bf8:	0763      	lsls	r3, r4, #29
 8001bfa:	d000      	beq.n	8001bfe <__aeabi_dsub+0x31a>
 8001bfc:	e6fe      	b.n	80019fc <__aeabi_dsub+0x118>
 8001bfe:	4652      	mov	r2, sl
 8001c00:	08e3      	lsrs	r3, r4, #3
 8001c02:	0752      	lsls	r2, r2, #29
 8001c04:	4313      	orrs	r3, r2
 8001c06:	4652      	mov	r2, sl
 8001c08:	46b4      	mov	ip, r6
 8001c0a:	08d2      	lsrs	r2, r2, #3
 8001c0c:	490f      	ldr	r1, [pc, #60]	; (8001c4c <__aeabi_dsub+0x368>)
 8001c0e:	458c      	cmp	ip, r1
 8001c10:	d02a      	beq.n	8001c68 <__aeabi_dsub+0x384>
 8001c12:	0312      	lsls	r2, r2, #12
 8001c14:	0b14      	lsrs	r4, r2, #12
 8001c16:	4662      	mov	r2, ip
 8001c18:	0552      	lsls	r2, r2, #21
 8001c1a:	0d52      	lsrs	r2, r2, #21
 8001c1c:	e70c      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001c1e:	003c      	movs	r4, r7
 8001c20:	4304      	orrs	r4, r0
 8001c22:	1e62      	subs	r2, r4, #1
 8001c24:	4194      	sbcs	r4, r2
 8001c26:	18e4      	adds	r4, r4, r3
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	4192      	sbcs	r2, r2
 8001c2c:	4252      	negs	r2, r2
 8001c2e:	444a      	add	r2, r9
 8001c30:	4692      	mov	sl, r2
 8001c32:	4653      	mov	r3, sl
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	d5df      	bpl.n	8001bf8 <__aeabi_dsub+0x314>
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__aeabi_dsub+0x368>)
 8001c3a:	3601      	adds	r6, #1
 8001c3c:	429e      	cmp	r6, r3
 8001c3e:	d000      	beq.n	8001c42 <__aeabi_dsub+0x35e>
 8001c40:	e0a0      	b.n	8001d84 <__aeabi_dsub+0x4a0>
 8001c42:	0032      	movs	r2, r6
 8001c44:	2400      	movs	r4, #0
 8001c46:	2300      	movs	r3, #0
 8001c48:	e6f6      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	000007ff 	.word	0x000007ff
 8001c50:	ff7fffff 	.word	0xff7fffff
 8001c54:	fffff801 	.word	0xfffff801
 8001c58:	000007fe 	.word	0x000007fe
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	464a      	mov	r2, r9
 8001c60:	0752      	lsls	r2, r2, #29
 8001c62:	4313      	orrs	r3, r2
 8001c64:	464a      	mov	r2, r9
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	0019      	movs	r1, r3
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x38c>
 8001c6e:	e1b5      	b.n	8001fdc <__aeabi_dsub+0x6f8>
 8001c70:	2480      	movs	r4, #128	; 0x80
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4314      	orrs	r4, r2
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	4ad5      	ldr	r2, [pc, #852]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e6dc      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001c7e:	0020      	movs	r0, r4
 8001c80:	f000 fa60 	bl	8002144 <__clzsi2>
 8001c84:	0003      	movs	r3, r0
 8001c86:	3318      	adds	r3, #24
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	dc00      	bgt.n	8001c8e <__aeabi_dsub+0x3aa>
 8001c8c:	e695      	b.n	80019ba <__aeabi_dsub+0xd6>
 8001c8e:	0022      	movs	r2, r4
 8001c90:	3808      	subs	r0, #8
 8001c92:	4082      	lsls	r2, r0
 8001c94:	2400      	movs	r4, #0
 8001c96:	429e      	cmp	r6, r3
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x3b8>
 8001c9a:	e69a      	b.n	80019d2 <__aeabi_dsub+0xee>
 8001c9c:	1af6      	subs	r6, r6, r3
 8001c9e:	4bcd      	ldr	r3, [pc, #820]	; (8001fd4 <__aeabi_dsub+0x6f0>)
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	e6a8      	b.n	80019f8 <__aeabi_dsub+0x114>
 8001ca6:	003c      	movs	r4, r7
 8001ca8:	4304      	orrs	r4, r0
 8001caa:	1e62      	subs	r2, r4, #1
 8001cac:	4194      	sbcs	r4, r2
 8001cae:	e66c      	b.n	800198a <__aeabi_dsub+0xa6>
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	0752      	lsls	r2, r2, #29
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	464a      	mov	r2, r9
 8001cba:	08d2      	lsrs	r2, r2, #3
 8001cbc:	e7a6      	b.n	8001c0c <__aeabi_dsub+0x328>
 8001cbe:	4cc6      	ldr	r4, [pc, #792]	; (8001fd8 <__aeabi_dsub+0x6f4>)
 8001cc0:	1c72      	adds	r2, r6, #1
 8001cc2:	4222      	tst	r2, r4
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x3e4>
 8001cc6:	e0ac      	b.n	8001e22 <__aeabi_dsub+0x53e>
 8001cc8:	464a      	mov	r2, r9
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	2e00      	cmp	r6, #0
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dsub+0x3ee>
 8001cd0:	e105      	b.n	8001ede <__aeabi_dsub+0x5fa>
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x3f4>
 8001cd6:	e156      	b.n	8001f86 <__aeabi_dsub+0x6a2>
 8001cd8:	003a      	movs	r2, r7
 8001cda:	4302      	orrs	r2, r0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x3fc>
 8001cde:	e0db      	b.n	8001e98 <__aeabi_dsub+0x5b4>
 8001ce0:	181c      	adds	r4, r3, r0
 8001ce2:	429c      	cmp	r4, r3
 8001ce4:	419b      	sbcs	r3, r3
 8001ce6:	444f      	add	r7, r9
 8001ce8:	46ba      	mov	sl, r7
 8001cea:	425b      	negs	r3, r3
 8001cec:	449a      	add	sl, r3
 8001cee:	4653      	mov	r3, sl
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	d400      	bmi.n	8001cf6 <__aeabi_dsub+0x412>
 8001cf4:	e780      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	4bb6      	ldr	r3, [pc, #728]	; (8001fd4 <__aeabi_dsub+0x6f0>)
 8001cfa:	2601      	movs	r6, #1
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	4692      	mov	sl, r2
 8001d00:	e77a      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001d02:	4cb3      	ldr	r4, [pc, #716]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001d04:	42a2      	cmp	r2, r4
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x426>
 8001d08:	e0c0      	b.n	8001e8c <__aeabi_dsub+0x5a8>
 8001d0a:	2480      	movs	r4, #128	; 0x80
 8001d0c:	464d      	mov	r5, r9
 8001d0e:	0424      	lsls	r4, r4, #16
 8001d10:	4325      	orrs	r5, r4
 8001d12:	46a9      	mov	r9, r5
 8001d14:	4664      	mov	r4, ip
 8001d16:	2c38      	cmp	r4, #56	; 0x38
 8001d18:	dc53      	bgt.n	8001dc2 <__aeabi_dsub+0x4de>
 8001d1a:	4661      	mov	r1, ip
 8001d1c:	2c1f      	cmp	r4, #31
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_dsub+0x43e>
 8001d20:	e0cd      	b.n	8001ebe <__aeabi_dsub+0x5da>
 8001d22:	2520      	movs	r5, #32
 8001d24:	001e      	movs	r6, r3
 8001d26:	1b2d      	subs	r5, r5, r4
 8001d28:	464c      	mov	r4, r9
 8001d2a:	40ab      	lsls	r3, r5
 8001d2c:	40ac      	lsls	r4, r5
 8001d2e:	40ce      	lsrs	r6, r1
 8001d30:	1e5d      	subs	r5, r3, #1
 8001d32:	41ab      	sbcs	r3, r5
 8001d34:	4334      	orrs	r4, r6
 8001d36:	4323      	orrs	r3, r4
 8001d38:	464c      	mov	r4, r9
 8001d3a:	40cc      	lsrs	r4, r1
 8001d3c:	1b3f      	subs	r7, r7, r4
 8001d3e:	e045      	b.n	8001dcc <__aeabi_dsub+0x4e8>
 8001d40:	464a      	mov	r2, r9
 8001d42:	1a1c      	subs	r4, r3, r0
 8001d44:	1bd1      	subs	r1, r2, r7
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	4192      	sbcs	r2, r2
 8001d4a:	4252      	negs	r2, r2
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4651      	mov	r1, sl
 8001d52:	1a52      	subs	r2, r2, r1
 8001d54:	4692      	mov	sl, r2
 8001d56:	0212      	lsls	r2, r2, #8
 8001d58:	d500      	bpl.n	8001d5c <__aeabi_dsub+0x478>
 8001d5a:	e083      	b.n	8001e64 <__aeabi_dsub+0x580>
 8001d5c:	4653      	mov	r3, sl
 8001d5e:	4323      	orrs	r3, r4
 8001d60:	d000      	beq.n	8001d64 <__aeabi_dsub+0x480>
 8001d62:	e621      	b.n	80019a8 <__aeabi_dsub+0xc4>
 8001d64:	2200      	movs	r2, #0
 8001d66:	2500      	movs	r5, #0
 8001d68:	e753      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001d6a:	181c      	adds	r4, r3, r0
 8001d6c:	429c      	cmp	r4, r3
 8001d6e:	419b      	sbcs	r3, r3
 8001d70:	444f      	add	r7, r9
 8001d72:	46ba      	mov	sl, r7
 8001d74:	425b      	negs	r3, r3
 8001d76:	449a      	add	sl, r3
 8001d78:	4653      	mov	r3, sl
 8001d7a:	2601      	movs	r6, #1
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	d400      	bmi.n	8001d82 <__aeabi_dsub+0x49e>
 8001d80:	e73a      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001d82:	2602      	movs	r6, #2
 8001d84:	4652      	mov	r2, sl
 8001d86:	4b93      	ldr	r3, [pc, #588]	; (8001fd4 <__aeabi_dsub+0x6f0>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	4021      	ands	r1, r4
 8001d90:	0862      	lsrs	r2, r4, #1
 8001d92:	430a      	orrs	r2, r1
 8001d94:	07dc      	lsls	r4, r3, #31
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	469a      	mov	sl, r3
 8001d9a:	4314      	orrs	r4, r2
 8001d9c:	e62c      	b.n	80019f8 <__aeabi_dsub+0x114>
 8001d9e:	0039      	movs	r1, r7
 8001da0:	3a20      	subs	r2, #32
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4662      	mov	r2, ip
 8001da6:	2a20      	cmp	r2, #32
 8001da8:	d006      	beq.n	8001db8 <__aeabi_dsub+0x4d4>
 8001daa:	4664      	mov	r4, ip
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	1b12      	subs	r2, r2, r4
 8001db0:	003c      	movs	r4, r7
 8001db2:	4094      	lsls	r4, r2
 8001db4:	4304      	orrs	r4, r0
 8001db6:	9401      	str	r4, [sp, #4]
 8001db8:	9c01      	ldr	r4, [sp, #4]
 8001dba:	1e62      	subs	r2, r4, #1
 8001dbc:	4194      	sbcs	r4, r2
 8001dbe:	430c      	orrs	r4, r1
 8001dc0:	e5e3      	b.n	800198a <__aeabi_dsub+0xa6>
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	4319      	orrs	r1, r3
 8001dc6:	000b      	movs	r3, r1
 8001dc8:	1e5c      	subs	r4, r3, #1
 8001dca:	41a3      	sbcs	r3, r4
 8001dcc:	1ac4      	subs	r4, r0, r3
 8001dce:	42a0      	cmp	r0, r4
 8001dd0:	419b      	sbcs	r3, r3
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	1afb      	subs	r3, r7, r3
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	0016      	movs	r6, r2
 8001ddc:	e5dc      	b.n	8001998 <__aeabi_dsub+0xb4>
 8001dde:	4649      	mov	r1, r9
 8001de0:	4319      	orrs	r1, r3
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x502>
 8001de4:	e0ae      	b.n	8001f44 <__aeabi_dsub+0x660>
 8001de6:	4661      	mov	r1, ip
 8001de8:	4664      	mov	r4, ip
 8001dea:	3901      	subs	r1, #1
 8001dec:	2c01      	cmp	r4, #1
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x50e>
 8001df0:	e0e0      	b.n	8001fb4 <__aeabi_dsub+0x6d0>
 8001df2:	4c77      	ldr	r4, [pc, #476]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001df4:	45a4      	cmp	ip, r4
 8001df6:	d056      	beq.n	8001ea6 <__aeabi_dsub+0x5c2>
 8001df8:	468c      	mov	ip, r1
 8001dfa:	e69a      	b.n	8001b32 <__aeabi_dsub+0x24e>
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	2220      	movs	r2, #32
 8001e00:	003c      	movs	r4, r7
 8001e02:	1a52      	subs	r2, r2, r1
 8001e04:	4094      	lsls	r4, r2
 8001e06:	0001      	movs	r1, r0
 8001e08:	4090      	lsls	r0, r2
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	4664      	mov	r4, ip
 8001e0e:	1e42      	subs	r2, r0, #1
 8001e10:	4190      	sbcs	r0, r2
 8001e12:	4662      	mov	r2, ip
 8001e14:	40e1      	lsrs	r1, r4
 8001e16:	4644      	mov	r4, r8
 8001e18:	40d7      	lsrs	r7, r2
 8001e1a:	430c      	orrs	r4, r1
 8001e1c:	4304      	orrs	r4, r0
 8001e1e:	44b9      	add	r9, r7
 8001e20:	e701      	b.n	8001c26 <__aeabi_dsub+0x342>
 8001e22:	496b      	ldr	r1, [pc, #428]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001e24:	428a      	cmp	r2, r1
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x546>
 8001e28:	e70c      	b.n	8001c44 <__aeabi_dsub+0x360>
 8001e2a:	1818      	adds	r0, r3, r0
 8001e2c:	4298      	cmp	r0, r3
 8001e2e:	419b      	sbcs	r3, r3
 8001e30:	444f      	add	r7, r9
 8001e32:	425b      	negs	r3, r3
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	07dc      	lsls	r4, r3, #31
 8001e38:	0840      	lsrs	r0, r0, #1
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	469a      	mov	sl, r3
 8001e3e:	0016      	movs	r6, r2
 8001e40:	4304      	orrs	r4, r0
 8001e42:	e6d9      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d000      	beq.n	8001e4a <__aeabi_dsub+0x566>
 8001e48:	e081      	b.n	8001f4e <__aeabi_dsub+0x66a>
 8001e4a:	003b      	movs	r3, r7
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	d11d      	bne.n	8001e8c <__aeabi_dsub+0x5a8>
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	2500      	movs	r5, #0
 8001e54:	0312      	lsls	r2, r2, #12
 8001e56:	e70b      	b.n	8001c70 <__aeabi_dsub+0x38c>
 8001e58:	08c0      	lsrs	r0, r0, #3
 8001e5a:	077b      	lsls	r3, r7, #29
 8001e5c:	465d      	mov	r5, fp
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	08fa      	lsrs	r2, r7, #3
 8001e62:	e6d3      	b.n	8001c0c <__aeabi_dsub+0x328>
 8001e64:	1ac4      	subs	r4, r0, r3
 8001e66:	42a0      	cmp	r0, r4
 8001e68:	4180      	sbcs	r0, r0
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	4240      	negs	r0, r0
 8001e6e:	1aff      	subs	r7, r7, r3
 8001e70:	1a3b      	subs	r3, r7, r0
 8001e72:	469a      	mov	sl, r3
 8001e74:	465d      	mov	r5, fp
 8001e76:	e597      	b.n	80019a8 <__aeabi_dsub+0xc4>
 8001e78:	1a1c      	subs	r4, r3, r0
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	419b      	sbcs	r3, r3
 8001e80:	1bd7      	subs	r7, r2, r7
 8001e82:	425b      	negs	r3, r3
 8001e84:	1afb      	subs	r3, r7, r3
 8001e86:	469a      	mov	sl, r3
 8001e88:	2601      	movs	r6, #1
 8001e8a:	e585      	b.n	8001998 <__aeabi_dsub+0xb4>
 8001e8c:	08c0      	lsrs	r0, r0, #3
 8001e8e:	077b      	lsls	r3, r7, #29
 8001e90:	465d      	mov	r5, fp
 8001e92:	4303      	orrs	r3, r0
 8001e94:	08fa      	lsrs	r2, r7, #3
 8001e96:	e6e7      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	0752      	lsls	r2, r2, #29
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	08d2      	lsrs	r2, r2, #3
 8001ea4:	e6b5      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001ea6:	08c0      	lsrs	r0, r0, #3
 8001ea8:	077b      	lsls	r3, r7, #29
 8001eaa:	4303      	orrs	r3, r0
 8001eac:	08fa      	lsrs	r2, r7, #3
 8001eae:	e6db      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	4319      	orrs	r1, r3
 8001eb4:	000b      	movs	r3, r1
 8001eb6:	1e59      	subs	r1, r3, #1
 8001eb8:	418b      	sbcs	r3, r1
 8001eba:	001c      	movs	r4, r3
 8001ebc:	e653      	b.n	8001b66 <__aeabi_dsub+0x282>
 8001ebe:	464d      	mov	r5, r9
 8001ec0:	3c20      	subs	r4, #32
 8001ec2:	40e5      	lsrs	r5, r4
 8001ec4:	2920      	cmp	r1, #32
 8001ec6:	d005      	beq.n	8001ed4 <__aeabi_dsub+0x5f0>
 8001ec8:	2440      	movs	r4, #64	; 0x40
 8001eca:	1a64      	subs	r4, r4, r1
 8001ecc:	4649      	mov	r1, r9
 8001ece:	40a1      	lsls	r1, r4
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	1e5c      	subs	r4, r3, #1
 8001ed8:	41a3      	sbcs	r3, r4
 8001eda:	432b      	orrs	r3, r5
 8001edc:	e776      	b.n	8001dcc <__aeabi_dsub+0x4e8>
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d0e1      	beq.n	8001ea6 <__aeabi_dsub+0x5c2>
 8001ee2:	003a      	movs	r2, r7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	4302      	orrs	r2, r0
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x608>
 8001eea:	e6b8      	b.n	8001c5e <__aeabi_dsub+0x37a>
 8001eec:	464a      	mov	r2, r9
 8001eee:	0752      	lsls	r2, r2, #29
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	0324      	lsls	r4, r4, #12
 8001ef8:	08d2      	lsrs	r2, r2, #3
 8001efa:	4222      	tst	r2, r4
 8001efc:	d007      	beq.n	8001f0e <__aeabi_dsub+0x62a>
 8001efe:	08fe      	lsrs	r6, r7, #3
 8001f00:	4226      	tst	r6, r4
 8001f02:	d104      	bne.n	8001f0e <__aeabi_dsub+0x62a>
 8001f04:	465d      	mov	r5, fp
 8001f06:	0032      	movs	r2, r6
 8001f08:	08c3      	lsrs	r3, r0, #3
 8001f0a:	077f      	lsls	r7, r7, #29
 8001f0c:	433b      	orrs	r3, r7
 8001f0e:	0f59      	lsrs	r1, r3, #29
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	0749      	lsls	r1, r1, #29
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	430b      	orrs	r3, r1
 8001f18:	e6a6      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001f1a:	1ac4      	subs	r4, r0, r3
 8001f1c:	42a0      	cmp	r0, r4
 8001f1e:	4180      	sbcs	r0, r0
 8001f20:	464b      	mov	r3, r9
 8001f22:	4240      	negs	r0, r0
 8001f24:	1aff      	subs	r7, r7, r3
 8001f26:	1a3b      	subs	r3, r7, r0
 8001f28:	469a      	mov	sl, r3
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	2601      	movs	r6, #1
 8001f2e:	e533      	b.n	8001998 <__aeabi_dsub+0xb4>
 8001f30:	003b      	movs	r3, r7
 8001f32:	4303      	orrs	r3, r0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x654>
 8001f36:	e715      	b.n	8001d64 <__aeabi_dsub+0x480>
 8001f38:	08c0      	lsrs	r0, r0, #3
 8001f3a:	077b      	lsls	r3, r7, #29
 8001f3c:	465d      	mov	r5, fp
 8001f3e:	4303      	orrs	r3, r0
 8001f40:	08fa      	lsrs	r2, r7, #3
 8001f42:	e666      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001f44:	08c0      	lsrs	r0, r0, #3
 8001f46:	077b      	lsls	r3, r7, #29
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	08fa      	lsrs	r2, r7, #3
 8001f4c:	e65e      	b.n	8001c0c <__aeabi_dsub+0x328>
 8001f4e:	003a      	movs	r2, r7
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	4302      	orrs	r2, r0
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x674>
 8001f56:	e682      	b.n	8001c5e <__aeabi_dsub+0x37a>
 8001f58:	464a      	mov	r2, r9
 8001f5a:	0752      	lsls	r2, r2, #29
 8001f5c:	2480      	movs	r4, #128	; 0x80
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	464a      	mov	r2, r9
 8001f62:	0324      	lsls	r4, r4, #12
 8001f64:	08d2      	lsrs	r2, r2, #3
 8001f66:	4222      	tst	r2, r4
 8001f68:	d007      	beq.n	8001f7a <__aeabi_dsub+0x696>
 8001f6a:	08fe      	lsrs	r6, r7, #3
 8001f6c:	4226      	tst	r6, r4
 8001f6e:	d104      	bne.n	8001f7a <__aeabi_dsub+0x696>
 8001f70:	465d      	mov	r5, fp
 8001f72:	0032      	movs	r2, r6
 8001f74:	08c3      	lsrs	r3, r0, #3
 8001f76:	077f      	lsls	r7, r7, #29
 8001f78:	433b      	orrs	r3, r7
 8001f7a:	0f59      	lsrs	r1, r3, #29
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	0749      	lsls	r1, r1, #29
 8001f82:	430b      	orrs	r3, r1
 8001f84:	e670      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001f86:	08c0      	lsrs	r0, r0, #3
 8001f88:	077b      	lsls	r3, r7, #29
 8001f8a:	4303      	orrs	r3, r0
 8001f8c:	08fa      	lsrs	r2, r7, #3
 8001f8e:	e640      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001f90:	464c      	mov	r4, r9
 8001f92:	3920      	subs	r1, #32
 8001f94:	40cc      	lsrs	r4, r1
 8001f96:	4661      	mov	r1, ip
 8001f98:	2920      	cmp	r1, #32
 8001f9a:	d006      	beq.n	8001faa <__aeabi_dsub+0x6c6>
 8001f9c:	4666      	mov	r6, ip
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	1b89      	subs	r1, r1, r6
 8001fa2:	464e      	mov	r6, r9
 8001fa4:	408e      	lsls	r6, r1
 8001fa6:	4333      	orrs	r3, r6
 8001fa8:	4698      	mov	r8, r3
 8001faa:	4643      	mov	r3, r8
 8001fac:	1e59      	subs	r1, r3, #1
 8001fae:	418b      	sbcs	r3, r1
 8001fb0:	431c      	orrs	r4, r3
 8001fb2:	e5d8      	b.n	8001b66 <__aeabi_dsub+0x282>
 8001fb4:	181c      	adds	r4, r3, r0
 8001fb6:	4284      	cmp	r4, r0
 8001fb8:	4180      	sbcs	r0, r0
 8001fba:	444f      	add	r7, r9
 8001fbc:	46ba      	mov	sl, r7
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	4482      	add	sl, r0
 8001fc2:	e6d9      	b.n	8001d78 <__aeabi_dsub+0x494>
 8001fc4:	4653      	mov	r3, sl
 8001fc6:	4323      	orrs	r3, r4
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x6e8>
 8001fca:	e6cb      	b.n	8001d64 <__aeabi_dsub+0x480>
 8001fcc:	e614      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	000007ff 	.word	0x000007ff
 8001fd4:	ff7fffff 	.word	0xff7fffff
 8001fd8:	000007fe 	.word	0x000007fe
 8001fdc:	2300      	movs	r3, #0
 8001fde:	4a01      	ldr	r2, [pc, #4]	; (8001fe4 <__aeabi_dsub+0x700>)
 8001fe0:	001c      	movs	r4, r3
 8001fe2:	e529      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001fe4:	000007ff 	.word	0x000007ff

08001fe8 <__aeabi_d2iz>:
 8001fe8:	000a      	movs	r2, r1
 8001fea:	b530      	push	{r4, r5, lr}
 8001fec:	4c13      	ldr	r4, [pc, #76]	; (800203c <__aeabi_d2iz+0x54>)
 8001fee:	0053      	lsls	r3, r2, #1
 8001ff0:	0309      	lsls	r1, r1, #12
 8001ff2:	0005      	movs	r5, r0
 8001ff4:	0b09      	lsrs	r1, r1, #12
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	0d5b      	lsrs	r3, r3, #21
 8001ffa:	0fd2      	lsrs	r2, r2, #31
 8001ffc:	42a3      	cmp	r3, r4
 8001ffe:	dd04      	ble.n	800200a <__aeabi_d2iz+0x22>
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <__aeabi_d2iz+0x58>)
 8002002:	4283      	cmp	r3, r0
 8002004:	dd02      	ble.n	800200c <__aeabi_d2iz+0x24>
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <__aeabi_d2iz+0x5c>)
 8002008:	18d0      	adds	r0, r2, r3
 800200a:	bd30      	pop	{r4, r5, pc}
 800200c:	2080      	movs	r0, #128	; 0x80
 800200e:	0340      	lsls	r0, r0, #13
 8002010:	4301      	orrs	r1, r0
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <__aeabi_d2iz+0x60>)
 8002014:	1ac0      	subs	r0, r0, r3
 8002016:	281f      	cmp	r0, #31
 8002018:	dd08      	ble.n	800202c <__aeabi_d2iz+0x44>
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <__aeabi_d2iz+0x64>)
 800201c:	1ac3      	subs	r3, r0, r3
 800201e:	40d9      	lsrs	r1, r3
 8002020:	000b      	movs	r3, r1
 8002022:	4258      	negs	r0, r3
 8002024:	2a00      	cmp	r2, #0
 8002026:	d1f0      	bne.n	800200a <__aeabi_d2iz+0x22>
 8002028:	0018      	movs	r0, r3
 800202a:	e7ee      	b.n	800200a <__aeabi_d2iz+0x22>
 800202c:	4c08      	ldr	r4, [pc, #32]	; (8002050 <__aeabi_d2iz+0x68>)
 800202e:	40c5      	lsrs	r5, r0
 8002030:	46a4      	mov	ip, r4
 8002032:	4463      	add	r3, ip
 8002034:	4099      	lsls	r1, r3
 8002036:	000b      	movs	r3, r1
 8002038:	432b      	orrs	r3, r5
 800203a:	e7f2      	b.n	8002022 <__aeabi_d2iz+0x3a>
 800203c:	000003fe 	.word	0x000003fe
 8002040:	0000041d 	.word	0x0000041d
 8002044:	7fffffff 	.word	0x7fffffff
 8002048:	00000433 	.word	0x00000433
 800204c:	00000413 	.word	0x00000413
 8002050:	fffffbed 	.word	0xfffffbed

08002054 <__aeabi_i2d>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	2800      	cmp	r0, #0
 8002058:	d016      	beq.n	8002088 <__aeabi_i2d+0x34>
 800205a:	17c3      	asrs	r3, r0, #31
 800205c:	18c5      	adds	r5, r0, r3
 800205e:	405d      	eors	r5, r3
 8002060:	0fc4      	lsrs	r4, r0, #31
 8002062:	0028      	movs	r0, r5
 8002064:	f000 f86e 	bl	8002144 <__clzsi2>
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <__aeabi_i2d+0x5c>)
 800206a:	1a1b      	subs	r3, r3, r0
 800206c:	280a      	cmp	r0, #10
 800206e:	dc16      	bgt.n	800209e <__aeabi_i2d+0x4a>
 8002070:	0002      	movs	r2, r0
 8002072:	002e      	movs	r6, r5
 8002074:	3215      	adds	r2, #21
 8002076:	4096      	lsls	r6, r2
 8002078:	220b      	movs	r2, #11
 800207a:	1a12      	subs	r2, r2, r0
 800207c:	40d5      	lsrs	r5, r2
 800207e:	055b      	lsls	r3, r3, #21
 8002080:	032d      	lsls	r5, r5, #12
 8002082:	0b2d      	lsrs	r5, r5, #12
 8002084:	0d5b      	lsrs	r3, r3, #21
 8002086:	e003      	b.n	8002090 <__aeabi_i2d+0x3c>
 8002088:	2400      	movs	r4, #0
 800208a:	2300      	movs	r3, #0
 800208c:	2500      	movs	r5, #0
 800208e:	2600      	movs	r6, #0
 8002090:	051b      	lsls	r3, r3, #20
 8002092:	432b      	orrs	r3, r5
 8002094:	07e4      	lsls	r4, r4, #31
 8002096:	4323      	orrs	r3, r4
 8002098:	0030      	movs	r0, r6
 800209a:	0019      	movs	r1, r3
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	380b      	subs	r0, #11
 80020a0:	4085      	lsls	r5, r0
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	032d      	lsls	r5, r5, #12
 80020a6:	2600      	movs	r6, #0
 80020a8:	0b2d      	lsrs	r5, r5, #12
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	e7f0      	b.n	8002090 <__aeabi_i2d+0x3c>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	0000041e 	.word	0x0000041e

080020b4 <__aeabi_f2d>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	0242      	lsls	r2, r0, #9
 80020b8:	0043      	lsls	r3, r0, #1
 80020ba:	0fc4      	lsrs	r4, r0, #31
 80020bc:	20fe      	movs	r0, #254	; 0xfe
 80020be:	0e1b      	lsrs	r3, r3, #24
 80020c0:	1c59      	adds	r1, r3, #1
 80020c2:	0a55      	lsrs	r5, r2, #9
 80020c4:	4208      	tst	r0, r1
 80020c6:	d00c      	beq.n	80020e2 <__aeabi_f2d+0x2e>
 80020c8:	21e0      	movs	r1, #224	; 0xe0
 80020ca:	0089      	lsls	r1, r1, #2
 80020cc:	468c      	mov	ip, r1
 80020ce:	076d      	lsls	r5, r5, #29
 80020d0:	0b12      	lsrs	r2, r2, #12
 80020d2:	4463      	add	r3, ip
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	4313      	orrs	r3, r2
 80020d8:	07e4      	lsls	r4, r4, #31
 80020da:	4323      	orrs	r3, r4
 80020dc:	0028      	movs	r0, r5
 80020de:	0019      	movs	r1, r3
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d114      	bne.n	8002110 <__aeabi_f2d+0x5c>
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	d01b      	beq.n	8002122 <__aeabi_f2d+0x6e>
 80020ea:	0028      	movs	r0, r5
 80020ec:	f000 f82a 	bl	8002144 <__clzsi2>
 80020f0:	280a      	cmp	r0, #10
 80020f2:	dc1c      	bgt.n	800212e <__aeabi_f2d+0x7a>
 80020f4:	230b      	movs	r3, #11
 80020f6:	002a      	movs	r2, r5
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	0003      	movs	r3, r0
 80020fe:	3315      	adds	r3, #21
 8002100:	409d      	lsls	r5, r3
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <__aeabi_f2d+0x88>)
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	1a1b      	subs	r3, r3, r0
 8002108:	055b      	lsls	r3, r3, #21
 800210a:	0b12      	lsrs	r2, r2, #12
 800210c:	0d5b      	lsrs	r3, r3, #21
 800210e:	e7e1      	b.n	80020d4 <__aeabi_f2d+0x20>
 8002110:	2d00      	cmp	r5, #0
 8002112:	d009      	beq.n	8002128 <__aeabi_f2d+0x74>
 8002114:	0b13      	lsrs	r3, r2, #12
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	0312      	lsls	r2, r2, #12
 800211a:	431a      	orrs	r2, r3
 800211c:	076d      	lsls	r5, r5, #29
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <__aeabi_f2d+0x8c>)
 8002120:	e7d8      	b.n	80020d4 <__aeabi_f2d+0x20>
 8002122:	2300      	movs	r3, #0
 8002124:	2200      	movs	r2, #0
 8002126:	e7d5      	b.n	80020d4 <__aeabi_f2d+0x20>
 8002128:	2200      	movs	r2, #0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <__aeabi_f2d+0x8c>)
 800212c:	e7d2      	b.n	80020d4 <__aeabi_f2d+0x20>
 800212e:	0003      	movs	r3, r0
 8002130:	002a      	movs	r2, r5
 8002132:	3b0b      	subs	r3, #11
 8002134:	409a      	lsls	r2, r3
 8002136:	2500      	movs	r5, #0
 8002138:	e7e3      	b.n	8002102 <__aeabi_f2d+0x4e>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	00000389 	.word	0x00000389
 8002140:	000007ff 	.word	0x000007ff

08002144 <__clzsi2>:
 8002144:	211c      	movs	r1, #28
 8002146:	2301      	movs	r3, #1
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	4298      	cmp	r0, r3
 800214c:	d301      	bcc.n	8002152 <__clzsi2+0xe>
 800214e:	0c00      	lsrs	r0, r0, #16
 8002150:	3910      	subs	r1, #16
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	4298      	cmp	r0, r3
 8002156:	d301      	bcc.n	800215c <__clzsi2+0x18>
 8002158:	0a00      	lsrs	r0, r0, #8
 800215a:	3908      	subs	r1, #8
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	4298      	cmp	r0, r3
 8002160:	d301      	bcc.n	8002166 <__clzsi2+0x22>
 8002162:	0900      	lsrs	r0, r0, #4
 8002164:	3904      	subs	r1, #4
 8002166:	a202      	add	r2, pc, #8	; (adr r2, 8002170 <__clzsi2+0x2c>)
 8002168:	5c10      	ldrb	r0, [r2, r0]
 800216a:	1840      	adds	r0, r0, r1
 800216c:	4770      	bx	lr
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	02020304 	.word	0x02020304
 8002174:	01010101 	.word	0x01010101
	...

08002180 <linkThrottle>:
volatile uint16_t throttledPWMWidth=0;



// Initialization functions
static void linkThrottle(Throttle *throttle) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    throttle->reading = 0; // Initialize with default value
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}

08002196 <linkHallSensor>:

static void linkHallSensor(HallSensor *sensor) {
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    sensor->sector = 0; // Initialize with default value
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
    sensor->pins = HALL_SENSOR_PINS;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	22e0      	movs	r2, #224	; 0xe0
 80021a8:	705a      	strb	r2, [r3, #1]
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <linkComm>:

static void linkComm(Comm *comm) {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
    comm->ch = 0; // Initialize with default value
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <linkMotor>:

static void linkMotor(Motor *motor) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    motor->type = 0; // Initialize with default value
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
    motor->speed = 0; // Initialize with default value
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	805a      	strh	r2, [r3, #2]
    motor->spin_direction = PMSM_CW; // Initialize with default value
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	711a      	strb	r2, [r3, #4]
    motor->running_state = false; // Initialize with default value
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	715a      	strb	r2, [r3, #5]
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <linkDriveTimer>:

static void linkDriveTimer(DriveTimer *timer) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    // Initialize with default values if any
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <initController>:

void initController() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
    linkThrottle(&controller_t.throttle_t);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <initController+0x34>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff ffba 	bl	8002180 <linkThrottle>
    linkHallSensor(&controller_t.hall_sensor_t);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <initController+0x38>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7ff ffc1 	bl	8002196 <linkHallSensor>
    linkComm(&controller_t.uart_t);
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <initController+0x3c>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff ffcb 	bl	80021b2 <linkComm>
    linkMotor(&controller_t.motor_t);
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <initController+0x40>)
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ffd2 	bl	80021c8 <linkMotor>
    linkDriveTimer(&controller_t.drive_timer_t);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <initController+0x44>)
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ffe2 	bl	80021f0 <linkDriveTimer>
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20000028 	.word	0x20000028
 8002238:	2000002c 	.word	0x2000002c
 800223c:	2000002e 	.word	0x2000002e
 8002240:	20000030 	.word	0x20000030
 8002244:	20000036 	.word	0x20000036

08002248 <PMSM_Init>:
}

//defining functions

// Initialize of all needed peripheral
void PMSM_Init(void) {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	PMSM_MotorStop();
 800224c:	f000 f8cc 	bl	80023e8 <PMSM_MotorStop>
	PMSM_startPWMToYGB();
 8002250:	f000 f83a 	bl	80022c8 <PMSM_startPWMToYGB>
	PMSM_generateLookUpTable();
 8002254:	f000 f9a8 	bl	80025a8 <PMSM_generateLookUpTable>
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <getThrottleStartValue>:

uint16_t getThrottleStartValue(){
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
	return PMSM_ADC_START;
 8002262:	23c8      	movs	r3, #200	; 0xc8
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <getRotorSector>:

uint8_t getRotorSector(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	return (uint8_t)((GPIOB->IDR) & (HALL_SENSOR_PINS))>>5;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <getRotorSector+0x1c>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	115b      	asrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2207      	movs	r2, #7
 800227c:	4013      	ands	r3, r2
 800227e:	b2db      	uxtb	r3, r3
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	48000400 	.word	0x48000400

0800228c <PMSM_setPWMFreq>:
void sendToUART(char *st){
	HAL_UART_Transmit(&huart1,(uint8_t *)st,strlen(st),HAL_MAX_DELAY);
}
#endif

void PMSM_setPWMFreq(uint16_t sfreq){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	0002      	movs	r2, r0
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCounter(&htim1,sfreq);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <PMSM_setPWMFreq+0x20>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	1dba      	adds	r2, r7, #6
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	200004d4 	.word	0x200004d4

080022b0 <PMSM_getPWMFreq>:

uint16_t PMSM_getPWMFreq(uint16_t gfreq){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	0002      	movs	r2, r0
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	801a      	strh	r2, [r3, #0]
	//in futur, frequency calculation can be performed here 
	return gfreq;
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	881b      	ldrh	r3, [r3, #0]
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <PMSM_startPWMToYGB>:

void PMSM_startPWMToYGB(void){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	//setting frequency of PWM signal to the Motor
	PMSM_setPWMFreq(PMSM_getPWMFreq(PWM_PERIOD));
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <PMSM_startPWMToYGB+0x4c>)
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff ffee 	bl	80022b0 <PMSM_getPWMFreq>
 80022d4:	0003      	movs	r3, r0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7ff ffd8 	bl	800228c <PMSM_setPWMFreq>
	
	//putting all the phases in starting condition.
	TIM1->CCR1 = 0;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <PMSM_startPWMToYGB+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <PMSM_startPWMToYGB+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <PMSM_startPWMToYGB+0x50>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c
	
	//starting the PWM channels
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <PMSM_startPWMToYGB+0x54>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f002 fde8 	bl	8004ec8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <PMSM_startPWMToYGB+0x54>)
 80022fa:	2104      	movs	r1, #4
 80022fc:	0018      	movs	r0, r3
 80022fe:	f002 fde3 	bl	8004ec8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <PMSM_startPWMToYGB+0x54>)
 8002304:	2108      	movs	r1, #8
 8002306:	0018      	movs	r0, r3
 8002308:	f002 fdde 	bl	8004ec8 <HAL_TIM_PWM_Start>
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	00000b44 	.word	0x00000b44
 8002318:	40012c00 	.word	0x40012c00
 800231c:	200004d4 	.word	0x200004d4

08002320 <PMSM_ADCToPWM>:

// Transform ADC value to value for writing to the timer register
uint16_t PMSM_ADCToPWM(uint16_t ADC_VALUE) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	0002      	movs	r2, r0
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	801a      	strh	r2, [r3, #0]
	uint32_t tmp;

	if (ADC_VALUE < PMSM_ADC_STOP) {
 800232c:	2232      	movs	r2, #50	; 0x32
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	4293      	cmp	r3, r2
 8002334:	d201      	bcs.n	800233a <PMSM_ADCToPWM+0x1a>
		return 0;
 8002336:	2300      	movs	r3, #0
 8002338:	e01c      	b.n	8002374 <PMSM_ADCToPWM+0x54>
	} else {
		if (ADC_VALUE > PMSM_ADC_MAX) {
 800233a:	23fa      	movs	r3, #250	; 0xfa
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1dba      	adds	r2, r7, #6
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d903      	bls.n	800234e <PMSM_ADCToPWM+0x2e>
			return PWM_PERIOD+1;
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <PMSM_ADCToPWM+0x5c>)
 8002348:	3301      	adds	r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	e012      	b.n	8002374 <PMSM_ADCToPWM+0x54>
		}
		else {
			tmp = (uint32_t)(ADC_VALUE-PMSM_ADC_STOP) * (uint32_t)PWM_PERIOD / (uint32_t)(PMSM_ADC_MAX - PMSM_ADC_START);
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <PMSM_ADCToPWM+0x5c>)
 8002358:	4353      	muls	r3, r2
 800235a:	22fa      	movs	r2, #250	; 0xfa
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	0011      	movs	r1, r2
 8002360:	22c8      	movs	r2, #200	; 0xc8
 8002362:	1a8a      	subs	r2, r1, r2
 8002364:	0011      	movs	r1, r2
 8002366:	0018      	movs	r0, r3
 8002368:	f7fd fece 	bl	8000108 <__udivsi3>
 800236c:	0003      	movs	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]
			return (uint16_t) tmp;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	b29b      	uxth	r3, r3
		}
	}
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	00000b44 	.word	0x00000b44

08002380 <setMotorSpinDirection>:

void setMotorSpinDirection(uint8_t spin_direction) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	0002      	movs	r2, r0
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	701a      	strb	r2, [r3, #0]
	controller_t.motor_t.spin_direction = spin_direction;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <setMotorSpinDirection+0x1c>)
 800238e:	1dfa      	adds	r2, r7, #7
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	731a      	strb	r2, [r3, #12]
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000028 	.word	0x20000028

080023a0 <getMotorSpinDirection>:
uint8_t getMotorSpinDirection() {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	return controller_t.motor_t.spin_direction;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <getMotorSpinDirection+0x10>)
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000028 	.word	0x20000028

080023b4 <setMotorRunningState>:
void setMotorRunningState(bool running_state){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	0002      	movs	r2, r0
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	701a      	strb	r2, [r3, #0]
	controller_t.motor_t.running_state = running_state;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <setMotorRunningState+0x1c>)
 80023c2:	1dfa      	adds	r2, r7, #7
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	735a      	strb	r2, [r3, #13]
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000028 	.word	0x20000028

080023d4 <isMotorRunning>:
bool isMotorRunning(void){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	return (controller_t.motor_t.running_state == true);
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <isMotorRunning+0x10>)
 80023da:	7b5b      	ldrb	r3, [r3, #13]
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	20000028 	.word	0x20000028

080023e8 <PMSM_MotorStop>:
uint16_t PMSM_GetSpeed(void) {
	return PMSM_Speed;
}

// Stop a motor
void PMSM_MotorStop(void){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	
	//lower swithes
	//lower switches are already off right after the power in ON
	
	//stopping the timer
	__HAL_TIM_DISABLE(&htim14);
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <PMSM_MotorStop+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a0e      	ldr	r2, [pc, #56]	; (800242c <PMSM_MotorStop+0x44>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	d10d      	bne.n	8002414 <PMSM_MotorStop+0x2c>
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <PMSM_MotorStop+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <PMSM_MotorStop+0x48>)
 8002400:	4013      	ands	r3, r2
 8002402:	d107      	bne.n	8002414 <PMSM_MotorStop+0x2c>
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <PMSM_MotorStop+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <PMSM_MotorStop+0x40>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

	PMSM_Speed = 0;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <PMSM_MotorStop+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]
	setMotorRunningState(false);
 800241a:	2000      	movs	r0, #0
 800241c:	f7ff ffca 	bl	80023b4 <setMotorRunningState>
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	2000051c 	.word	0x2000051c
 800242c:	00001111 	.word	0x00001111
 8002430:	00000444 	.word	0x00000444
 8002434:	2000003e 	.word	0x2000003e

08002438 <BLDC_MotorCommutation>:

void BLDC_MotorCommutation(uint16_t hallpos){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	0002      	movs	r2, r0
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	801a      	strh	r2, [r3, #0]
	
	if (getMotorSpinDirection() == PMSM_CW) {
 8002444:	f7ff ffac 	bl	80023a0 <getMotorSpinDirection>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d10f      	bne.n	800246c <BLDC_MotorCommutation+0x34>
		memcpy(PMSM_STATE, PMSM_BRIDGE_STATE_FORWARD[hallpos], sizeof(PMSM_STATE));
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	0013      	movs	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	189b      	adds	r3, r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4a4d      	ldr	r2, [pc, #308]	; (8002590 <BLDC_MotorCommutation+0x158>)
 800245a:	189b      	adds	r3, r3, r2
 800245c:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800245e:	0010      	movs	r0, r2
 8002460:	0019      	movs	r1, r3
 8002462:	2306      	movs	r3, #6
 8002464:	001a      	movs	r2, r3
 8002466:	f003 ff0f 	bl	8006288 <memcpy>
 800246a:	e013      	b.n	8002494 <BLDC_MotorCommutation+0x5c>
	}else if(getMotorSpinDirection() == PMSM_CCW){
 800246c:	f7ff ff98 	bl	80023a0 <getMotorSpinDirection>
 8002470:	0003      	movs	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10e      	bne.n	8002494 <BLDC_MotorCommutation+0x5c>
		memcpy(PMSM_STATE, PMSM_BRIDGE_STATE_BACKWARD[hallpos], sizeof(PMSM_STATE));
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	0013      	movs	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	189b      	adds	r3, r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4a45      	ldr	r2, [pc, #276]	; (8002598 <BLDC_MotorCommutation+0x160>)
 8002484:	189b      	adds	r3, r3, r2
 8002486:	4a43      	ldr	r2, [pc, #268]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002488:	0010      	movs	r0, r2
 800248a:	0019      	movs	r1, r3
 800248c:	2306      	movs	r3, #6
 800248e:	001a      	movs	r2, r3
 8002490:	f003 fefa 	bl	8006288 <memcpy>
	}

	// Disable if need
	if (!PMSM_STATE[UH]) TIM1->CCR3=0;
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <BLDC_MotorCommutation+0x6a>
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <BLDC_MotorCommutation+0x164>)
 800249e:	2200      	movs	r2, #0
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
	if (!PMSM_STATE[UL]) GPIOB->BSRR = 0x0002;//Y
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <BLDC_MotorCommutation+0x78>
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 80024ac:	2202      	movs	r2, #2
 80024ae:	619a      	str	r2, [r3, #24]
	if (!PMSM_STATE[VH]) TIM1->CCR2=0;
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <BLDC_MotorCommutation+0x86>
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <BLDC_MotorCommutation+0x164>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
	if (!PMSM_STATE[VL]) GPIOB->BSRR = 0x0001;//G
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024c0:	78db      	ldrb	r3, [r3, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <BLDC_MotorCommutation+0x94>
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	619a      	str	r2, [r3, #24]
	if (!PMSM_STATE[WH]) TIM1->CCR1=0;
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <BLDC_MotorCommutation+0xa2>
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <BLDC_MotorCommutation+0x164>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	635a      	str	r2, [r3, #52]	; 0x34
	if (!PMSM_STATE[WL]) GPIOA->BSRR = 0x0080;//B
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024dc:	795b      	ldrb	r3, [r3, #5]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <BLDC_MotorCommutation+0xb2>
 80024e2:	2390      	movs	r3, #144	; 0x90
 80024e4:	05db      	lsls	r3, r3, #23
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	619a      	str	r2, [r3, #24]

	// Enable if need. If previous state is Enabled then not enable again. Else output do flip-flop.
	if (PMSM_STATE[UH] & !PMSM_STATE[UL]) { toUpdate = CH3; }
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	001a      	movs	r2, r3
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	4259      	negs	r1, r3
 80024f6:	414b      	adcs	r3, r1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d002      	beq.n	8002504 <BLDC_MotorCommutation+0xcc>
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <BLDC_MotorCommutation+0x16c>)
 8002500:	2203      	movs	r2, #3
 8002502:	801a      	strh	r2, [r3, #0]
	if (PMSM_STATE[UL] & !PMSM_STATE[UH]) GPIOB->BRR = 0x0002;//Y
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002506:	785b      	ldrb	r3, [r3, #1]
 8002508:	001a      	movs	r2, r3
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4259      	negs	r1, r3
 8002510:	414b      	adcs	r3, r1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4013      	ands	r3, r2
 8002516:	d002      	beq.n	800251e <BLDC_MotorCommutation+0xe6>
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 800251a:	2202      	movs	r2, #2
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
	if (PMSM_STATE[VH] & !PMSM_STATE[VL]) {	toUpdate = CH2; }
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002520:	789b      	ldrb	r3, [r3, #2]
 8002522:	001a      	movs	r2, r3
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002526:	78db      	ldrb	r3, [r3, #3]
 8002528:	4259      	negs	r1, r3
 800252a:	414b      	adcs	r3, r1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4013      	ands	r3, r2
 8002530:	d002      	beq.n	8002538 <BLDC_MotorCommutation+0x100>
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <BLDC_MotorCommutation+0x16c>)
 8002534:	2202      	movs	r2, #2
 8002536:	801a      	strh	r2, [r3, #0]
	if (PMSM_STATE[VL] & !PMSM_STATE[VH]) GPIOB->BRR = 0x0001;//G
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	001a      	movs	r2, r3
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002540:	789b      	ldrb	r3, [r3, #2]
 8002542:	4259      	negs	r1, r3
 8002544:	414b      	adcs	r3, r1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4013      	ands	r3, r2
 800254a:	d002      	beq.n	8002552 <BLDC_MotorCommutation+0x11a>
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 800254e:	2201      	movs	r2, #1
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
	if (PMSM_STATE[WH] & !PMSM_STATE[WL]) {	toUpdate = CH1; }
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	001a      	movs	r2, r3
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800255a:	795b      	ldrb	r3, [r3, #5]
 800255c:	4259      	negs	r1, r3
 800255e:	414b      	adcs	r3, r1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4013      	ands	r3, r2
 8002564:	d002      	beq.n	800256c <BLDC_MotorCommutation+0x134>
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <BLDC_MotorCommutation+0x16c>)
 8002568:	2201      	movs	r2, #1
 800256a:	801a      	strh	r2, [r3, #0]
	if (PMSM_STATE[WL] & !PMSM_STATE[WH]) GPIOA->BRR = 0x0080;//B
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800256e:	795b      	ldrb	r3, [r3, #5]
 8002570:	001a      	movs	r2, r3
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002574:	791b      	ldrb	r3, [r3, #4]
 8002576:	4259      	negs	r1, r3
 8002578:	414b      	adcs	r3, r1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <BLDC_MotorCommutation+0x150>
 8002580:	2390      	movs	r3, #144	; 0x90
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	08007300 	.word	0x08007300
 8002594:	20000038 	.word	0x20000038
 8002598:	08007330 	.word	0x08007330
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	48000400 	.word	0x48000400
 80025a4:	20000042 	.word	0x20000042

080025a8 <PMSM_generateLookUpTable>:

void PMSM_generateLookUpTable(void){
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
	double temp;
	for(uint16_t i=0;i<LOOKUP_ENTRIES;i++){
 80025ae:	230e      	movs	r3, #14
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	e04e      	b.n	8002656 <PMSM_generateLookUpTable+0xae>
		temp = sin((i*M_PI)/LOOKUP_ENTRIES)*PWM_PERIOD*SPEEDING_FACTOR;
 80025b8:	260e      	movs	r6, #14
 80025ba:	19bb      	adds	r3, r7, r6
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff fd48 	bl	8002054 <__aeabi_i2d>
 80025c4:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <PMSM_generateLookUpTable+0xc8>)
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <PMSM_generateLookUpTable+0xcc>)
 80025c8:	f7fe feca 	bl	8001360 <__aeabi_dmul>
 80025cc:	0002      	movs	r2, r0
 80025ce:	000b      	movs	r3, r1
 80025d0:	0010      	movs	r0, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	2381      	movs	r3, #129	; 0x81
 80025d8:	05db      	lsls	r3, r3, #23
 80025da:	f7fe fac7 	bl	8000b6c <__aeabi_ddiv>
 80025de:	0002      	movs	r2, r0
 80025e0:	000b      	movs	r3, r1
 80025e2:	0010      	movs	r0, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	f003 fe59 	bl	800629c <sin>
 80025ea:	0004      	movs	r4, r0
 80025ec:	000d      	movs	r5, r1
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <PMSM_generateLookUpTable+0xd0>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fd2f 	bl	8002054 <__aeabi_i2d>
 80025f6:	0002      	movs	r2, r0
 80025f8:	000b      	movs	r3, r1
 80025fa:	0020      	movs	r0, r4
 80025fc:	0029      	movs	r1, r5
 80025fe:	f7fe feaf 	bl	8001360 <__aeabi_dmul>
 8002602:	0002      	movs	r2, r0
 8002604:	000b      	movs	r3, r1
 8002606:	0014      	movs	r4, r2
 8002608:	001d      	movs	r5, r3
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <PMSM_generateLookUpTable+0xd4>)
 800260c:	1c18      	adds	r0, r3, #0
 800260e:	f7ff fd51 	bl	80020b4 <__aeabi_f2d>
 8002612:	0002      	movs	r2, r0
 8002614:	000b      	movs	r3, r1
 8002616:	0020      	movs	r0, r4
 8002618:	0029      	movs	r1, r5
 800261a:	f7fe fea1 	bl	8001360 <__aeabi_dmul>
 800261e:	0002      	movs	r2, r0
 8002620:	000b      	movs	r3, r1
 8002622:	603a      	str	r2, [r7, #0]
 8002624:	607b      	str	r3, [r7, #4]
		lookUP[i] = (uint16_t)(temp+0.5);
 8002626:	2200      	movs	r2, #0
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <PMSM_generateLookUpTable+0xd8>)
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	f7fd ff3d 	bl	80004ac <__aeabi_dadd>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	19b9      	adds	r1, r7, r6
 8002638:	880c      	ldrh	r4, [r1, #0]
 800263a:	0010      	movs	r0, r2
 800263c:	0019      	movs	r1, r3
 800263e:	f7fd ff17 	bl	8000470 <__aeabi_d2uiz>
 8002642:	0003      	movs	r3, r0
 8002644:	b299      	uxth	r1, r3
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <PMSM_generateLookUpTable+0xdc>)
 8002648:	0062      	lsls	r2, r4, #1
 800264a:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i=0;i<LOOKUP_ENTRIES;i++){
 800264c:	19bb      	adds	r3, r7, r6
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	19bb      	adds	r3, r7, r6
 8002652:	3201      	adds	r2, #1
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	230e      	movs	r3, #14
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d3a9      	bcc.n	80025b8 <PMSM_generateLookUpTable+0x10>
		//snprintf(stringToUARTF,100,"lookUp[%d] = %d\r\n",i,lookUP[i]);
		//sendToUART(stringToUARTF);
	}
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b005      	add	sp, #20
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	54442d18 	.word	0x54442d18
 8002674:	400921fb 	.word	0x400921fb
 8002678:	00000b44 	.word	0x00000b44
 800267c:	3f4ccccd 	.word	0x3f4ccccd
 8002680:	3fe00000 	.word	0x3fe00000
 8002684:	20000044 	.word	0x20000044

08002688 <PMSM_SetPWMWidthToYGB>:
	if(toUpdatePrev == 0) return 0;
	if(toUpdatePrev == toUpdate) return (LOOKUP_ENTRIES/2);
	return 0;
}
  
void PMSM_SetPWMWidthToYGB(uint8_t val){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	0002      	movs	r2, r0
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	701a      	strb	r2, [r3, #0]
		if(toUpdate == CH1) TIM1->CCR1=val;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <PMSM_SetPWMWidthToYGB+0x50>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d104      	bne.n	80026a8 <PMSM_SetPWMWidthToYGB+0x20>
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <PMSM_SetPWMWidthToYGB+0x54>)
 80026a0:	1dfa      	adds	r2, r7, #7
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
		else if(toUpdate == CH2) TIM1->CCR2=val;
		else if(toUpdate == CH3) TIM1->CCR3=val;
}
 80026a6:	e012      	b.n	80026ce <PMSM_SetPWMWidthToYGB+0x46>
		else if(toUpdate == CH2) TIM1->CCR2=val;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <PMSM_SetPWMWidthToYGB+0x50>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d104      	bne.n	80026bc <PMSM_SetPWMWidthToYGB+0x34>
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <PMSM_SetPWMWidthToYGB+0x54>)
 80026b4:	1dfa      	adds	r2, r7, #7
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026ba:	e008      	b.n	80026ce <PMSM_SetPWMWidthToYGB+0x46>
		else if(toUpdate == CH3) TIM1->CCR3=val;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <PMSM_SetPWMWidthToYGB+0x50>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d103      	bne.n	80026ce <PMSM_SetPWMWidthToYGB+0x46>
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <PMSM_SetPWMWidthToYGB+0x54>)
 80026c8:	1dfa      	adds	r2, r7, #7
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	20000042 	.word	0x20000042
 80026dc:	40012c00 	.word	0x40012c00

080026e0 <PMSM_updatePMSMPWMVariable>:

void PMSM_updatePMSMPWMVariable(uint16_t PWM){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	0002      	movs	r2, r0
 80026e8:	1dbb      	adds	r3, r7, #6
 80026ea:	801a      	strh	r2, [r3, #0]
	PMSM_PWM=PWM;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <PMSM_updatePMSMPWMVariable+0x1c>)
 80026ee:	1dba      	adds	r2, r7, #6
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	801a      	strh	r2, [r3, #0]
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000040 	.word	0x20000040

08002700 <isReverseButtonPressed>:


bool isReverseButtonPressed(void){
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	return (GPIO_READ_PIN(punchF_R_GPIO_Port, punchF_R_Pin) == 0U);
 8002704:	2390      	movs	r3, #144	; 0x90
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	4013      	ands	r3, r2
 8002710:	425a      	negs	r2, r3
 8002712:	4153      	adcs	r3, r2
 8002714:	b2db      	uxtb	r3, r3
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	0018      	movs	r0, r3
 8002726:	230c      	movs	r3, #12
 8002728:	001a      	movs	r2, r3
 800272a:	2100      	movs	r1, #0
 800272c:	f003 fd80 	bl	8006230 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <MX_ADC_Init+0x130>)
 8002732:	4a47      	ldr	r2, [pc, #284]	; (8002850 <MX_ADC_Init+0x134>)
 8002734:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <MX_ADC_Init+0x130>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	0612      	lsls	r2, r2, #24
 800273c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <MX_ADC_Init+0x130>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <MX_ADC_Init+0x130>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <MX_ADC_Init+0x130>)
 800274c:	2201      	movs	r2, #1
 800274e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002750:	4b3e      	ldr	r3, [pc, #248]	; (800284c <MX_ADC_Init+0x130>)
 8002752:	2208      	movs	r2, #8
 8002754:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <MX_ADC_Init+0x130>)
 8002758:	2200      	movs	r2, #0
 800275a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <MX_ADC_Init+0x130>)
 800275e:	2200      	movs	r2, #0
 8002760:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002762:	4b3a      	ldr	r3, [pc, #232]	; (800284c <MX_ADC_Init+0x130>)
 8002764:	2201      	movs	r2, #1
 8002766:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <MX_ADC_Init+0x130>)
 800276a:	2200      	movs	r2, #0
 800276c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <MX_ADC_Init+0x130>)
 8002770:	22c2      	movs	r2, #194	; 0xc2
 8002772:	32ff      	adds	r2, #255	; 0xff
 8002774:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <MX_ADC_Init+0x130>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800277c:	4b33      	ldr	r3, [pc, #204]	; (800284c <MX_ADC_Init+0x130>)
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <MX_ADC_Init+0x130>)
 8002786:	2201      	movs	r2, #1
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <MX_ADC_Init+0x130>)
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fd43 	bl	8003218 <HAL_ADC_Init>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002796:	f000 fa52 	bl	8002c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0152      	lsls	r2, r2, #5
 80027a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2202      	movs	r2, #2
 80027ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027ae:	1d3a      	adds	r2, r7, #4
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <MX_ADC_Init+0x130>)
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 ff09 	bl	80035cc <HAL_ADC_ConfigChannel>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80027be:	f000 fa3e 	bl	8002c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027c8:	1d3a      	adds	r2, r7, #4
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <MX_ADC_Init+0x130>)
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 fefc 	bl	80035cc <HAL_ADC_ConfigChannel>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d001      	beq.n	80027dc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80027d8:	f000 fa31 	bl	8002c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2204      	movs	r2, #4
 80027e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027e2:	1d3a      	adds	r2, r7, #4
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <MX_ADC_Init+0x130>)
 80027e6:	0011      	movs	r1, r2
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 feef 	bl	80035cc <HAL_ADC_ConfigChannel>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d001      	beq.n	80027f6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80027f2:	f000 fa24 	bl	8002c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2205      	movs	r2, #5
 80027fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027fc:	1d3a      	adds	r2, r7, #4
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <MX_ADC_Init+0x130>)
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fee2 	bl	80035cc <HAL_ADC_ConfigChannel>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800280c:	f000 fa17 	bl	8002c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2210      	movs	r2, #16
 8002814:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002816:	1d3a      	adds	r2, r7, #4
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_ADC_Init+0x130>)
 800281a:	0011      	movs	r1, r2
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fed5 	bl	80035cc <HAL_ADC_ConfigChannel>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8002826:	f000 fa0a 	bl	8002c3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2211      	movs	r2, #17
 800282e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002830:	1d3a      	adds	r2, r7, #4
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_ADC_Init+0x130>)
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fec8 	bl	80035cc <HAL_ADC_ConfigChannel>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8002840:	f000 f9fd 	bl	8002c3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b004      	add	sp, #16
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000444 	.word	0x20000444
 8002850:	40012400 	.word	0x40012400

08002854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b08b      	sub	sp, #44	; 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	2414      	movs	r4, #20
 800285e:	193b      	adds	r3, r7, r4
 8002860:	0018      	movs	r0, r3
 8002862:	2314      	movs	r3, #20
 8002864:	001a      	movs	r2, r3
 8002866:	2100      	movs	r1, #0
 8002868:	f003 fce2 	bl	8006230 <memset>
  if(adcHandle->Instance==ADC1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_ADC_MspInit+0xd4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d153      	bne.n	800291e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_ADC_MspInit+0xd8>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0089      	lsls	r1, r1, #2
 8002880:	430a      	orrs	r2, r1
 8002882:	619a      	str	r2, [r3, #24]
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0289      	lsls	r1, r1, #10
 800289c:	430a      	orrs	r2, r1
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_ADC_MspInit+0xd8>)
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = punchThrottlePin_Pin|punchBattVoltagePin_Pin|punchCurrentPin_Pin|punchHeatSinkTemp_Pin;
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	2233      	movs	r2, #51	; 0x33
 80028b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2203      	movs	r2, #3
 80028b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	193a      	adds	r2, r7, r4
 80028c2:	2390      	movs	r3, #144	; 0x90
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f001 fb9b 	bl	8004004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028d2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0052      	lsls	r2, r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	00d2      	lsls	r2, r2, #3
 80028f4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028f8:	2220      	movs	r2, #32
 80028fa:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 8002904:	0018      	movs	r0, r3
 8002906:	f001 f9e5 	bl	8003cd4 <HAL_DMA_Init>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800290e:	f000 f996 	bl	8002c3e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b00b      	add	sp, #44	; 0x2c
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40012400 	.word	0x40012400
 800292c:	40021000 	.word	0x40021000
 8002930:	20000484 	.word	0x20000484
 8002934:	40020008 	.word	0x40020008

08002938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_DMA_Init+0x38>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_DMA_Init+0x38>)
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_DMA_Init+0x38>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2009      	movs	r0, #9
 800295c:	f001 f988 	bl	8003c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002960:	2009      	movs	r0, #9
 8002962:	f001 f99a 	bl	8003c9a <HAL_NVIC_EnableIRQ>

}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000

08002974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297a:	240c      	movs	r4, #12
 800297c:	193b      	adds	r3, r7, r4
 800297e:	0018      	movs	r0, r3
 8002980:	2314      	movs	r3, #20
 8002982:	001a      	movs	r2, r3
 8002984:	2100      	movs	r1, #0
 8002986:	f003 fc53 	bl	8006230 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800298a:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <MX_GPIO_Init+0x120>)
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <MX_GPIO_Init+0x120>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	03c9      	lsls	r1, r1, #15
 8002994:	430a      	orrs	r2, r1
 8002996:	615a      	str	r2, [r3, #20]
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <MX_GPIO_Init+0x120>)
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	03db      	lsls	r3, r3, #15
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <MX_GPIO_Init+0x120>)
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	4b3a      	ldr	r3, [pc, #232]	; (8002a94 <MX_GPIO_Init+0x120>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	0289      	lsls	r1, r1, #10
 80029b0:	430a      	orrs	r2, r1
 80029b2:	615a      	str	r2, [r3, #20]
 80029b4:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <MX_GPIO_Init+0x120>)
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <MX_GPIO_Init+0x120>)
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <MX_GPIO_Init+0x120>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	02c9      	lsls	r1, r1, #11
 80029cc:	430a      	orrs	r2, r1
 80029ce:	615a      	str	r2, [r3, #20]
 80029d0:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <MX_GPIO_Init+0x120>)
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	02db      	lsls	r3, r3, #11
 80029d8:	4013      	ands	r3, r2
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(punchLedB_GPIO_Port, punchLedB_Pin, GPIO_PIN_RESET);
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	0159      	lsls	r1, r3, #5
 80029e2:	2390      	movs	r3, #144	; 0x90
 80029e4:	05db      	lsls	r3, r3, #23
 80029e6:	2200      	movs	r2, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f001 fc7b 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, punchLedY_Pin|punchLedG_Pin, GPIO_PIN_RESET);
 80029ee:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <MX_GPIO_Init+0x124>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	2118      	movs	r1, #24
 80029f4:	0018      	movs	r0, r3
 80029f6:	f001 fc75 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = punchLedB_Pin;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	0152      	lsls	r2, r2, #5
 8002a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2201      	movs	r2, #1
 8002a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(punchLedB_GPIO_Port, &GPIO_InitStruct);
 8002a14:	193a      	adds	r2, r7, r4
 8002a16:	2390      	movs	r3, #144	; 0x90
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 faf1 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = punchF_R_Pin;
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	0212      	lsls	r2, r2, #8
 8002a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(punchF_R_GPIO_Port, &GPIO_InitStruct);
 8002a36:	193a      	adds	r2, r7, r4
 8002a38:	2390      	movs	r3, #144	; 0x90
 8002a3a:	05db      	lsls	r3, r3, #23
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f001 fae0 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = punchLedY_Pin|punchLedG_Pin;
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	2218      	movs	r2, #24
 8002a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <MX_GPIO_Init+0x124>)
 8002a60:	0019      	movs	r1, r3
 8002a62:	0010      	movs	r0, r2
 8002a64:	f001 face 	bl	8004004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = punchHSB_Pin|punchHSG_Pin|punchHSY_Pin;
 8002a68:	0021      	movs	r1, r4
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	22e0      	movs	r2, #224	; 0xe0
 8002a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2288      	movs	r2, #136	; 0x88
 8002a74:	0352      	lsls	r2, r2, #13
 8002a76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <MX_GPIO_Init+0x124>)
 8002a82:	0019      	movs	r1, r3
 8002a84:	0010      	movs	r0, r2
 8002a86:	f001 fabd 	bl	8004004 <HAL_GPIO_Init>

}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b009      	add	sp, #36	; 0x24
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40021000 	.word	0x40021000
 8002a98:	48000400 	.word	0x48000400

08002a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aa0:	f000 fb56 	bl	8003150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aa4:	f000 f874 	bl	8002b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa8:	f7ff ff64 	bl	8002974 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aac:	f7ff ff44 	bl	8002938 <MX_DMA_Init>
  MX_ADC_Init();
 8002ab0:	f7ff fe34 	bl	800271c <MX_ADC_Init>
  MX_TIM1_Init();
 8002ab4:	f000 f916 	bl	8002ce4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8002ab8:	f000 f9de 	bl	8002e78 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8002abc:	f000 faa2 	bl	8003004 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc);
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <main+0xe0>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 ff80 	bl	80039c8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc,(uint32_t*)&ADCBuffer,6);
 8002ac8:	492d      	ldr	r1, [pc, #180]	; (8002b80 <main+0xe4>)
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <main+0xe0>)
 8002acc:	2206      	movs	r2, #6
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 fce2 	bl	8003498 <HAL_ADC_Start_DMA>

	PMSM_Init();
 8002ad4:	f7ff fbb8 	bl	8002248 <PMSM_Init>
	initController();
 8002ad8:	f7ff fb92 	bl	8002200 <initController>

	  //sendToUART("HELLO\r\n");
	  //snprintf(stringToUART,100,"ADCBuffer=%d\r\n",ADCBuffer[0]);
	  //sendToUART(stringToUART);

	  if ((ADCBuffer[0] & 0xFFF0) > getThrottleStartValue()) {
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <main+0xe4>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <main+0xe8>)
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	0014      	movs	r4, r2
 8002ae8:	f7ff fbb9 	bl	800225e <getThrottleStartValue>
 8002aec:	0003      	movs	r3, r0
 8002aee:	429c      	cmp	r4, r3
 8002af0:	dd35      	ble.n	8002b5e <main+0xc2>
		  // If Motor Is not running
		  if (!isMotorRunning()) {
 8002af2:	f7ff fc6f 	bl	80023d4 <isMotorRunning>
 8002af6:	0003      	movs	r3, r0
 8002af8:	001a      	movs	r2, r3
 8002afa:	2301      	movs	r3, #1
 8002afc:	4053      	eors	r3, r2
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d014      	beq.n	8002b2e <main+0x92>
			  // Start motor
			  // Check Reverse button
			  if (isReverseButtonPressed()) {
 8002b04:	f7ff fdfc 	bl	8002700 <isReverseButtonPressed>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d003      	beq.n	8002b14 <main+0x78>
				  // Reverse
				  setMotorSpinDirection(PMSM_CCW);
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f7ff fc37 	bl	8002380 <setMotorSpinDirection>
 8002b12:	e002      	b.n	8002b1a <main+0x7e>
			  } else {
				  // Forward
				  setMotorSpinDirection(PMSM_CW);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff fc33 	bl	8002380 <setMotorSpinDirection>
			  }
			  BLDC_MotorCommutation(getRotorSector());
 8002b1a:	f7ff fba7 	bl	800226c <getRotorSector>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7ff fc88 	bl	8002438 <BLDC_MotorCommutation>
			  setMotorRunningState(true);
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f7ff fc43 	bl	80023b4 <setMotorRunningState>
		  }

		  PMSM_updatePMSMPWMVariable(PMSM_ADCToPWM(ADCBuffer[0] & 0xFFF0));
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <main+0xe4>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	220f      	movs	r2, #15
 8002b34:	4393      	bics	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff fbf1 	bl	8002320 <PMSM_ADCToPWM>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff fdcd 	bl	80026e0 <PMSM_updatePMSMPWMVariable>
		  __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);//start timer 1 interrupt
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <main+0xec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <main+0xec>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	430a      	orrs	r2, r1
 8002b54:	60da      	str	r2, [r3, #12]
#ifdef ENABLE_UART_DEBUG
		  snprintf(stringToUART,100,"PMSM_PWM=%d\r\n",PMSM_ADCToPWM(ADCBuffer[0] & 0xFFF8));
		  //snprintf(stringToUART,100,"GT=%d CNT=%d\r\n",globalTime,counter);
		  sendToUART(stringToUART);
#endif
		  GPIOB->BSRR = 0x0010;//set green LED
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <main+0xf0>)
 8002b58:	2210      	movs	r2, #16
 8002b5a:	619a      	str	r2, [r3, #24]
 8002b5c:	e7be      	b.n	8002adc <main+0x40>
	  }else {
		  __HAL_TIM_DISABLE_IT(&htim1,TIM_IT_UPDATE);//stop timer 1 interrupt
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <main+0xec>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <main+0xec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	438a      	bics	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
		  PMSM_SetPWMWidthToYGB(0);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7ff fd8a 	bl	8002688 <PMSM_SetPWMWidthToYGB>
		  GPIOB->BRR = 0x0010;//reset green LED
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <main+0xf0>)
 8002b76:	2210      	movs	r2, #16
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
	  if ((ADCBuffer[0] & 0xFFF0) > getThrottleStartValue()) {
 8002b7a:	e7af      	b.n	8002adc <main+0x40>
 8002b7c:	20000444 	.word	0x20000444
 8002b80:	200004c8 	.word	0x200004c8
 8002b84:	0000fff0 	.word	0x0000fff0
 8002b88:	200004d4 	.word	0x200004d4
 8002b8c:	48000400 	.word	0x48000400

08002b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b095      	sub	sp, #84	; 0x54
 8002b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b96:	2420      	movs	r4, #32
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	2330      	movs	r3, #48	; 0x30
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f003 fb45 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	0018      	movs	r0, r3
 8002bac:	2310      	movs	r3, #16
 8002bae:	001a      	movs	r2, r3
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f003 fb3d 	bl	8006230 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb6:	003b      	movs	r3, r7
 8002bb8:	0018      	movs	r0, r3
 8002bba:	2310      	movs	r3, #16
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f003 fb36 	bl	8006230 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bc4:	0021      	movs	r1, r4
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2201      	movs	r2, #1
 8002bd0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	0018      	movs	r0, r3
 8002be2:	f001 fb9d 	bl	8004320 <HAL_RCC_OscConfig>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002bea:	f000 f828 	bl	8002c3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bee:	2110      	movs	r1, #16
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	2200      	movs	r2, #0
 8002c06:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f001 fea1 	bl	8004954 <HAL_RCC_ClockConfig>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d001      	beq.n	8002c1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002c16:	f000 f812 	bl	8002c3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c1a:	003b      	movs	r3, r7
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c20:	003b      	movs	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c26:	003b      	movs	r3, r7
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 ffd7 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d001      	beq.n	8002c36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c32:	f000 f804 	bl	8002c3e <Error_Handler>
  }
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b015      	add	sp, #84	; 0x54
 8002c3c:	bd90      	pop	{r4, r7, pc}

08002c3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c42:	b672      	cpsid	i
}
 8002c44:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <Error_Handler+0x8>

08002c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_MspInit+0x44>)
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_MspInit+0x44>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_MspInit+0x44>)
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_MspInit+0x44>)
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_MspInit+0x44>)
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	0549      	lsls	r1, r1, #21
 8002c70:	430a      	orrs	r2, r1
 8002c72:	61da      	str	r2, [r3, #28]
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_MspInit+0x44>)
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	055b      	lsls	r3, r3, #21
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b002      	add	sp, #8
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40021000 	.word	0x40021000

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <NMI_Handler+0x4>

08002c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <HardFault_Handler+0x4>

08002c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 fa94 	bl	80031e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <DMA1_Channel1_IRQHandler+0x14>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f001 f8b2 	bl	8003e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000484 	.word	0x20000484

08002cd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b096      	sub	sp, #88	; 0x58
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cea:	2348      	movs	r3, #72	; 0x48
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	0018      	movs	r0, r3
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f003 fa9b 	bl	8006230 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfa:	2340      	movs	r3, #64	; 0x40
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	2308      	movs	r3, #8
 8002d02:	001a      	movs	r2, r3
 8002d04:	2100      	movs	r1, #0
 8002d06:	f003 fa93 	bl	8006230 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0a:	2324      	movs	r3, #36	; 0x24
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	0018      	movs	r0, r3
 8002d10:	231c      	movs	r3, #28
 8002d12:	001a      	movs	r2, r3
 8002d14:	2100      	movs	r1, #0
 8002d16:	f003 fa8b 	bl	8006230 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2320      	movs	r3, #32
 8002d20:	001a      	movs	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	f003 fa84 	bl	8006230 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d28:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d2a:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <MX_TIM1_Init+0x190>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d2e:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d40:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4c:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d54:	0018      	movs	r0, r3
 8002d56:	f002 f80f 	bl	8004d78 <HAL_TIM_Base_Init>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002d5e:	f7ff ff6e 	bl	8002c3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d62:	2148      	movs	r1, #72	; 0x48
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	0152      	lsls	r2, r2, #5
 8002d6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d6c:	187a      	adds	r2, r7, r1
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d70:	0011      	movs	r1, r2
 8002d72:	0018      	movs	r0, r3
 8002d74:	f002 fa14 	bl	80051a0 <HAL_TIM_ConfigClockSource>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002d7c:	f7ff ff5f 	bl	8002c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d80:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002d82:	0018      	movs	r0, r3
 8002d84:	f002 f848 	bl	8004e18 <HAL_TIM_PWM_Init>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002d8c:	f7ff ff57 	bl	8002c3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d9e:	187a      	adds	r2, r7, r1
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002da2:	0011      	movs	r1, r2
 8002da4:	0018      	movs	r0, r3
 8002da6:	f002 fde7 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002dae:	f7ff ff46 	bl	8002c3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db2:	2124      	movs	r1, #36	; 0x24
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2260      	movs	r2, #96	; 0x60
 8002db8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2200      	movs	r2, #0
 8002dca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dde:	1879      	adds	r1, r7, r1
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	0018      	movs	r0, r3
 8002de6:	f002 f915 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002dee:	f7ff ff26 	bl	8002c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002df2:	2324      	movs	r3, #36	; 0x24
 8002df4:	18f9      	adds	r1, r7, r3
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002df8:	2204      	movs	r2, #4
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f002 f90a 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002e04:	f7ff ff1b 	bl	8002c3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e08:	2324      	movs	r3, #36	; 0x24
 8002e0a:	18f9      	adds	r1, r7, r3
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002e0e:	2208      	movs	r2, #8
 8002e10:	0018      	movs	r0, r3
 8002e12:	f002 f8ff 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002e1a:	f7ff ff10 	bl	8002c3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	0152      	lsls	r2, r2, #5
 8002e3c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	01d2      	lsls	r2, r2, #7
 8002e4a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e4c:	1d3a      	adds	r2, r7, #4
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f002 fde2 	bl	8005a1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8002e5c:	f7ff feef 	bl	8002c3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <MX_TIM1_Init+0x18c>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f88e 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b016      	add	sp, #88	; 0x58
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200004d4 	.word	0x200004d4
 8002e74:	40012c00 	.word	0x40012c00

08002e78 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <MX_TIM14_Init+0x44>)
 8002e80:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <MX_TIM14_Init+0x40>)
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f001 ff68 	bl	8004d78 <HAL_TIM_Base_Init>
 8002ea8:	1e03      	subs	r3, r0, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002eac:	f7ff fec7 	bl	8002c3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	2000051c 	.word	0x2000051c
 8002ebc:	40002000 	.word	0x40002000

08002ec0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b08b      	sub	sp, #44	; 0x2c
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	2414      	movs	r4, #20
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	0018      	movs	r0, r3
 8002ece:	2314      	movs	r3, #20
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f003 f9ac 	bl	8006230 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <HAL_TIM_Base_MspInit+0xb8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d133      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0109      	lsls	r1, r1, #4
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0289      	lsls	r1, r1, #10
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	615a      	str	r2, [r3, #20]
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = punchBreak_Pin;
 8002f1a:	0021      	movs	r1, r4
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2202      	movs	r2, #2
 8002f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2202      	movs	r2, #2
 8002f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(punchBreak_GPIO_Port, &GPIO_InitStruct);
 8002f3a:	187a      	adds	r2, r7, r1
 8002f3c:	2390      	movs	r3, #144	; 0x90
 8002f3e:	05db      	lsls	r3, r3, #23
 8002f40:	0011      	movs	r1, r2
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 f85e 	bl	8004004 <HAL_GPIO_Init>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002f48:	e012      	b.n	8002f70 <HAL_TIM_Base_MspInit+0xb0>
  else if(tim_baseHandle->Instance==TIM14)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <HAL_TIM_Base_MspInit+0xc0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10d      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	0049      	lsls	r1, r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	61da      	str	r2, [r3, #28]
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_TIM_Base_MspInit+0xbc>)
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b00b      	add	sp, #44	; 0x2c
 8002f76:	bd90      	pop	{r4, r7, pc}
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40002000 	.word	0x40002000

08002f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	240c      	movs	r4, #12
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	0018      	movs	r0, r3
 8002f92:	2314      	movs	r3, #20
 8002f94:	001a      	movs	r2, r3
 8002f96:	2100      	movs	r1, #0
 8002f98:	f003 f94a 	bl	8006230 <memset>
  if(timHandle->Instance==TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_TIM_MspPostInit+0x78>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d125      	bne.n	8002ff2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_TIM_MspPostInit+0x7c>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_TIM_MspPostInit+0x7c>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0289      	lsls	r1, r1, #10
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_TIM_MspPostInit+0x7c>)
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = punchBH_Pin|punchGH_Pin|punchYH_Pin;
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	22e0      	movs	r2, #224	; 0xe0
 8002fc6:	00d2      	lsls	r2, r2, #3
 8002fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	0021      	movs	r1, r4
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2202      	movs	r2, #2
 8002fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	187a      	adds	r2, r7, r1
 8002fe6:	2390      	movs	r3, #144	; 0x90
 8002fe8:	05db      	lsls	r3, r3, #23
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f001 f809 	bl	8004004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b009      	add	sp, #36	; 0x24
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40021000 	.word	0x40021000

08003004 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <MX_USART1_UART_Init+0x58>)
 800300a:	4a15      	ldr	r2, [pc, #84]	; (8003060 <MX_USART1_UART_Init+0x5c>)
 800300c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003010:	22e1      	movs	r2, #225	; 0xe1
 8003012:	0252      	lsls	r2, r2, #9
 8003014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <MX_USART1_UART_Init+0x58>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MX_USART1_UART_Init+0x58>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <MX_USART1_UART_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <MX_USART1_UART_Init+0x58>)
 8003048:	0018      	movs	r0, r3
 800304a:	f002 fd45 	bl	8005ad8 <HAL_UART_Init>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003052:	f7ff fdf4 	bl	8002c3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000564 	.word	0x20000564
 8003060:	40013800 	.word	0x40013800

08003064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	2414      	movs	r4, #20
 800306e:	193b      	adds	r3, r7, r4
 8003070:	0018      	movs	r0, r3
 8003072:	2314      	movs	r3, #20
 8003074:	001a      	movs	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	f003 f8da 	bl	8006230 <memset>
  if(uartHandle->Instance==USART1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_UART_MspInit+0x90>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d132      	bne.n	80030ec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_UART_MspInit+0x94>)
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_UART_MspInit+0x94>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	01c9      	lsls	r1, r1, #7
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_UART_MspInit+0x94>)
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_UART_MspInit+0x94>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_UART_MspInit+0x94>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0289      	lsls	r1, r1, #10
 80030ac:	430a      	orrs	r2, r1
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_UART_MspInit+0x94>)
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030be:	0021      	movs	r1, r4
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	220c      	movs	r2, #12
 80030c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2202      	movs	r2, #2
 80030ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2203      	movs	r2, #3
 80030d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2201      	movs	r2, #1
 80030dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	187a      	adds	r2, r7, r1
 80030e0:	2390      	movs	r3, #144	; 0x90
 80030e2:	05db      	lsls	r3, r3, #23
 80030e4:	0011      	movs	r1, r2
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 ff8c 	bl	8004004 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b00b      	add	sp, #44	; 0x2c
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40021000 	.word	0x40021000

080030fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003100:	f7ff fdea 	bl	8002cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <LoopForever+0x6>)
  ldr r1, =_edata
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <LoopForever+0xe>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800310c:	e002      	b.n	8003114 <LoopCopyDataInit>

0800310e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003112:	3304      	adds	r3, #4

08003114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003118:	d3f9      	bcc.n	800310e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800311c:	4c0a      	ldr	r4, [pc, #40]	; (8003148 <LoopForever+0x16>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003120:	e001      	b.n	8003126 <LoopFillZerobss>

08003122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003124:	3204      	adds	r2, #4

08003126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003128:	d3fb      	bcc.n	8003122 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800312a:	f003 f889 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800312e:	f7ff fcb5 	bl	8002a9c <main>

08003132 <LoopForever>:

LoopForever:
    b LoopForever
 8003132:	e7fe      	b.n	8003132 <LoopForever>
  ldr   r0, =_estack
 8003134:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800313c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003140:	08007578 	.word	0x08007578
  ldr r2, =_sbss
 8003144:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003148:	200005f0 	.word	0x200005f0

0800314c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC1_IRQHandler>
	...

08003150 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_Init+0x24>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_Init+0x24>)
 800315a:	2110      	movs	r1, #16
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003160:	2003      	movs	r0, #3
 8003162:	f000 f809 	bl	8003178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003166:	f7ff fd6f 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40022000 	.word	0x40022000

08003178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_InitTick+0x5c>)
 8003182:	681c      	ldr	r4, [r3, #0]
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_InitTick+0x60>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	0019      	movs	r1, r3
 800318a:	23fa      	movs	r3, #250	; 0xfa
 800318c:	0098      	lsls	r0, r3, #2
 800318e:	f7fc ffbb 	bl	8000108 <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	0019      	movs	r1, r3
 8003196:	0020      	movs	r0, r4
 8003198:	f7fc ffb6 	bl	8000108 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fd8b 	bl	8003cba <HAL_SYSTICK_Config>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e00f      	b.n	80031cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d80b      	bhi.n	80031ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	2301      	movs	r3, #1
 80031b6:	425b      	negs	r3, r3
 80031b8:	2200      	movs	r2, #0
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fd58 	bl	8003c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_InitTick+0x64>)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b003      	add	sp, #12
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000008 	.word	0x20000008
 80031dc:	20000004 	.word	0x20000004

080031e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_IncTick+0x1c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	001a      	movs	r2, r3
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_IncTick+0x20>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	18d2      	adds	r2, r2, r3
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_IncTick+0x20>)
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	20000008 	.word	0x20000008
 8003200:	200005ec 	.word	0x200005ec

08003204 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  return uwTick;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_GetTick+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	200005ec 	.word	0x200005ec

08003218 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003220:	230f      	movs	r3, #15
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e125      	b.n	8003482 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2234      	movs	r2, #52	; 0x34
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f7ff fb00 	bl	8002854 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	2210      	movs	r2, #16
 800325a:	4013      	ands	r3, r2
 800325c:	d000      	beq.n	8003260 <HAL_ADC_Init+0x48>
 800325e:	e103      	b.n	8003468 <HAL_ADC_Init+0x250>
 8003260:	230f      	movs	r3, #15
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d000      	beq.n	800326c <HAL_ADC_Init+0x54>
 800326a:	e0fd      	b.n	8003468 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2204      	movs	r2, #4
 8003274:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003276:	d000      	beq.n	800327a <HAL_ADC_Init+0x62>
 8003278:	e0f6      	b.n	8003468 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	4a83      	ldr	r2, [pc, #524]	; (800348c <HAL_ADC_Init+0x274>)
 8003280:	4013      	ands	r3, r2
 8003282:	2202      	movs	r2, #2
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2203      	movs	r2, #3
 8003292:	4013      	ands	r3, r2
 8003294:	2b01      	cmp	r3, #1
 8003296:	d112      	bne.n	80032be <HAL_ADC_Init+0xa6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d009      	beq.n	80032ba <HAL_ADC_Init+0xa2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	401a      	ands	r2, r3
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d101      	bne.n	80032be <HAL_ADC_Init+0xa6>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_ADC_Init+0xa8>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2218      	movs	r2, #24
 80032cc:	4393      	bics	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	0899      	lsrs	r1, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4964      	ldr	r1, [pc, #400]	; (8003490 <HAL_ADC_Init+0x278>)
 80032fe:	400a      	ands	r2, r1
 8003300:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7e1b      	ldrb	r3, [r3, #24]
 8003306:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e5b      	ldrb	r3, [r3, #25]
 800330c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800330e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e9b      	ldrb	r3, [r3, #26]
 8003314:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003316:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	2b01      	cmp	r3, #1
 800331e:	d002      	beq.n	8003326 <HAL_ADC_Init+0x10e>
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	e000      	b.n	8003328 <HAL_ADC_Init+0x110>
 8003326:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003328:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800332e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d101      	bne.n	800333c <HAL_ADC_Init+0x124>
 8003338:	2304      	movs	r3, #4
 800333a:	e000      	b.n	800333e <HAL_ADC_Init+0x126>
 800333c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800333e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2124      	movs	r1, #36	; 0x24
 8003344:	5c5b      	ldrb	r3, [r3, r1]
 8003346:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003348:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4313      	orrs	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7edb      	ldrb	r3, [r3, #27]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d115      	bne.n	8003384 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7e9b      	ldrb	r3, [r3, #26]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0252      	lsls	r2, r2, #9
 8003366:	4313      	orrs	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	e00b      	b.n	8003384 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	2220      	movs	r2, #32
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	2201      	movs	r2, #1
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	23c2      	movs	r3, #194	; 0xc2
 800338a:	33ff      	adds	r3, #255	; 0xff
 800338c:	429a      	cmp	r2, r3
 800338e:	d007      	beq.n	80033a0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003398:	4313      	orrs	r3, r2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68d9      	ldr	r1, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	055b      	lsls	r3, r3, #21
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d01b      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d017      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d013      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d00f      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d00b      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d007      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d003      	beq.n	80033f4 <HAL_ADC_Init+0x1dc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	d112      	bne.n	800341a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2107      	movs	r1, #7
 8003400:	438a      	bics	r2, r1
 8003402:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	2207      	movs	r2, #7
 8003410:	401a      	ands	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_ADC_Init+0x27c>)
 8003422:	4013      	ands	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d10b      	bne.n	8003442 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	2203      	movs	r2, #3
 8003436:	4393      	bics	r3, r2
 8003438:	2201      	movs	r2, #1
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003440:	e01c      	b.n	800347c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	2212      	movs	r2, #18
 8003448:	4393      	bics	r3, r2
 800344a:	2210      	movs	r2, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2201      	movs	r2, #1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800345e:	230f      	movs	r3, #15
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003466:	e009      	b.n	800347c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	2210      	movs	r2, #16
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003474:	230f      	movs	r3, #15
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	fffffefd 	.word	0xfffffefd
 8003490:	fffe0219 	.word	0xfffe0219
 8003494:	833fffe7 	.word	0x833fffe7

08003498 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a4:	2317      	movs	r3, #23
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2204      	movs	r2, #4
 80034b4:	4013      	ands	r3, r2
 80034b6:	d15e      	bne.n	8003576 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2234      	movs	r2, #52	; 0x34
 80034bc:	5c9b      	ldrb	r3, [r3, r2]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_Start_DMA+0x2e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e05e      	b.n	8003584 <HAL_ADC_Start_DMA+0xec>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2234      	movs	r2, #52	; 0x34
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	7e5b      	ldrb	r3, [r3, #25]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d007      	beq.n	80034e6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80034d6:	2317      	movs	r3, #23
 80034d8:	18fc      	adds	r4, r7, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	0018      	movs	r0, r3
 80034de:	f000 f96b 	bl	80037b8 <ADC_Enable>
 80034e2:	0003      	movs	r3, r0
 80034e4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034e6:	2317      	movs	r3, #23
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d146      	bne.n	800357e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	4a25      	ldr	r2, [pc, #148]	; (800358c <HAL_ADC_Start_DMA+0xf4>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	0052      	lsls	r2, r2, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2234      	movs	r2, #52	; 0x34
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_ADC_Start_DMA+0xf8>)
 8003516:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_ADC_Start_DMA+0xfc>)
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_ADC_Start_DMA+0x100>)
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	221c      	movs	r2, #28
 800352e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2110      	movs	r1, #16
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3340      	adds	r3, #64	; 0x40
 800355a:	0019      	movs	r1, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f000 fc00 	bl	8003d64 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2104      	movs	r1, #4
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e003      	b.n	800357e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003576:	2317      	movs	r3, #23
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800357e:	2317      	movs	r3, #23
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	781b      	ldrb	r3, [r3, #0]
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b007      	add	sp, #28
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	fffff0fe 	.word	0xfffff0fe
 8003590:	080038c1 	.word	0x080038c1
 8003594:	08003975 	.word	0x08003975
 8003598:	08003993 	.word	0x08003993

0800359c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d6:	230f      	movs	r3, #15
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	055b      	lsls	r3, r3, #21
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d011      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x46>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00d      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x46>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d009      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x46>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	2b03      	cmp	r3, #3
 8003604:	d005      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x46>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	2b04      	cmp	r3, #4
 800360c:	d001      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x46>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2234      	movs	r2, #52	; 0x34
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x54>
 800361c:	2302      	movs	r3, #2
 800361e:	e0bb      	b.n	8003798 <HAL_ADC_ConfigChannel+0x1cc>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2234      	movs	r2, #52	; 0x34
 8003624:	2101      	movs	r1, #1
 8003626:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2204      	movs	r2, #4
 8003630:	4013      	ands	r3, r2
 8003632:	d000      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x6a>
 8003634:	e09f      	b.n	8003776 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <HAL_ADC_ConfigChannel+0x1d4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x76>
 8003640:	e077      	b.n	8003732 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	429a      	cmp	r2, r3
 8003662:	d037      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d033      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2b02      	cmp	r3, #2
 8003672:	d02f      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	2b03      	cmp	r3, #3
 800367a:	d02b      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	2b04      	cmp	r3, #4
 8003682:	d027      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	2b05      	cmp	r3, #5
 800368a:	d023      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2b06      	cmp	r3, #6
 8003692:	d01f      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	2b07      	cmp	r3, #7
 800369a:	d01b      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2107      	movs	r1, #7
 80036a8:	400b      	ands	r3, r1
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d012      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2107      	movs	r1, #7
 80036ba:	438a      	bics	r2, r1
 80036bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6959      	ldr	r1, [r3, #20]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2207      	movs	r2, #7
 80036ca:	401a      	ands	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d003      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x118>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b11      	cmp	r3, #17
 80036e2:	d152      	bne.n	800378a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036e4:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d102      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x12a>
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	e001      	b.n	80036fa <HAL_ADC_ConfigChannel+0x12e>
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	03db      	lsls	r3, r3, #15
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d140      	bne.n	800378a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_ADC_ConfigChannel+0x1dc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4927      	ldr	r1, [pc, #156]	; (80037ac <HAL_ADC_ConfigChannel+0x1e0>)
 800370e:	0018      	movs	r0, r3
 8003710:	f7fc fcfa 	bl	8000108 <__udivsi3>
 8003714:	0003      	movs	r3, r0
 8003716:	001a      	movs	r2, r3
 8003718:	0013      	movs	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	189b      	adds	r3, r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003722:	e002      	b.n	800372a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x158>
 8003730:	e02b      	b.n	800378a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	4099      	lsls	r1, r3
 8003740:	000b      	movs	r3, r1
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	400a      	ands	r2, r1
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b10      	cmp	r3, #16
 8003752:	d003      	beq.n	800375c <HAL_ADC_ConfigChannel+0x190>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b11      	cmp	r3, #17
 800375a:	d116      	bne.n	800378a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_ADC_ConfigChannel+0x1d8>)
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1a0>
 8003768:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800376a:	e000      	b.n	800376e <HAL_ADC_ConfigChannel+0x1a2>
 800376c:	4a11      	ldr	r2, [pc, #68]	; (80037b4 <HAL_ADC_ConfigChannel+0x1e8>)
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_ADC_ConfigChannel+0x1d8>)
 8003770:	400a      	ands	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e009      	b.n	800378a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	2220      	movs	r2, #32
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003782:	230f      	movs	r3, #15
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2234      	movs	r2, #52	; 0x34
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003792:	230f      	movs	r3, #15
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b004      	add	sp, #16
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	00001001 	.word	0x00001001
 80037a4:	40012708 	.word	0x40012708
 80037a8:	20000000 	.word	0x20000000
 80037ac:	000f4240 	.word	0x000f4240
 80037b0:	ff7fffff 	.word	0xff7fffff
 80037b4:	ffbfffff 	.word	0xffbfffff

080037b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d112      	bne.n	80037fc <ADC_Enable+0x44>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d009      	beq.n	80037f8 <ADC_Enable+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	401a      	ands	r2, r3
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d101      	bne.n	80037fc <ADC_Enable+0x44>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <ADC_Enable+0x46>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d152      	bne.n	80038a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <ADC_Enable+0xfc>)
 800380a:	4013      	ands	r3, r2
 800380c:	d00d      	beq.n	800382a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	2210      	movs	r2, #16
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2201      	movs	r2, #1
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e03f      	b.n	80038aa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <ADC_Enable+0x100>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	491f      	ldr	r1, [pc, #124]	; (80038bc <ADC_Enable+0x104>)
 8003840:	0018      	movs	r0, r3
 8003842:	f7fc fc61 	bl	8000108 <__udivsi3>
 8003846:	0003      	movs	r3, r0
 8003848:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800384a:	e002      	b.n	8003852 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3b01      	subs	r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f9      	bne.n	800384c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003858:	f7ff fcd4 	bl	8003204 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003860:	e01b      	b.n	800389a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003862:	f7ff fccf 	bl	8003204 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d914      	bls.n	800389a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	4013      	ands	r3, r2
 800387a:	2b01      	cmp	r3, #1
 800387c:	d00d      	beq.n	800389a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	2210      	movs	r2, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	2201      	movs	r2, #1
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e007      	b.n	80038aa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d1dc      	bne.n	8003862 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	80000017 	.word	0x80000017
 80038b8:	20000000 	.word	0x20000000
 80038bc:	000f4240 	.word	0x000f4240

080038c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	2250      	movs	r2, #80	; 0x50
 80038d4:	4013      	ands	r3, r2
 80038d6:	d140      	bne.n	800395a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	23c0      	movs	r3, #192	; 0xc0
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	d12d      	bne.n	8003950 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d129      	bne.n	8003950 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2208      	movs	r2, #8
 8003904:	4013      	ands	r3, r2
 8003906:	2b08      	cmp	r3, #8
 8003908:	d122      	bne.n	8003950 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2204      	movs	r2, #4
 8003912:	4013      	ands	r3, r2
 8003914:	d110      	bne.n	8003938 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	210c      	movs	r1, #12
 8003922:	438a      	bics	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <ADC_DMAConvCplt+0xb0>)
 800392c:	4013      	ands	r3, r2
 800392e:	2201      	movs	r2, #1
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
 8003936:	e00b      	b.n	8003950 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	2220      	movs	r2, #32
 800393e:	431a      	orrs	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2201      	movs	r2, #1
 800394a:	431a      	orrs	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fe22 	bl	800359c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003958:	e005      	b.n	8003966 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	0010      	movs	r0, r2
 8003964:	4798      	blx	r3
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	fffffefe 	.word	0xfffffefe

08003974 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff fe11 	bl	80035ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}

08003992 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	2204      	movs	r2, #4
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fdfe 	bl	80035bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d0:	2317      	movs	r3, #23
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2234      	movs	r2, #52	; 0x34
 80039e4:	5c9b      	ldrb	r3, [r3, r2]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADCEx_Calibration_Start+0x26>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e08d      	b.n	8003b0a <HAL_ADCEx_Calibration_Start+0x142>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2234      	movs	r2, #52	; 0x34
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d112      	bne.n	8003a2a <HAL_ADCEx_Calibration_Start+0x62>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d009      	beq.n	8003a26 <HAL_ADCEx_Calibration_Start+0x5e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d101      	bne.n	8003a2a <HAL_ADCEx_Calibration_Start+0x62>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_ADCEx_Calibration_Start+0x64>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d15b      	bne.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	4a37      	ldr	r2, [pc, #220]	; (8003b14 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	2202      	movs	r2, #2
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2203      	movs	r2, #3
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2103      	movs	r1, #3
 8003a58:	438a      	bics	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	0609      	lsls	r1, r1, #24
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003a6e:	f7ff fbc9 	bl	8003204 <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003a76:	e01d      	b.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a78:	f7ff fbc4 	bl	8003204 <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d916      	bls.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	0fdb      	lsrs	r3, r3, #31
 8003a8e:	07da      	lsls	r2, r3, #31
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d10d      	bne.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2212      	movs	r2, #18
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2234      	movs	r2, #52	; 0x34
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e02a      	b.n	8003b0a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	0fdb      	lsrs	r3, r3, #31
 8003abc:	07da      	lsls	r2, r3, #31
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d0d8      	beq.n	8003a78 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68d9      	ldr	r1, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	2203      	movs	r2, #3
 8003adc:	4393      	bics	r3, r2
 8003ade:	2201      	movs	r2, #1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae6:	e009      	b.n	8003afc <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	2220      	movs	r2, #32
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003af4:	2317      	movs	r3, #23
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2234      	movs	r2, #52	; 0x34
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b04:	2317      	movs	r3, #23
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b006      	add	sp, #24
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	fffffefd 	.word	0xfffffefd

08003b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	0002      	movs	r2, r0
 8003b20:	1dfb      	adds	r3, r7, #7
 8003b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2a:	d809      	bhi.n	8003b40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2c:	1dfb      	adds	r3, r7, #7
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	001a      	movs	r2, r3
 8003b32:	231f      	movs	r3, #31
 8003b34:	401a      	ands	r2, r3
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <__NVIC_EnableIRQ+0x30>)
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4091      	lsls	r1, r2
 8003b3c:	000a      	movs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
  }
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	e000e100 	.word	0xe000e100

08003b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	0002      	movs	r2, r0
 8003b54:	6039      	str	r1, [r7, #0]
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b60:	d828      	bhi.n	8003bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b62:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <__NVIC_SetPriority+0xd4>)
 8003b64:	1dfb      	adds	r3, r7, #7
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b25b      	sxtb	r3, r3
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	33c0      	adds	r3, #192	; 0xc0
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	589b      	ldr	r3, [r3, r2]
 8003b72:	1dfa      	adds	r2, r7, #7
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	0011      	movs	r1, r2
 8003b78:	2203      	movs	r2, #3
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	00d2      	lsls	r2, r2, #3
 8003b7e:	21ff      	movs	r1, #255	; 0xff
 8003b80:	4091      	lsls	r1, r2
 8003b82:	000a      	movs	r2, r1
 8003b84:	43d2      	mvns	r2, r2
 8003b86:	401a      	ands	r2, r3
 8003b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	401a      	ands	r2, r3
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	0018      	movs	r0, r3
 8003b98:	2303      	movs	r3, #3
 8003b9a:	4003      	ands	r3, r0
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ba0:	481f      	ldr	r0, [pc, #124]	; (8003c20 <__NVIC_SetPriority+0xd4>)
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	430a      	orrs	r2, r1
 8003bac:	33c0      	adds	r3, #192	; 0xc0
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003bb2:	e031      	b.n	8003c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <__NVIC_SetPriority+0xd8>)
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	0019      	movs	r1, r3
 8003bbc:	230f      	movs	r3, #15
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	3b08      	subs	r3, #8
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3306      	adds	r3, #6
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	3304      	adds	r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1dfa      	adds	r2, r7, #7
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	00d2      	lsls	r2, r2, #3
 8003bda:	21ff      	movs	r1, #255	; 0xff
 8003bdc:	4091      	lsls	r1, r2
 8003bde:	000a      	movs	r2, r1
 8003be0:	43d2      	mvns	r2, r2
 8003be2:	401a      	ands	r2, r3
 8003be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	22ff      	movs	r2, #255	; 0xff
 8003bec:	401a      	ands	r2, r3
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	4003      	ands	r3, r0
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bfc:	4809      	ldr	r0, [pc, #36]	; (8003c24 <__NVIC_SetPriority+0xd8>)
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	001c      	movs	r4, r3
 8003c04:	230f      	movs	r3, #15
 8003c06:	4023      	ands	r3, r4
 8003c08:	3b08      	subs	r3, #8
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	3306      	adds	r3, #6
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	18c3      	adds	r3, r0, r3
 8003c14:	3304      	adds	r3, #4
 8003c16:	601a      	str	r2, [r3, #0]
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b003      	add	sp, #12
 8003c1e:	bd90      	pop	{r4, r7, pc}
 8003c20:	e000e100 	.word	0xe000e100
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	045b      	lsls	r3, r3, #17
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d301      	bcc.n	8003c40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e010      	b.n	8003c62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <SysTick_Config+0x44>)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	3a01      	subs	r2, #1
 8003c46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c48:	2301      	movs	r3, #1
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	2103      	movs	r1, #3
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7ff ff7c 	bl	8003b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <SysTick_Config+0x44>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <SysTick_Config+0x44>)
 8003c5c:	2207      	movs	r2, #7
 8003c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b002      	add	sp, #8
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	e000e010 	.word	0xe000e010

08003c70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	210f      	movs	r1, #15
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	1c02      	adds	r2, r0, #0
 8003c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	0011      	movs	r1, r2
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff ff5d 	bl	8003b4c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	0002      	movs	r2, r0
 8003ca2:	1dfb      	adds	r3, r7, #7
 8003ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca6:	1dfb      	adds	r3, r7, #7
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff ff33 	bl	8003b18 <__NVIC_EnableIRQ>
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff ffaf 	bl	8003c28 <SysTick_Config>
 8003cca:	0003      	movs	r3, r0
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e036      	b.n	8003d58 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2221      	movs	r2, #33	; 0x21
 8003cee:	2102      	movs	r1, #2
 8003cf0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_DMA_Init+0x8c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 f946 	bl	8003fcc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2221      	movs	r2, #33	; 0x21
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	ffffc00f 	.word	0xffffc00f

08003d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2317      	movs	r3, #23
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_DMA_Start_IT+0x24>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e04f      	b.n	8003e28 <HAL_DMA_Start_IT+0xc4>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2221      	movs	r2, #33	; 0x21
 8003d94:	5c9b      	ldrb	r3, [r3, r2]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d13a      	bne.n	8003e12 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2221      	movs	r2, #33	; 0x21
 8003da0:	2102      	movs	r1, #2
 8003da2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	438a      	bics	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f8d7 	bl	8003f74 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	210e      	movs	r1, #14
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e00f      	b.n	8003e00 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	210a      	movs	r1, #10
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e007      	b.n	8003e22 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e1a:	2317      	movs	r3, #23
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e22:	2317      	movs	r3, #23
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b006      	add	sp, #24
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	d024      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x72>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d020      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2220      	movs	r2, #32
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d107      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2104      	movs	r1, #4
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	2104      	movs	r1, #4
 8003e86:	4091      	lsls	r1, r2
 8003e88:	000a      	movs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d100      	bne.n	8003e96 <HAL_DMA_IRQHandler+0x66>
 8003e94:	e06a      	b.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	0010      	movs	r0, r2
 8003e9e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ea0:	e064      	b.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	0013      	movs	r3, r2
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d02b      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xda>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d027      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d10b      	bne.n	8003ede <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	210a      	movs	r1, #10
 8003ed2:	438a      	bics	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2221      	movs	r2, #33	; 0x21
 8003eda:	2101      	movs	r1, #1
 8003edc:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4091      	lsls	r1, r2
 8003eea:	000a      	movs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d036      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	0010      	movs	r0, r2
 8003f06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f08:	e030      	b.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2208      	movs	r2, #8
 8003f10:	409a      	lsls	r2, r3
 8003f12:	0013      	movs	r3, r2
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4013      	ands	r3, r2
 8003f18:	d028      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d024      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	210e      	movs	r1, #14
 8003f2e:	438a      	bics	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4091      	lsls	r1, r2
 8003f3e:	000a      	movs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2221      	movs	r2, #33	; 0x21
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	0010      	movs	r0, r2
 8003f68:	4798      	blx	r3
    }
  }
}
 8003f6a:	e7ff      	b.n	8003f6c <HAL_DMA_IRQHandler+0x13c>
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4091      	lsls	r1, r2
 8003f8e:	000a      	movs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d108      	bne.n	8003fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fb2:	e007      	b.n	8003fc4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <DMA_CalcBaseAndBitshift+0x30>)
 8003fda:	4694      	mov	ip, r2
 8003fdc:	4463      	add	r3, ip
 8003fde:	2114      	movs	r1, #20
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc f891 	bl	8000108 <__udivsi3>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	009a      	lsls	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <DMA_CalcBaseAndBitshift+0x34>)
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	bffdfff8 	.word	0xbffdfff8
 8004000:	40020000 	.word	0x40020000

08004004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004012:	e14f      	b.n	80042b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2101      	movs	r1, #1
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4091      	lsls	r1, r2
 800401e:	000a      	movs	r2, r1
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d100      	bne.n	800402c <HAL_GPIO_Init+0x28>
 800402a:	e140      	b.n	80042ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2203      	movs	r2, #3
 8004032:	4013      	ands	r3, r2
 8004034:	2b01      	cmp	r3, #1
 8004036:	d005      	beq.n	8004044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004040:	2b02      	cmp	r3, #2
 8004042:	d130      	bne.n	80040a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	409a      	lsls	r2, r3
 8004052:	0013      	movs	r3, r2
 8004054:	43da      	mvns	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	0013      	movs	r3, r2
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800407a:	2201      	movs	r2, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
 8004080:	0013      	movs	r3, r2
 8004082:	43da      	mvns	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	2201      	movs	r2, #1
 8004092:	401a      	ands	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	409a      	lsls	r2, r3
 8004098:	0013      	movs	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d017      	beq.n	80040e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	409a      	lsls	r2, r3
 80040c0:	0013      	movs	r3, r2
 80040c2:	43da      	mvns	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	409a      	lsls	r2, r3
 80040d4:	0013      	movs	r3, r2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d123      	bne.n	8004136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	58d3      	ldr	r3, [r2, r3]
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2207      	movs	r2, #7
 8004100:	4013      	ands	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	409a      	lsls	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	43da      	mvns	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2107      	movs	r1, #7
 800411a:	400b      	ands	r3, r1
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	409a      	lsls	r2, r3
 8004120:	0013      	movs	r3, r2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	08da      	lsrs	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3208      	adds	r2, #8
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	6939      	ldr	r1, [r7, #16]
 8004134:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	2203      	movs	r2, #3
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	43da      	mvns	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2203      	movs	r2, #3
 8004154:	401a      	ands	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	23c0      	movs	r3, #192	; 0xc0
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	4013      	ands	r3, r2
 8004174:	d100      	bne.n	8004178 <HAL_GPIO_Init+0x174>
 8004176:	e09a      	b.n	80042ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004178:	4b54      	ldr	r3, [pc, #336]	; (80042cc <HAL_GPIO_Init+0x2c8>)
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	4b53      	ldr	r3, [pc, #332]	; (80042cc <HAL_GPIO_Init+0x2c8>)
 800417e:	2101      	movs	r1, #1
 8004180:	430a      	orrs	r2, r1
 8004182:	619a      	str	r2, [r3, #24]
 8004184:	4b51      	ldr	r3, [pc, #324]	; (80042cc <HAL_GPIO_Init+0x2c8>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004190:	4a4f      	ldr	r2, [pc, #316]	; (80042d0 <HAL_GPIO_Init+0x2cc>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	589b      	ldr	r3, [r3, r2]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	409a      	lsls	r2, r3
 80041aa:	0013      	movs	r3, r2
 80041ac:	43da      	mvns	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	2390      	movs	r3, #144	; 0x90
 80041b8:	05db      	lsls	r3, r3, #23
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x1e2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a44      	ldr	r2, [pc, #272]	; (80042d4 <HAL_GPIO_Init+0x2d0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x1de>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a43      	ldr	r2, [pc, #268]	; (80042d8 <HAL_GPIO_Init+0x2d4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x1da>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a42      	ldr	r2, [pc, #264]	; (80042dc <HAL_GPIO_Init+0x2d8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x1d6>
 80041d6:	2303      	movs	r3, #3
 80041d8:	e006      	b.n	80041e8 <HAL_GPIO_Init+0x1e4>
 80041da:	2305      	movs	r3, #5
 80041dc:	e004      	b.n	80041e8 <HAL_GPIO_Init+0x1e4>
 80041de:	2302      	movs	r3, #2
 80041e0:	e002      	b.n	80041e8 <HAL_GPIO_Init+0x1e4>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_GPIO_Init+0x1e4>
 80041e6:	2300      	movs	r3, #0
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	2103      	movs	r1, #3
 80041ec:	400a      	ands	r2, r1
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	4093      	lsls	r3, r2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041f8:	4935      	ldr	r1, [pc, #212]	; (80042d0 <HAL_GPIO_Init+0x2cc>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	3302      	adds	r3, #2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	43da      	mvns	r2, r3
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	035b      	lsls	r3, r3, #13
 800421e:	4013      	ands	r3, r2
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43da      	mvns	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	039b      	lsls	r3, r3, #14
 8004248:	4013      	ands	r3, r2
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800425a:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43da      	mvns	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	4013      	ands	r3, r2
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43da      	mvns	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	025b      	lsls	r3, r3, #9
 800429c:	4013      	ands	r3, r2
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_GPIO_Init+0x2dc>)
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	40da      	lsrs	r2, r3
 80042bc:	1e13      	subs	r3, r2, #0
 80042be:	d000      	beq.n	80042c2 <HAL_GPIO_Init+0x2be>
 80042c0:	e6a8      	b.n	8004014 <HAL_GPIO_Init+0x10>
  } 
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b006      	add	sp, #24
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40010000 	.word	0x40010000
 80042d4:	48000400 	.word	0x48000400
 80042d8:	48000800 	.word	0x48000800
 80042dc:	48000c00 	.word	0x48000c00
 80042e0:	40010400 	.word	0x40010400

080042e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	0008      	movs	r0, r1
 80042ee:	0011      	movs	r1, r2
 80042f0:	1cbb      	adds	r3, r7, #2
 80042f2:	1c02      	adds	r2, r0, #0
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	1c7b      	adds	r3, r7, #1
 80042f8:	1c0a      	adds	r2, r1, #0
 80042fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042fc:	1c7b      	adds	r3, r7, #1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004304:	1cbb      	adds	r3, r7, #2
 8004306:	881a      	ldrh	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800430c:	e003      	b.n	8004316 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800430e:	1cbb      	adds	r3, r7, #2
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e301      	b.n	8004936 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d100      	bne.n	800433e <HAL_RCC_OscConfig+0x1e>
 800433c:	e08d      	b.n	800445a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800433e:	4bc3      	ldr	r3, [pc, #780]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	220c      	movs	r2, #12
 8004344:	4013      	ands	r3, r2
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00e      	beq.n	8004368 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800434a:	4bc0      	ldr	r3, [pc, #768]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	220c      	movs	r2, #12
 8004350:	4013      	ands	r3, r2
 8004352:	2b08      	cmp	r3, #8
 8004354:	d116      	bne.n	8004384 <HAL_RCC_OscConfig+0x64>
 8004356:	4bbd      	ldr	r3, [pc, #756]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	401a      	ands	r2, r3
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	429a      	cmp	r2, r3
 8004366:	d10d      	bne.n	8004384 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	4bb8      	ldr	r3, [pc, #736]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	029b      	lsls	r3, r3, #10
 8004370:	4013      	ands	r3, r2
 8004372:	d100      	bne.n	8004376 <HAL_RCC_OscConfig+0x56>
 8004374:	e070      	b.n	8004458 <HAL_RCC_OscConfig+0x138>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d000      	beq.n	8004380 <HAL_RCC_OscConfig+0x60>
 800437e:	e06b      	b.n	8004458 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e2d8      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_RCC_OscConfig+0x7c>
 800438c:	4baf      	ldr	r3, [pc, #700]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4bae      	ldr	r3, [pc, #696]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0249      	lsls	r1, r1, #9
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e02f      	b.n	80043fc <HAL_RCC_OscConfig+0xdc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_OscConfig+0x9e>
 80043a4:	4ba9      	ldr	r3, [pc, #676]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4ba8      	ldr	r3, [pc, #672]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043aa:	49a9      	ldr	r1, [pc, #676]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	4ba6      	ldr	r3, [pc, #664]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4ba5      	ldr	r3, [pc, #660]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043b6:	49a7      	ldr	r1, [pc, #668]	; (8004654 <HAL_RCC_OscConfig+0x334>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e01e      	b.n	80043fc <HAL_RCC_OscConfig+0xdc>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d10e      	bne.n	80043e4 <HAL_RCC_OscConfig+0xc4>
 80043c6:	4ba1      	ldr	r3, [pc, #644]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4ba0      	ldr	r3, [pc, #640]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	02c9      	lsls	r1, r1, #11
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	4b9d      	ldr	r3, [pc, #628]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b9c      	ldr	r3, [pc, #624]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	0249      	lsls	r1, r1, #9
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0xdc>
 80043e4:	4b99      	ldr	r3, [pc, #612]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b98      	ldr	r3, [pc, #608]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043ea:	4999      	ldr	r1, [pc, #612]	; (8004650 <HAL_RCC_OscConfig+0x330>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	4b96      	ldr	r3, [pc, #600]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b95      	ldr	r3, [pc, #596]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80043f6:	4997      	ldr	r1, [pc, #604]	; (8004654 <HAL_RCC_OscConfig+0x334>)
 80043f8:	400a      	ands	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d014      	beq.n	800442e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe fefe 	bl	8003204 <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440e:	f7fe fef9 	bl	8003204 <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b64      	cmp	r3, #100	; 0x64
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e28a      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004420:	4b8a      	ldr	r3, [pc, #552]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	4013      	ands	r3, r2
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0xee>
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442e:	f7fe fee9 	bl	8003204 <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe fee4 	bl	8003204 <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e275      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	4b80      	ldr	r3, [pc, #512]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	029b      	lsls	r3, r3, #10
 8004452:	4013      	ands	r3, r2
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x118>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2202      	movs	r2, #2
 8004460:	4013      	ands	r3, r2
 8004462:	d100      	bne.n	8004466 <HAL_RCC_OscConfig+0x146>
 8004464:	e069      	b.n	800453a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004466:	4b79      	ldr	r3, [pc, #484]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	220c      	movs	r2, #12
 800446c:	4013      	ands	r3, r2
 800446e:	d00b      	beq.n	8004488 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004470:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	220c      	movs	r2, #12
 8004476:	4013      	ands	r3, r2
 8004478:	2b08      	cmp	r3, #8
 800447a:	d11c      	bne.n	80044b6 <HAL_RCC_OscConfig+0x196>
 800447c:	4b73      	ldr	r3, [pc, #460]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	025b      	lsls	r3, r3, #9
 8004484:	4013      	ands	r3, r2
 8004486:	d116      	bne.n	80044b6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004488:	4b70      	ldr	r3, [pc, #448]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2202      	movs	r2, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x17e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e24b      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b6b      	ldr	r3, [pc, #428]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	22f8      	movs	r2, #248	; 0xf8
 80044a4:	4393      	bics	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	00da      	lsls	r2, r3, #3
 80044ae:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b4:	e041      	b.n	800453a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d024      	beq.n	8004508 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b62      	ldr	r3, [pc, #392]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80044c4:	2101      	movs	r1, #1
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fe fe9b 	bl	8003204 <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fe fe96 	bl	8003204 <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e227      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b59      	ldr	r3, [pc, #356]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2202      	movs	r2, #2
 80044ec:	4013      	ands	r3, r2
 80044ee:	d0f1      	beq.n	80044d4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b56      	ldr	r3, [pc, #344]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	22f8      	movs	r2, #248	; 0xf8
 80044f6:	4393      	bics	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00da      	lsls	r2, r3, #3
 8004500:	4b52      	ldr	r3, [pc, #328]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e018      	b.n	800453a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004508:	4b50      	ldr	r3, [pc, #320]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b4f      	ldr	r3, [pc, #316]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800450e:	2101      	movs	r1, #1
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fe fe76 	bl	8003204 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe fe71 	bl	8003204 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e202      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2202      	movs	r2, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d1f1      	bne.n	800451e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2208      	movs	r2, #8
 8004540:	4013      	ands	r3, r2
 8004542:	d036      	beq.n	80045b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d019      	beq.n	8004580 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454c:	4b3f      	ldr	r3, [pc, #252]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 800454e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004550:	4b3e      	ldr	r3, [pc, #248]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004552:	2101      	movs	r1, #1
 8004554:	430a      	orrs	r2, r1
 8004556:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004558:	f7fe fe54 	bl	8003204 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004562:	f7fe fe4f 	bl	8003204 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1e0      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004574:	4b35      	ldr	r3, [pc, #212]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2202      	movs	r2, #2
 800457a:	4013      	ands	r3, r2
 800457c:	d0f1      	beq.n	8004562 <HAL_RCC_OscConfig+0x242>
 800457e:	e018      	b.n	80045b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004580:	4b32      	ldr	r3, [pc, #200]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004586:	2101      	movs	r1, #1
 8004588:	438a      	bics	r2, r1
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458c:	f7fe fe3a 	bl	8003204 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7fe fe35 	bl	8003204 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1c6      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	4b28      	ldr	r3, [pc, #160]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2202      	movs	r2, #2
 80045ae:	4013      	ands	r3, r2
 80045b0:	d1f1      	bne.n	8004596 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2204      	movs	r2, #4
 80045b8:	4013      	ands	r3, r2
 80045ba:	d100      	bne.n	80045be <HAL_RCC_OscConfig+0x29e>
 80045bc:	e0b4      	b.n	8004728 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	201f      	movs	r0, #31
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	055b      	lsls	r3, r3, #21
 80045ce:	4013      	ands	r3, r2
 80045d0:	d110      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	4b1e      	ldr	r3, [pc, #120]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	0549      	lsls	r1, r1, #21
 80045dc:	430a      	orrs	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	055b      	lsls	r3, r3, #21
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045ee:	183b      	adds	r3, r7, r0
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_RCC_OscConfig+0x338>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4013      	ands	r3, r2
 80045fe:	d11a      	bne.n	8004636 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x338>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_RCC_OscConfig+0x338>)
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	0049      	lsls	r1, r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fe fdf9 	bl	8003204 <HAL_GetTick>
 8004612:	0003      	movs	r3, r0
 8004614:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004618:	f7fe fdf4 	bl	8003204 <HAL_GetTick>
 800461c:	0002      	movs	r2, r0
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e185      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_OscConfig+0x338>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4013      	ands	r3, r2
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10e      	bne.n	800465c <HAL_RCC_OscConfig+0x33c>
 800463e:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	4b02      	ldr	r3, [pc, #8]	; (800464c <HAL_RCC_OscConfig+0x32c>)
 8004644:	2101      	movs	r1, #1
 8004646:	430a      	orrs	r2, r1
 8004648:	621a      	str	r2, [r3, #32]
 800464a:	e035      	b.n	80046b8 <HAL_RCC_OscConfig+0x398>
 800464c:	40021000 	.word	0x40021000
 8004650:	fffeffff 	.word	0xfffeffff
 8004654:	fffbffff 	.word	0xfffbffff
 8004658:	40007000 	.word	0x40007000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10c      	bne.n	800467e <HAL_RCC_OscConfig+0x35e>
 8004664:	4bb6      	ldr	r3, [pc, #728]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	4bb5      	ldr	r3, [pc, #724]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800466a:	2101      	movs	r1, #1
 800466c:	438a      	bics	r2, r1
 800466e:	621a      	str	r2, [r3, #32]
 8004670:	4bb3      	ldr	r3, [pc, #716]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	4bb2      	ldr	r3, [pc, #712]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004676:	2104      	movs	r1, #4
 8004678:	438a      	bics	r2, r1
 800467a:	621a      	str	r2, [r3, #32]
 800467c:	e01c      	b.n	80046b8 <HAL_RCC_OscConfig+0x398>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x380>
 8004686:	4bae      	ldr	r3, [pc, #696]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	4bad      	ldr	r3, [pc, #692]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800468c:	2104      	movs	r1, #4
 800468e:	430a      	orrs	r2, r1
 8004690:	621a      	str	r2, [r3, #32]
 8004692:	4bab      	ldr	r3, [pc, #684]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	4baa      	ldr	r3, [pc, #680]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004698:	2101      	movs	r1, #1
 800469a:	430a      	orrs	r2, r1
 800469c:	621a      	str	r2, [r3, #32]
 800469e:	e00b      	b.n	80046b8 <HAL_RCC_OscConfig+0x398>
 80046a0:	4ba7      	ldr	r3, [pc, #668]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	4ba6      	ldr	r3, [pc, #664]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	438a      	bics	r2, r1
 80046aa:	621a      	str	r2, [r3, #32]
 80046ac:	4ba4      	ldr	r3, [pc, #656]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	4ba3      	ldr	r3, [pc, #652]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80046b2:	2104      	movs	r1, #4
 80046b4:	438a      	bics	r2, r1
 80046b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d014      	beq.n	80046ea <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fe fda0 	bl	8003204 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	e009      	b.n	80046de <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe fd9b 	bl	8003204 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	4a9b      	ldr	r2, [pc, #620]	; (8004944 <HAL_RCC_OscConfig+0x624>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e12b      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	4b98      	ldr	r3, [pc, #608]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	2202      	movs	r2, #2
 80046e4:	4013      	ands	r3, r2
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x3aa>
 80046e8:	e013      	b.n	8004712 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ea:	f7fe fd8b 	bl	8003204 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f2:	e009      	b.n	8004708 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fe fd86 	bl	8003204 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	4a91      	ldr	r2, [pc, #580]	; (8004944 <HAL_RCC_OscConfig+0x624>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e116      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004708:	4b8d      	ldr	r3, [pc, #564]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	2202      	movs	r2, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004712:	231f      	movs	r3, #31
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b88      	ldr	r3, [pc, #544]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	4b87      	ldr	r3, [pc, #540]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004722:	4989      	ldr	r1, [pc, #548]	; (8004948 <HAL_RCC_OscConfig+0x628>)
 8004724:	400a      	ands	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2210      	movs	r2, #16
 800472e:	4013      	ands	r3, r2
 8004730:	d063      	beq.n	80047fa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d12a      	bne.n	8004790 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800473a:	4b81      	ldr	r3, [pc, #516]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800473c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473e:	4b80      	ldr	r3, [pc, #512]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004740:	2104      	movs	r1, #4
 8004742:	430a      	orrs	r2, r1
 8004744:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004746:	4b7e      	ldr	r3, [pc, #504]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474a:	4b7d      	ldr	r3, [pc, #500]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800474c:	2101      	movs	r1, #1
 800474e:	430a      	orrs	r2, r1
 8004750:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004752:	f7fe fd57 	bl	8003204 <HAL_GetTick>
 8004756:	0003      	movs	r3, r0
 8004758:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800475c:	f7fe fd52 	bl	8003204 <HAL_GetTick>
 8004760:	0002      	movs	r2, r0
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0e3      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800476e:	4b74      	ldr	r3, [pc, #464]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	d0f1      	beq.n	800475c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004778:	4b71      	ldr	r3, [pc, #452]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	22f8      	movs	r2, #248	; 0xf8
 800477e:	4393      	bics	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	00da      	lsls	r2, r3, #3
 8004788:	4b6d      	ldr	r3, [pc, #436]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800478a:	430a      	orrs	r2, r1
 800478c:	635a      	str	r2, [r3, #52]	; 0x34
 800478e:	e034      	b.n	80047fa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	3305      	adds	r3, #5
 8004796:	d111      	bne.n	80047bc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004798:	4b69      	ldr	r3, [pc, #420]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800479a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479c:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800479e:	2104      	movs	r1, #4
 80047a0:	438a      	bics	r2, r1
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047a4:	4b66      	ldr	r3, [pc, #408]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a8:	22f8      	movs	r2, #248	; 0xf8
 80047aa:	4393      	bics	r3, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	00da      	lsls	r2, r3, #3
 80047b4:	4b62      	ldr	r3, [pc, #392]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047b6:	430a      	orrs	r2, r1
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34
 80047ba:	e01e      	b.n	80047fa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047bc:	4b60      	ldr	r3, [pc, #384]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c0:	4b5f      	ldr	r3, [pc, #380]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047c2:	2104      	movs	r1, #4
 80047c4:	430a      	orrs	r2, r1
 80047c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047cc:	4b5c      	ldr	r3, [pc, #368]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047ce:	2101      	movs	r1, #1
 80047d0:	438a      	bics	r2, r1
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d4:	f7fe fd16 	bl	8003204 <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047de:	f7fe fd11 	bl	8003204 <HAL_GetTick>
 80047e2:	0002      	movs	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0a2      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	2202      	movs	r2, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	d1f1      	bne.n	80047de <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d100      	bne.n	8004804 <HAL_RCC_OscConfig+0x4e4>
 8004802:	e097      	b.n	8004934 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004804:	4b4e      	ldr	r3, [pc, #312]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	220c      	movs	r2, #12
 800480a:	4013      	ands	r3, r2
 800480c:	2b08      	cmp	r3, #8
 800480e:	d100      	bne.n	8004812 <HAL_RCC_OscConfig+0x4f2>
 8004810:	e06b      	b.n	80048ea <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d14c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b48      	ldr	r3, [pc, #288]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004820:	494a      	ldr	r1, [pc, #296]	; (800494c <HAL_RCC_OscConfig+0x62c>)
 8004822:	400a      	ands	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fe fced 	bl	8003204 <HAL_GetTick>
 800482a:	0003      	movs	r3, r0
 800482c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fe fce8 	bl	8003204 <HAL_GetTick>
 8004834:	0002      	movs	r2, r0
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e079      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	049b      	lsls	r3, r3, #18
 800484a:	4013      	ands	r3, r2
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484e:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	220f      	movs	r2, #15
 8004854:	4393      	bics	r3, r2
 8004856:	0019      	movs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800485e:	430a      	orrs	r2, r1
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4a3a      	ldr	r2, [pc, #232]	; (8004950 <HAL_RCC_OscConfig+0x630>)
 8004868:	4013      	ands	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	431a      	orrs	r2, r3
 8004876:	4b32      	ldr	r3, [pc, #200]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487c:	4b30      	ldr	r3, [pc, #192]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	0449      	lsls	r1, r1, #17
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7fe fcbb 	bl	8003204 <HAL_GetTick>
 800488e:	0003      	movs	r3, r0
 8004890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fe fcb6 	bl	8003204 <HAL_GetTick>
 8004898:	0002      	movs	r2, r0
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e047      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	049b      	lsls	r3, r3, #18
 80048ae:	4013      	ands	r3, r2
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x574>
 80048b2:	e03f      	b.n	8004934 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b4:	4b22      	ldr	r3, [pc, #136]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b21      	ldr	r3, [pc, #132]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048ba:	4924      	ldr	r1, [pc, #144]	; (800494c <HAL_RCC_OscConfig+0x62c>)
 80048bc:	400a      	ands	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fe fca0 	bl	8003204 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fe fc9b 	bl	8003204 <HAL_GetTick>
 80048ce:	0002      	movs	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e02c      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	049b      	lsls	r3, r3, #18
 80048e4:	4013      	ands	r3, r2
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x5aa>
 80048e8:	e024      	b.n	8004934 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01f      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	025b      	lsls	r3, r3, #9
 8004908:	401a      	ands	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	429a      	cmp	r2, r3
 8004910:	d10e      	bne.n	8004930 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	220f      	movs	r2, #15
 8004916:	401a      	ands	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	23f0      	movs	r3, #240	; 0xf0
 8004924:	039b      	lsls	r3, r3, #14
 8004926:	401a      	ands	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b008      	add	sp, #32
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	40021000 	.word	0x40021000
 8004944:	00001388 	.word	0x00001388
 8004948:	efffffff 	.word	0xefffffff
 800494c:	feffffff 	.word	0xfeffffff
 8004950:	ffc2ffff 	.word	0xffc2ffff

08004954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0b3      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2201      	movs	r2, #1
 800496e:	4013      	ands	r3, r2
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d911      	bls.n	800499a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	4393      	bics	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	4b55      	ldr	r3, [pc, #340]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2201      	movs	r2, #1
 800498e:	4013      	ands	r3, r2
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e09a      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2202      	movs	r2, #2
 80049a0:	4013      	ands	r3, r2
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2204      	movs	r2, #4
 80049aa:	4013      	ands	r3, r2
 80049ac:	d006      	beq.n	80049bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049ae:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 80049b4:	21e0      	movs	r1, #224	; 0xe0
 80049b6:	00c9      	lsls	r1, r1, #3
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	22f0      	movs	r2, #240	; 0xf0
 80049c2:	4393      	bics	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	4b44      	ldr	r3, [pc, #272]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2201      	movs	r2, #1
 80049d6:	4013      	ands	r3, r2
 80049d8:	d040      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	4013      	ands	r3, r2
 80049ec:	d114      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06e      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b38      	ldr	r3, [pc, #224]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	049b      	lsls	r3, r3, #18
 8004a02:	4013      	ands	r3, r2
 8004a04:	d108      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e062      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	4013      	ands	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e05b      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a18:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	4393      	bics	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b2d      	ldr	r3, [pc, #180]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fe fbea 	bl	8003204 <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a34:	e009      	b.n	8004a4a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a36:	f7fe fbe5 	bl	8003204 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_RCC_ClockConfig+0x18c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e042      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	220c      	movs	r2, #12
 8004a50:	401a      	ands	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1ec      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	4013      	ands	r3, r2
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d211      	bcs.n	8004a8e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4393      	bics	r3, r2
 8004a72:	0019      	movs	r1, r3
 8004a74:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7c:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x184>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	4013      	ands	r3, r2
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e020      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4013      	ands	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <HAL_RCC_ClockConfig+0x190>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aac:	f000 f820 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004ab0:	0001      	movs	r1, r0
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x188>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	220f      	movs	r2, #15
 8004aba:	4013      	ands	r3, r2
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <HAL_RCC_ClockConfig+0x194>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	000a      	movs	r2, r1
 8004ac2:	40da      	lsrs	r2, r3
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCC_ClockConfig+0x198>)
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ac8:	2003      	movs	r0, #3
 8004aca:	f7fe fb55 	bl	8003178 <HAL_InitTick>
  
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40022000 	.word	0x40022000
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	00001388 	.word	0x00001388
 8004ae4:	fffff8ff 	.word	0xfffff8ff
 8004ae8:	08007360 	.word	0x08007360
 8004aec:	20000000 	.word	0x20000000

08004af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	220c      	movs	r2, #12
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x30>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x36>
 8004b1e:	e02c      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b22:	613b      	str	r3, [r7, #16]
      break;
 8004b24:	e02c      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	0c9b      	lsrs	r3, r3, #18
 8004b2a:	220f      	movs	r2, #15
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b30:	5cd3      	ldrb	r3, [r2, r3]
 8004b32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	220f      	movs	r2, #15
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
 8004b40:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	025b      	lsls	r3, r3, #9
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4810      	ldr	r0, [pc, #64]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b50:	f7fb fada 	bl	8000108 <__udivsi3>
 8004b54:	0003      	movs	r3, r0
 8004b56:	001a      	movs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4353      	muls	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e009      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	000a      	movs	r2, r1
 8004b64:	0152      	lsls	r2, r2, #5
 8004b66:	1a52      	subs	r2, r2, r1
 8004b68:	0193      	lsls	r3, r2, #6
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	185b      	adds	r3, r3, r1
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	613b      	str	r3, [r7, #16]
      break;
 8004b78:	e002      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b7c:	613b      	str	r3, [r7, #16]
      break;
 8004b7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b80:	693b      	ldr	r3, [r7, #16]
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b006      	add	sp, #24
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	007a1200 	.word	0x007a1200
 8004b94:	08007378 	.word	0x08007378
 8004b98:	08007388 	.word	0x08007388

08004b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <HAL_RCC_GetHCLKFreq+0x10>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	20000000 	.word	0x20000000

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004bb4:	f7ff fff2 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bb8:	0001      	movs	r1, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc6:	5cd3      	ldrb	r3, [r2, r3]
 8004bc8:	40d9      	lsrs	r1, r3
 8004bca:	000b      	movs	r3, r1
}    
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	08007370 	.word	0x08007370

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	025b      	lsls	r3, r3, #9
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004bf8:	e08e      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	2017      	movs	r0, #23
 8004bfc:	183b      	adds	r3, r7, r0
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c02:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	055b      	lsls	r3, r3, #21
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d110      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	4b53      	ldr	r3, [pc, #332]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	0549      	lsls	r1, r1, #21
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	61da      	str	r2, [r3, #28]
 8004c1c:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	055b      	lsls	r3, r3, #21
 8004c24:	4013      	ands	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2a:	183b      	adds	r3, r7, r0
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c30:	4b4c      	ldr	r3, [pc, #304]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d11a      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c3c:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	0049      	lsls	r1, r1, #1
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4a:	f7fe fadb 	bl	8003204 <HAL_GetTick>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fe fad6 	bl	8003204 <HAL_GetTick>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e077      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c72:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	23c0      	movs	r3, #192	; 0xc0
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d034      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	23c0      	movs	r3, #192	; 0xc0
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d02c      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4a33      	ldr	r2, [pc, #204]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9e:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ca0:	6a1a      	ldr	r2, [r3, #32]
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	0249      	lsls	r1, r1, #9
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cae:	6a1a      	ldr	r2, [r3, #32]
 8004cb0:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cb2:	492e      	ldr	r1, [pc, #184]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc6:	f7fe fa9d 	bl	8003204 <HAL_GetTick>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cce:	e009      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fe fa98 	bl	8003204 <HAL_GetTick>
 8004cd4:	0002      	movs	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e038      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	4013      	ands	r3, r2
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d02:	2317      	movs	r3, #23
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d12:	4918      	ldr	r1, [pc, #96]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d22:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	2203      	movs	r2, #3
 8004d28:	4393      	bics	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d32:	430a      	orrs	r2, r1
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2210      	movs	r2, #16
 8004d46:	4393      	bics	r3, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d50:	430a      	orrs	r2, r1
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b006      	add	sp, #24
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40007000 	.word	0x40007000
 8004d68:	fffffcff 	.word	0xfffffcff
 8004d6c:	fffeffff 	.word	0xfffeffff
 8004d70:	00001388 	.word	0x00001388
 8004d74:	efffffff 	.word	0xefffffff

08004d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e042      	b.n	8004e10 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	223d      	movs	r2, #61	; 0x3d
 8004d8e:	5c9b      	ldrb	r3, [r3, r2]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	223c      	movs	r2, #60	; 0x3c
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7fe f88d 	bl	8002ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	223d      	movs	r2, #61	; 0x3d
 8004daa:	2102      	movs	r1, #2
 8004dac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	0019      	movs	r1, r3
 8004db8:	0010      	movs	r0, r2
 8004dba:	f000 fac5 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2246      	movs	r2, #70	; 0x46
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	223e      	movs	r2, #62	; 0x3e
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	223f      	movs	r2, #63	; 0x3f
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2241      	movs	r2, #65	; 0x41
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2242      	movs	r2, #66	; 0x42
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2243      	movs	r2, #67	; 0x43
 8004df2:	2101      	movs	r1, #1
 8004df4:	5499      	strb	r1, [r3, r2]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2244      	movs	r2, #68	; 0x44
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2245      	movs	r2, #69	; 0x45
 8004e02:	2101      	movs	r1, #1
 8004e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223d      	movs	r2, #61	; 0x3d
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e042      	b.n	8004eb0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	223d      	movs	r2, #61	; 0x3d
 8004e2e:	5c9b      	ldrb	r3, [r3, r2]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	223c      	movs	r2, #60	; 0x3c
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 f839 	bl	8004eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	223d      	movs	r2, #61	; 0x3d
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	0019      	movs	r1, r3
 8004e58:	0010      	movs	r0, r2
 8004e5a:	f000 fa75 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2246      	movs	r2, #70	; 0x46
 8004e62:	2101      	movs	r1, #1
 8004e64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	223e      	movs	r2, #62	; 0x3e
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	5499      	strb	r1, [r3, r2]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223f      	movs	r2, #63	; 0x3f
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2241      	movs	r2, #65	; 0x41
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2242      	movs	r2, #66	; 0x42
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2243      	movs	r2, #67	; 0x43
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2244      	movs	r2, #68	; 0x44
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2245      	movs	r2, #69	; 0x45
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	223d      	movs	r2, #61	; 0x3d
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <HAL_TIM_PWM_Start+0x22>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	223e      	movs	r2, #62	; 0x3e
 8004edc:	5c9b      	ldrb	r3, [r3, r2]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	1e5a      	subs	r2, r3, #1
 8004ee4:	4193      	sbcs	r3, r2
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	e01f      	b.n	8004f2a <HAL_TIM_PWM_Start+0x62>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d108      	bne.n	8004f02 <HAL_TIM_PWM_Start+0x3a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	223f      	movs	r2, #63	; 0x3f
 8004ef4:	5c9b      	ldrb	r3, [r3, r2]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	1e5a      	subs	r2, r3, #1
 8004efc:	4193      	sbcs	r3, r2
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	e013      	b.n	8004f2a <HAL_TIM_PWM_Start+0x62>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d108      	bne.n	8004f1a <HAL_TIM_PWM_Start+0x52>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	5c9b      	ldrb	r3, [r3, r2]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	1e5a      	subs	r2, r3, #1
 8004f14:	4193      	sbcs	r3, r2
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e007      	b.n	8004f2a <HAL_TIM_PWM_Start+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2241      	movs	r2, #65	; 0x41
 8004f1e:	5c9b      	ldrb	r3, [r3, r2]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	4193      	sbcs	r3, r2
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e064      	b.n	8004ffc <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_PWM_Start+0x7a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	223e      	movs	r2, #62	; 0x3e
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	5499      	strb	r1, [r3, r2]
 8004f40:	e013      	b.n	8004f6a <HAL_TIM_PWM_Start+0xa2>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x8a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	223f      	movs	r2, #63	; 0x3f
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	5499      	strb	r1, [r3, r2]
 8004f50:	e00b      	b.n	8004f6a <HAL_TIM_PWM_Start+0xa2>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x9a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	2102      	movs	r1, #2
 8004f5e:	5499      	strb	r1, [r3, r2]
 8004f60:	e003      	b.n	8004f6a <HAL_TIM_PWM_Start+0xa2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2241      	movs	r2, #65	; 0x41
 8004f66:	2102      	movs	r1, #2
 8004f68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	2201      	movs	r2, #1
 8004f72:	0018      	movs	r0, r3
 8004f74:	f000 fcdc 	bl	8005930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a21      	ldr	r2, [pc, #132]	; (8005004 <HAL_TIM_PWM_Start+0x13c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_TIM_PWM_Start+0xce>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a20      	ldr	r2, [pc, #128]	; (8005008 <HAL_TIM_PWM_Start+0x140>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_TIM_PWM_Start+0xce>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1e      	ldr	r2, [pc, #120]	; (800500c <HAL_TIM_PWM_Start+0x144>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xd2>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_TIM_PWM_Start+0xd4>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	0209      	lsls	r1, r1, #8
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a13      	ldr	r2, [pc, #76]	; (8005004 <HAL_TIM_PWM_Start+0x13c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0xfe>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	; (8005010 <HAL_TIM_PWM_Start+0x148>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2207      	movs	r2, #7
 8004fce:	4013      	ands	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d010      	beq.n	8004ffa <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	e007      	b.n	8004ffa <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b004      	add	sp, #16
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800
 8005010:	40000400 	.word	0x40000400

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2317      	movs	r3, #23
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	223c      	movs	r2, #60	; 0x3c
 800502c:	5c9b      	ldrb	r3, [r3, r2]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005032:	2302      	movs	r3, #2
 8005034:	e0ad      	b.n	8005192 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	223c      	movs	r2, #60	; 0x3c
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d100      	bne.n	8005046 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005044:	e076      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d900      	bls.n	800504e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800504c:	e095      	b.n	800517a <HAL_TIM_PWM_ConfigChannel+0x166>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d04e      	beq.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b08      	cmp	r3, #8
 8005058:	d900      	bls.n	800505c <HAL_TIM_PWM_ConfigChannel+0x48>
 800505a:	e08e      	b.n	800517a <HAL_TIM_PWM_ConfigChannel+0x166>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_PWM_ConfigChannel+0x56>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d021      	beq.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x98>
 8005068:	e087      	b.n	800517a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	0011      	movs	r1, r2
 8005072:	0018      	movs	r0, r3
 8005074:	f000 f9e2 	bl	800543c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2108      	movs	r1, #8
 8005084:	430a      	orrs	r2, r1
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2104      	movs	r1, #4
 8005094:	438a      	bics	r2, r1
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	619a      	str	r2, [r3, #24]
      break;
 80050aa:	e06b      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0011      	movs	r1, r2
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 fa3f 	bl	8005538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2180      	movs	r1, #128	; 0x80
 80050c6:	0109      	lsls	r1, r1, #4
 80050c8:	430a      	orrs	r2, r1
 80050ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4931      	ldr	r1, [pc, #196]	; (800519c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80050d8:	400a      	ands	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6999      	ldr	r1, [r3, #24]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	021a      	lsls	r2, r3, #8
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	619a      	str	r2, [r3, #24]
      break;
 80050f0:	e048      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0011      	movs	r1, r2
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 fa9a 	bl	8005634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2108      	movs	r1, #8
 800510c:	430a      	orrs	r2, r1
 800510e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2104      	movs	r1, #4
 800511c:	438a      	bics	r2, r1
 800511e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69d9      	ldr	r1, [r3, #28]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	61da      	str	r2, [r3, #28]
      break;
 8005132:	e027      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	0011      	movs	r1, r2
 800513c:	0018      	movs	r0, r3
 800513e:	f000 faf9 	bl	8005734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2180      	movs	r1, #128	; 0x80
 800514e:	0109      	lsls	r1, r1, #4
 8005150:	430a      	orrs	r2, r1
 8005152:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	490f      	ldr	r1, [pc, #60]	; (800519c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005160:	400a      	ands	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69d9      	ldr	r1, [r3, #28]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	61da      	str	r2, [r3, #28]
      break;
 8005178:	e004      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800517a:	2317      	movs	r3, #23
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
      break;
 8005182:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	223c      	movs	r2, #60	; 0x3c
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

  return status;
 800518c:	2317      	movs	r3, #23
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b006      	add	sp, #24
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	fffffbff 	.word	0xfffffbff

080051a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051aa:	230f      	movs	r3, #15
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	223c      	movs	r2, #60	; 0x3c
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIM_ConfigClockSource+0x20>
 80051bc:	2302      	movs	r3, #2
 80051be:	e0bc      	b.n	800533a <HAL_TIM_ConfigClockSource+0x19a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	223c      	movs	r2, #60	; 0x3c
 80051c4:	2101      	movs	r1, #1
 80051c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	223d      	movs	r2, #61	; 0x3d
 80051cc:	2102      	movs	r1, #2
 80051ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2277      	movs	r2, #119	; 0x77
 80051dc:	4393      	bics	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a58      	ldr	r2, [pc, #352]	; (8005344 <HAL_TIM_ConfigClockSource+0x1a4>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	0192      	lsls	r2, r2, #6
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d040      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xde>
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	0192      	lsls	r2, r2, #6
 8005200:	4293      	cmp	r3, r2
 8005202:	d900      	bls.n	8005206 <HAL_TIM_ConfigClockSource+0x66>
 8005204:	e088      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	0152      	lsls	r2, r2, #5
 800520a:	4293      	cmp	r3, r2
 800520c:	d100      	bne.n	8005210 <HAL_TIM_ConfigClockSource+0x70>
 800520e:	e088      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x182>
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	0152      	lsls	r2, r2, #5
 8005214:	4293      	cmp	r3, r2
 8005216:	d900      	bls.n	800521a <HAL_TIM_ConfigClockSource+0x7a>
 8005218:	e07e      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 800521a:	2b70      	cmp	r3, #112	; 0x70
 800521c:	d018      	beq.n	8005250 <HAL_TIM_ConfigClockSource+0xb0>
 800521e:	d900      	bls.n	8005222 <HAL_TIM_ConfigClockSource+0x82>
 8005220:	e07a      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 8005222:	2b60      	cmp	r3, #96	; 0x60
 8005224:	d04f      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x126>
 8005226:	d900      	bls.n	800522a <HAL_TIM_ConfigClockSource+0x8a>
 8005228:	e076      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 800522a:	2b50      	cmp	r3, #80	; 0x50
 800522c:	d03b      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x106>
 800522e:	d900      	bls.n	8005232 <HAL_TIM_ConfigClockSource+0x92>
 8005230:	e072      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d057      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x146>
 8005236:	d900      	bls.n	800523a <HAL_TIM_ConfigClockSource+0x9a>
 8005238:	e06e      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 800523a:	2b30      	cmp	r3, #48	; 0x30
 800523c:	d063      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x166>
 800523e:	d86b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d060      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x166>
 8005244:	d868      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d05d      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x166>
 800524a:	2b10      	cmp	r3, #16
 800524c:	d05b      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x166>
 800524e:	e063      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005260:	f000 fb46 	bl	80058f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2277      	movs	r2, #119	; 0x77
 8005270:	4313      	orrs	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	609a      	str	r2, [r3, #8]
      break;
 800527c:	e052      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	f000 fb2f 	bl	80058f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	01c9      	lsls	r1, r1, #7
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
      break;
 80052a4:	e03e      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b2:	001a      	movs	r2, r3
 80052b4:	f000 faa2 	bl	80057fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2150      	movs	r1, #80	; 0x50
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 fafc 	bl	80058bc <TIM_ITRx_SetConfig>
      break;
 80052c4:	e02e      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d2:	001a      	movs	r2, r3
 80052d4:	f000 fac0 	bl	8005858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2160      	movs	r1, #96	; 0x60
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 faec 	bl	80058bc <TIM_ITRx_SetConfig>
      break;
 80052e4:	e01e      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	001a      	movs	r2, r3
 80052f4:	f000 fa82 	bl	80057fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2140      	movs	r1, #64	; 0x40
 80052fe:	0018      	movs	r0, r3
 8005300:	f000 fadc 	bl	80058bc <TIM_ITRx_SetConfig>
      break;
 8005304:	e00e      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	0019      	movs	r1, r3
 8005310:	0010      	movs	r0, r2
 8005312:	f000 fad3 	bl	80058bc <TIM_ITRx_SetConfig>
      break;
 8005316:	e005      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005318:	230f      	movs	r3, #15
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
      break;
 8005320:	e000      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005322:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	223d      	movs	r2, #61	; 0x3d
 8005328:	2101      	movs	r1, #1
 800532a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	223c      	movs	r2, #60	; 0x3c
 8005330:	2100      	movs	r1, #0
 8005332:	5499      	strb	r1, [r3, r2]

  return status;
 8005334:	230f      	movs	r3, #15
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	781b      	ldrb	r3, [r3, #0]
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b004      	add	sp, #16
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	ffff00ff 	.word	0xffff00ff

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a32      	ldr	r2, [pc, #200]	; (8005424 <TIM_Base_SetConfig+0xdc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x20>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a31      	ldr	r2, [pc, #196]	; (8005428 <TIM_Base_SetConfig+0xe0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2270      	movs	r2, #112	; 0x70
 800536c:	4393      	bics	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a29      	ldr	r2, [pc, #164]	; (8005424 <TIM_Base_SetConfig+0xdc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0x5a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a28      	ldr	r2, [pc, #160]	; (8005428 <TIM_Base_SetConfig+0xe0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0x5a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a27      	ldr	r2, [pc, #156]	; (800542c <TIM_Base_SetConfig+0xe4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0x5a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a26      	ldr	r2, [pc, #152]	; (8005430 <TIM_Base_SetConfig+0xe8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0x5a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a25      	ldr	r2, [pc, #148]	; (8005434 <TIM_Base_SetConfig+0xec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a24      	ldr	r2, [pc, #144]	; (8005438 <TIM_Base_SetConfig+0xf0>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	4393      	bics	r3, r2
 80053ba:	001a      	movs	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a11      	ldr	r2, [pc, #68]	; (8005424 <TIM_Base_SetConfig+0xdc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0xaa>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a12      	ldr	r2, [pc, #72]	; (8005430 <TIM_Base_SetConfig+0xe8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0xaa>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a11      	ldr	r2, [pc, #68]	; (8005434 <TIM_Base_SetConfig+0xec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d103      	bne.n	80053fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2201      	movs	r2, #1
 8005406:	4013      	ands	r3, r2
 8005408:	2b01      	cmp	r3, #1
 800540a:	d106      	bne.n	800541a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2201      	movs	r2, #1
 8005412:	4393      	bics	r3, r2
 8005414:	001a      	movs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]
  }
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40000400 	.word	0x40000400
 800542c:	40002000 	.word	0x40002000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800
 8005438:	fffffcff 	.word	0xfffffcff

0800543c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	2201      	movs	r2, #1
 8005452:	4393      	bics	r3, r2
 8005454:	001a      	movs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2270      	movs	r2, #112	; 0x70
 800546a:	4393      	bics	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2203      	movs	r2, #3
 8005472:	4393      	bics	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2202      	movs	r2, #2
 8005484:	4393      	bics	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <TIM_OC1_SetConfig+0xe8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_OC1_SetConfig+0x6e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a22      	ldr	r2, [pc, #136]	; (8005528 <TIM_OC1_SetConfig+0xec>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_OC1_SetConfig+0x6e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a21      	ldr	r2, [pc, #132]	; (800552c <TIM_OC1_SetConfig+0xf0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d10c      	bne.n	80054c4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2208      	movs	r2, #8
 80054ae:	4393      	bics	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2204      	movs	r2, #4
 80054c0:	4393      	bics	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a17      	ldr	r2, [pc, #92]	; (8005524 <TIM_OC1_SetConfig+0xe8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC1_SetConfig+0xa0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a16      	ldr	r2, [pc, #88]	; (8005528 <TIM_OC1_SetConfig+0xec>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC1_SetConfig+0xa0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <TIM_OC1_SetConfig+0xf0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d111      	bne.n	8005500 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4a14      	ldr	r2, [pc, #80]	; (8005530 <TIM_OC1_SetConfig+0xf4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4a13      	ldr	r2, [pc, #76]	; (8005534 <TIM_OC1_SetConfig+0xf8>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b006      	add	sp, #24
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800
 8005530:	fffffeff 	.word	0xfffffeff
 8005534:	fffffdff 	.word	0xfffffdff

08005538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	2210      	movs	r2, #16
 800554e:	4393      	bics	r3, r2
 8005550:	001a      	movs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <TIM_OC2_SetConfig+0xe0>)
 8005566:	4013      	ands	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <TIM_OC2_SetConfig+0xe4>)
 800556e:	4013      	ands	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2220      	movs	r2, #32
 8005582:	4393      	bics	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <TIM_OC2_SetConfig+0xe8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2280      	movs	r2, #128	; 0x80
 800559e:	4393      	bics	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2240      	movs	r2, #64	; 0x40
 80055b2:	4393      	bics	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <TIM_OC2_SetConfig+0xe8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_OC2_SetConfig+0x96>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <TIM_OC2_SetConfig+0xec>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC2_SetConfig+0x96>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a17      	ldr	r2, [pc, #92]	; (8005628 <TIM_OC2_SetConfig+0xf0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d113      	bne.n	80055f6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <TIM_OC2_SetConfig+0xf4>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <TIM_OC2_SetConfig+0xf8>)
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b006      	add	sp, #24
 8005616:	bd80      	pop	{r7, pc}
 8005618:	ffff8fff 	.word	0xffff8fff
 800561c:	fffffcff 	.word	0xfffffcff
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	fffffbff 	.word	0xfffffbff
 8005630:	fffff7ff 	.word	0xfffff7ff

08005634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4a31      	ldr	r2, [pc, #196]	; (8005710 <TIM_OC3_SetConfig+0xdc>)
 800564a:	401a      	ands	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2270      	movs	r2, #112	; 0x70
 8005660:	4393      	bics	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2203      	movs	r2, #3
 8005668:	4393      	bics	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4a26      	ldr	r2, [pc, #152]	; (8005714 <TIM_OC3_SetConfig+0xe0>)
 800567a:	4013      	ands	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a22      	ldr	r2, [pc, #136]	; (8005718 <TIM_OC3_SetConfig+0xe4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10d      	bne.n	80056ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4a21      	ldr	r2, [pc, #132]	; (800571c <TIM_OC3_SetConfig+0xe8>)
 8005696:	4013      	ands	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <TIM_OC3_SetConfig+0xec>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <TIM_OC3_SetConfig+0xe4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_OC3_SetConfig+0x92>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <TIM_OC3_SetConfig+0xf0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_OC3_SetConfig+0x92>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a19      	ldr	r2, [pc, #100]	; (8005728 <TIM_OC3_SetConfig+0xf4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d113      	bne.n	80056ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <TIM_OC3_SetConfig+0xf8>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <TIM_OC3_SetConfig+0xfc>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b006      	add	sp, #24
 800570e:	bd80      	pop	{r7, pc}
 8005710:	fffffeff 	.word	0xfffffeff
 8005714:	fffffdff 	.word	0xfffffdff
 8005718:	40012c00 	.word	0x40012c00
 800571c:	fffff7ff 	.word	0xfffff7ff
 8005720:	fffffbff 	.word	0xfffffbff
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800
 800572c:	ffffefff 	.word	0xffffefff
 8005730:	ffffdfff 	.word	0xffffdfff

08005734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	4a24      	ldr	r2, [pc, #144]	; (80057dc <TIM_OC4_SetConfig+0xa8>)
 800574a:	401a      	ands	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <TIM_OC4_SetConfig+0xac>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <TIM_OC4_SetConfig+0xb0>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4a1b      	ldr	r2, [pc, #108]	; (80057e8 <TIM_OC4_SetConfig+0xb4>)
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a17      	ldr	r2, [pc, #92]	; (80057ec <TIM_OC4_SetConfig+0xb8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_OC4_SetConfig+0x70>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <TIM_OC4_SetConfig+0xbc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC4_SetConfig+0x70>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <TIM_OC4_SetConfig+0xc0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d109      	bne.n	80057b8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <TIM_OC4_SetConfig+0xc4>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b006      	add	sp, #24
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	ffffefff 	.word	0xffffefff
 80057e0:	ffff8fff 	.word	0xffff8fff
 80057e4:	fffffcff 	.word	0xfffffcff
 80057e8:	ffffdfff 	.word	0xffffdfff
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800
 80057f8:	ffffbfff 	.word	0xffffbfff

080057fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	2201      	movs	r2, #1
 8005814:	4393      	bics	r3, r2
 8005816:	001a      	movs	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	22f0      	movs	r2, #240	; 0xf0
 8005826:	4393      	bics	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	220a      	movs	r2, #10
 8005838:	4393      	bics	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b006      	add	sp, #24
 8005856:	bd80      	pop	{r7, pc}

08005858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	2210      	movs	r2, #16
 8005870:	4393      	bics	r3, r2
 8005872:	001a      	movs	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <TIM_TI2_ConfigInputStage+0x60>)
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	031b      	lsls	r3, r3, #12
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	22a0      	movs	r2, #160	; 0xa0
 8005894:	4393      	bics	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b006      	add	sp, #24
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	ffff0fff 	.word	0xffff0fff

080058bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2270      	movs	r2, #112	; 0x70
 80058d0:	4393      	bics	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	2207      	movs	r2, #7
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b004      	add	sp, #16
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <TIM_ETR_SetConfig+0x3c>)
 8005908:	4013      	ands	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	431a      	orrs	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4313      	orrs	r3, r2
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b006      	add	sp, #24
 800592a:	bd80      	pop	{r7, pc}
 800592c:	ffff00ff 	.word	0xffff00ff

08005930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	221f      	movs	r2, #31
 8005940:	4013      	ands	r3, r2
 8005942:	2201      	movs	r2, #1
 8005944:	409a      	lsls	r2, r3
 8005946:	0013      	movs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	43d2      	mvns	r2, r2
 8005952:	401a      	ands	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	211f      	movs	r1, #31
 8005960:	400b      	ands	r3, r1
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4099      	lsls	r1, r3
 8005966:	000b      	movs	r3, r1
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b006      	add	sp, #24
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	223c      	movs	r2, #60	; 0x3c
 8005986:	5c9b      	ldrb	r3, [r3, r2]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e03c      	b.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	223c      	movs	r2, #60	; 0x3c
 8005994:	2101      	movs	r1, #1
 8005996:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	223d      	movs	r2, #61	; 0x3d
 800599c:	2102      	movs	r1, #2
 800599e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2270      	movs	r2, #112	; 0x70
 80059b4:	4393      	bics	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a11      	ldr	r2, [pc, #68]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a0f      	ldr	r2, [pc, #60]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10c      	bne.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	4393      	bics	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	223d      	movs	r2, #61	; 0x3d
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	223c      	movs	r2, #60	; 0x3c
 8005a04:	2100      	movs	r1, #0
 8005a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b004      	add	sp, #16
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40000400 	.word	0x40000400

08005a1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	223c      	movs	r2, #60	; 0x3c
 8005a2e:	5c9b      	ldrb	r3, [r3, r2]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e03e      	b.n	8005ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	223c      	movs	r2, #60	; 0x3c
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	4393      	bics	r3, r2
 8005a46:	001a      	movs	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005a54:	401a      	ands	r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005a62:	401a      	ands	r2, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005a70:	401a      	ands	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005a7e:	401a      	ands	r2, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	223c      	movs	r2, #60	; 0x3c
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b004      	add	sp, #16
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	fffffcff 	.word	0xfffffcff
 8005ac4:	fffffbff 	.word	0xfffffbff
 8005ac8:	fffff7ff 	.word	0xfffff7ff
 8005acc:	ffffefff 	.word	0xffffefff
 8005ad0:	ffffdfff 	.word	0xffffdfff
 8005ad4:	ffffbfff 	.word	0xffffbfff

08005ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e044      	b.n	8005b74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d107      	bne.n	8005b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2278      	movs	r2, #120	; 0x78
 8005af6:	2100      	movs	r1, #0
 8005af8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7fd fab1 	bl	8003064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2224      	movs	r2, #36	; 0x24
 8005b06:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2101      	movs	r1, #1
 8005b14:	438a      	bics	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 f954 	bl	8005dd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 f828 	bl	8005b80 <UART_SetConfig>
 8005b30:	0003      	movs	r3, r0
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e01c      	b.n	8005b74 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	490d      	ldr	r1, [pc, #52]	; (8005b7c <HAL_UART_Init+0xa4>)
 8005b46:	400a      	ands	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2108      	movs	r1, #8
 8005b56:	438a      	bics	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2101      	movs	r1, #1
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 f9e3 	bl	8005f38 <UART_CheckIdleState>
 8005b72:	0003      	movs	r3, r0
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	fffff7ff 	.word	0xfffff7ff

08005b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b88:	231e      	movs	r3, #30
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a83      	ldr	r2, [pc, #524]	; (8005dbc <UART_SetConfig+0x23c>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4a7e      	ldr	r2, [pc, #504]	; (8005dc0 <UART_SetConfig+0x240>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	0019      	movs	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4a75      	ldr	r2, [pc, #468]	; (8005dc4 <UART_SetConfig+0x244>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bfc:	4b72      	ldr	r3, [pc, #456]	; (8005dc8 <UART_SetConfig+0x248>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	2203      	movs	r2, #3
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d00d      	beq.n	8005c24 <UART_SetConfig+0xa4>
 8005c08:	d81b      	bhi.n	8005c42 <UART_SetConfig+0xc2>
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d014      	beq.n	8005c38 <UART_SetConfig+0xb8>
 8005c0e:	d818      	bhi.n	8005c42 <UART_SetConfig+0xc2>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <UART_SetConfig+0x9a>
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d00a      	beq.n	8005c2e <UART_SetConfig+0xae>
 8005c18:	e013      	b.n	8005c42 <UART_SetConfig+0xc2>
 8005c1a:	231f      	movs	r3, #31
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e012      	b.n	8005c4a <UART_SetConfig+0xca>
 8005c24:	231f      	movs	r3, #31
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	2202      	movs	r2, #2
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e00d      	b.n	8005c4a <UART_SetConfig+0xca>
 8005c2e:	231f      	movs	r3, #31
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	2204      	movs	r2, #4
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e008      	b.n	8005c4a <UART_SetConfig+0xca>
 8005c38:	231f      	movs	r3, #31
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e003      	b.n	8005c4a <UART_SetConfig+0xca>
 8005c42:	231f      	movs	r3, #31
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	2210      	movs	r2, #16
 8005c48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d15c      	bne.n	8005d10 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8005c56:	231f      	movs	r3, #31
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d015      	beq.n	8005c8c <UART_SetConfig+0x10c>
 8005c60:	dc18      	bgt.n	8005c94 <UART_SetConfig+0x114>
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d00d      	beq.n	8005c82 <UART_SetConfig+0x102>
 8005c66:	dc15      	bgt.n	8005c94 <UART_SetConfig+0x114>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <UART_SetConfig+0xf2>
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d005      	beq.n	8005c7c <UART_SetConfig+0xfc>
 8005c70:	e010      	b.n	8005c94 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c72:	f7fe ff9d 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8005c76:	0003      	movs	r3, r0
 8005c78:	61bb      	str	r3, [r7, #24]
        break;
 8005c7a:	e012      	b.n	8005ca2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c7c:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <UART_SetConfig+0x24c>)
 8005c7e:	61bb      	str	r3, [r7, #24]
        break;
 8005c80:	e00f      	b.n	8005ca2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c82:	f7fe ff35 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8005c86:	0003      	movs	r3, r0
 8005c88:	61bb      	str	r3, [r7, #24]
        break;
 8005c8a:	e00a      	b.n	8005ca2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	61bb      	str	r3, [r7, #24]
        break;
 8005c92:	e006      	b.n	8005ca2 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c98:	231e      	movs	r3, #30
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
        break;
 8005ca0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d100      	bne.n	8005caa <UART_SetConfig+0x12a>
 8005ca8:	e07a      	b.n	8005da0 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	005a      	lsls	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	18d2      	adds	r2, r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	0019      	movs	r1, r3
 8005cbc:	0010      	movs	r0, r2
 8005cbe:	f7fa fa23 	bl	8000108 <__udivsi3>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b0f      	cmp	r3, #15
 8005cca:	d91c      	bls.n	8005d06 <UART_SetConfig+0x186>
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	025b      	lsls	r3, r3, #9
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d217      	bcs.n	8005d06 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	200e      	movs	r0, #14
 8005cdc:	183b      	adds	r3, r7, r0
 8005cde:	210f      	movs	r1, #15
 8005ce0:	438a      	bics	r2, r1
 8005ce2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2207      	movs	r2, #7
 8005cec:	4013      	ands	r3, r2
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	183b      	adds	r3, r7, r0
 8005cf2:	183a      	adds	r2, r7, r0
 8005cf4:	8812      	ldrh	r2, [r2, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	183a      	adds	r2, r7, r0
 8005d00:	8812      	ldrh	r2, [r2, #0]
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	e04c      	b.n	8005da0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005d06:	231e      	movs	r3, #30
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e047      	b.n	8005da0 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d10:	231f      	movs	r3, #31
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d015      	beq.n	8005d46 <UART_SetConfig+0x1c6>
 8005d1a:	dc18      	bgt.n	8005d4e <UART_SetConfig+0x1ce>
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d00d      	beq.n	8005d3c <UART_SetConfig+0x1bc>
 8005d20:	dc15      	bgt.n	8005d4e <UART_SetConfig+0x1ce>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <UART_SetConfig+0x1ac>
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d005      	beq.n	8005d36 <UART_SetConfig+0x1b6>
 8005d2a:	e010      	b.n	8005d4e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe ff40 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8005d30:	0003      	movs	r3, r0
 8005d32:	61bb      	str	r3, [r7, #24]
        break;
 8005d34:	e012      	b.n	8005d5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d36:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <UART_SetConfig+0x24c>)
 8005d38:	61bb      	str	r3, [r7, #24]
        break;
 8005d3a:	e00f      	b.n	8005d5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3c:	f7fe fed8 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8005d40:	0003      	movs	r3, r0
 8005d42:	61bb      	str	r3, [r7, #24]
        break;
 8005d44:	e00a      	b.n	8005d5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	61bb      	str	r3, [r7, #24]
        break;
 8005d4c:	e006      	b.n	8005d5c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d52:	231e      	movs	r3, #30
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
        break;
 8005d5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01e      	beq.n	8005da0 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	085a      	lsrs	r2, r3, #1
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	0019      	movs	r1, r3
 8005d72:	0010      	movs	r0, r2
 8005d74:	f7fa f9c8 	bl	8000108 <__udivsi3>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d90a      	bls.n	8005d98 <UART_SetConfig+0x218>
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	025b      	lsls	r3, r3, #9
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d205      	bcs.n	8005d98 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e003      	b.n	8005da0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005d98:	231e      	movs	r3, #30
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005dac:	231e      	movs	r3, #30
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	781b      	ldrb	r3, [r3, #0]
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b008      	add	sp, #32
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	ffff69f3 	.word	0xffff69f3
 8005dc0:	ffffcfff 	.word	0xffffcfff
 8005dc4:	fffff4ff 	.word	0xfffff4ff
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	007a1200 	.word	0x007a1200

08005dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4013      	ands	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a4a      	ldr	r2, [pc, #296]	; (8005f14 <UART_AdvFeatureConfig+0x144>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	0019      	movs	r1, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4013      	ands	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4a43      	ldr	r2, [pc, #268]	; (8005f18 <UART_AdvFeatureConfig+0x148>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	0019      	movs	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2202      	movs	r2, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a3b      	ldr	r2, [pc, #236]	; (8005f1c <UART_AdvFeatureConfig+0x14c>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	0019      	movs	r1, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2204      	movs	r2, #4
 8005e44:	4013      	ands	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4a34      	ldr	r2, [pc, #208]	; (8005f20 <UART_AdvFeatureConfig+0x150>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	0019      	movs	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2210      	movs	r2, #16
 8005e66:	4013      	ands	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4a2c      	ldr	r2, [pc, #176]	; (8005f24 <UART_AdvFeatureConfig+0x154>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	0019      	movs	r1, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2220      	movs	r2, #32
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <UART_AdvFeatureConfig+0x158>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	0019      	movs	r1, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2240      	movs	r2, #64	; 0x40
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d01d      	beq.n	8005eea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <UART_AdvFeatureConfig+0x15c>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	035b      	lsls	r3, r3, #13
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d10b      	bne.n	8005eea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <UART_AdvFeatureConfig+0x160>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	0019      	movs	r1, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4a0e      	ldr	r2, [pc, #56]	; (8005f34 <UART_AdvFeatureConfig+0x164>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	0019      	movs	r1, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b002      	add	sp, #8
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	ffff7fff 	.word	0xffff7fff
 8005f18:	fffdffff 	.word	0xfffdffff
 8005f1c:	fffeffff 	.word	0xfffeffff
 8005f20:	fffbffff 	.word	0xfffbffff
 8005f24:	ffffefff 	.word	0xffffefff
 8005f28:	ffffdfff 	.word	0xffffdfff
 8005f2c:	ffefffff 	.word	0xffefffff
 8005f30:	ff9fffff 	.word	0xff9fffff
 8005f34:	fff7ffff 	.word	0xfff7ffff

08005f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b092      	sub	sp, #72	; 0x48
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2284      	movs	r2, #132	; 0x84
 8005f44:	2100      	movs	r1, #0
 8005f46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f48:	f7fd f95c 	bl	8003204 <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2208      	movs	r2, #8
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d12c      	bne.n	8005fb8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	2280      	movs	r2, #128	; 0x80
 8005f62:	0391      	lsls	r1, r2, #14
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4a46      	ldr	r2, [pc, #280]	; (8006080 <UART_CheckIdleState+0x148>)
 8005f68:	9200      	str	r2, [sp, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f000 f88c 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005f70:	1e03      	subs	r3, r0, #0
 8005f72:	d021      	beq.n	8005fb8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f74:	f3ef 8310 	mrs	r3, PRIMASK
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f7e:	2301      	movs	r3, #1
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	f383 8810 	msr	PRIMASK, r3
}
 8005f88:	46c0      	nop			; (mov r8, r8)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	438a      	bics	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	f383 8810 	msr	PRIMASK, r3
}
 8005fa4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2278      	movs	r2, #120	; 0x78
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e05f      	b.n	8006078 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d146      	bne.n	8006054 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	2280      	movs	r2, #128	; 0x80
 8005fca:	03d1      	lsls	r1, r2, #15
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4a2c      	ldr	r2, [pc, #176]	; (8006080 <UART_CheckIdleState+0x148>)
 8005fd0:	9200      	str	r2, [sp, #0]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f000 f858 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	1e03      	subs	r3, r0, #0
 8005fda:	d03b      	beq.n	8006054 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f383 8810 	msr	PRIMASK, r3
}
 8005ff0:	46c0      	nop			; (mov r8, r8)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4921      	ldr	r1, [pc, #132]	; (8006084 <UART_CheckIdleState+0x14c>)
 8005ffe:	400a      	ands	r2, r1
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f383 8810 	msr	PRIMASK, r3
}
 800600c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600e:	f3ef 8310 	mrs	r3, PRIMASK
 8006012:	61bb      	str	r3, [r7, #24]
  return(result);
 8006014:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
 8006018:	2301      	movs	r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f383 8810 	msr	PRIMASK, r3
}
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2101      	movs	r1, #1
 8006030:	438a      	bics	r2, r1
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f383 8810 	msr	PRIMASK, r3
}
 800603e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2280      	movs	r2, #128	; 0x80
 8006044:	2120      	movs	r1, #32
 8006046:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2278      	movs	r2, #120	; 0x78
 800604c:	2100      	movs	r1, #0
 800604e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e011      	b.n	8006078 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2280      	movs	r2, #128	; 0x80
 800605e:	2120      	movs	r1, #32
 8006060:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2278      	movs	r2, #120	; 0x78
 8006072:	2100      	movs	r1, #0
 8006074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	0018      	movs	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	b010      	add	sp, #64	; 0x40
 800607e:	bd80      	pop	{r7, pc}
 8006080:	01ffffff 	.word	0x01ffffff
 8006084:	fffffedf 	.word	0xfffffedf

08006088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	1dfb      	adds	r3, r7, #7
 8006096:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006098:	e051      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3301      	adds	r3, #1
 800609e:	d04e      	beq.n	800613e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a0:	f7fd f8b0 	bl	8003204 <HAL_GetTick>
 80060a4:	0002      	movs	r2, r0
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d302      	bcc.n	80060b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e051      	b.n	800615e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2204      	movs	r2, #4
 80060c2:	4013      	ands	r3, r2
 80060c4:	d03b      	beq.n	800613e <UART_WaitOnFlagUntilTimeout+0xb6>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b80      	cmp	r3, #128	; 0x80
 80060ca:	d038      	beq.n	800613e <UART_WaitOnFlagUntilTimeout+0xb6>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d035      	beq.n	800613e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2208      	movs	r2, #8
 80060da:	4013      	ands	r3, r2
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d111      	bne.n	8006104 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2208      	movs	r2, #8
 80060e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	0018      	movs	r0, r3
 80060ec:	f000 f83c 	bl	8006168 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2284      	movs	r2, #132	; 0x84
 80060f4:	2108      	movs	r1, #8
 80060f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2278      	movs	r2, #120	; 0x78
 80060fc:	2100      	movs	r1, #0
 80060fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e02c      	b.n	800615e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	401a      	ands	r2, r3
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	429a      	cmp	r2, r3
 8006116:	d112      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2280      	movs	r2, #128	; 0x80
 800611e:	0112      	lsls	r2, r2, #4
 8006120:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f81f 	bl	8006168 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2284      	movs	r2, #132	; 0x84
 800612e:	2120      	movs	r1, #32
 8006130:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2278      	movs	r2, #120	; 0x78
 8006136:	2100      	movs	r1, #0
 8006138:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e00f      	b.n	800615e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	425a      	negs	r2, r3
 800614e:	4153      	adcs	r3, r2
 8006150:	b2db      	uxtb	r3, r3
 8006152:	001a      	movs	r2, r3
 8006154:	1dfb      	adds	r3, r7, #7
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d09e      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b004      	add	sp, #16
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006170:	f3ef 8310 	mrs	r3, PRIMASK
 8006174:	617b      	str	r3, [r7, #20]
  return(result);
 8006176:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
 800617a:	2301      	movs	r3, #1
 800617c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f383 8810 	msr	PRIMASK, r3
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4926      	ldr	r1, [pc, #152]	; (800622c <UART_EndRxTransfer+0xc4>)
 8006192:	400a      	ands	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a2:	f3ef 8310 	mrs	r3, PRIMASK
 80061a6:	623b      	str	r3, [r7, #32]
  return(result);
 80061a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
 80061ac:	2301      	movs	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	f383 8810 	msr	PRIMASK, r3
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2101      	movs	r1, #1
 80061c4:	438a      	bics	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f383 8810 	msr	PRIMASK, r3
}
 80061d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d118      	bne.n	800620e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061dc:	f3ef 8310 	mrs	r3, PRIMASK
 80061e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80061e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e6:	2301      	movs	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2110      	movs	r1, #16
 80061fe:	438a      	bics	r2, r1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f383 8810 	msr	PRIMASK, r3
}
 800620c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2280      	movs	r2, #128	; 0x80
 8006212:	2120      	movs	r1, #32
 8006214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	46bd      	mov	sp, r7
 8006226:	b00e      	add	sp, #56	; 0x38
 8006228:	bd80      	pop	{r7, pc}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	fffffedf 	.word	0xfffffedf

08006230 <memset>:
 8006230:	0003      	movs	r3, r0
 8006232:	1882      	adds	r2, r0, r2
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	7019      	strb	r1, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	2600      	movs	r6, #0
 8006244:	4c0c      	ldr	r4, [pc, #48]	; (8006278 <__libc_init_array+0x38>)
 8006246:	4d0d      	ldr	r5, [pc, #52]	; (800627c <__libc_init_array+0x3c>)
 8006248:	1b64      	subs	r4, r4, r5
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	42a6      	cmp	r6, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	2600      	movs	r6, #0
 8006252:	f001 f829 	bl	80072a8 <_init>
 8006256:	4c0a      	ldr	r4, [pc, #40]	; (8006280 <__libc_init_array+0x40>)
 8006258:	4d0a      	ldr	r5, [pc, #40]	; (8006284 <__libc_init_array+0x44>)
 800625a:	1b64      	subs	r4, r4, r5
 800625c:	10a4      	asrs	r4, r4, #2
 800625e:	42a6      	cmp	r6, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	00b3      	lsls	r3, r6, #2
 8006266:	58eb      	ldr	r3, [r5, r3]
 8006268:	4798      	blx	r3
 800626a:	3601      	adds	r6, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	00b3      	lsls	r3, r6, #2
 8006270:	58eb      	ldr	r3, [r5, r3]
 8006272:	4798      	blx	r3
 8006274:	3601      	adds	r6, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	08007570 	.word	0x08007570
 800627c:	08007570 	.word	0x08007570
 8006280:	08007574 	.word	0x08007574
 8006284:	08007570 	.word	0x08007570

08006288 <memcpy>:
 8006288:	2300      	movs	r3, #0
 800628a:	b510      	push	{r4, lr}
 800628c:	429a      	cmp	r2, r3
 800628e:	d100      	bne.n	8006292 <memcpy+0xa>
 8006290:	bd10      	pop	{r4, pc}
 8006292:	5ccc      	ldrb	r4, [r1, r3]
 8006294:	54c4      	strb	r4, [r0, r3]
 8006296:	3301      	adds	r3, #1
 8006298:	e7f8      	b.n	800628c <memcpy+0x4>
	...

0800629c <sin>:
 800629c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <sin+0x80>)
 80062a0:	004b      	lsls	r3, r1, #1
 80062a2:	b087      	sub	sp, #28
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	4293      	cmp	r3, r2
 80062a8:	dc06      	bgt.n	80062b8 <sin+0x1c>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2200      	movs	r2, #0
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2300      	movs	r3, #0
 80062b2:	f000 f8f7 	bl	80064a4 <__kernel_sin>
 80062b6:	e006      	b.n	80062c6 <sin+0x2a>
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <sin+0x84>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	dd05      	ble.n	80062ca <sin+0x2e>
 80062be:	0002      	movs	r2, r0
 80062c0:	000b      	movs	r3, r1
 80062c2:	f7fb fb0f 	bl	80018e4 <__aeabi_dsub>
 80062c6:	b007      	add	sp, #28
 80062c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ca:	aa02      	add	r2, sp, #8
 80062cc:	f000 f996 	bl	80065fc <__ieee754_rem_pio2>
 80062d0:	9c04      	ldr	r4, [sp, #16]
 80062d2:	9d05      	ldr	r5, [sp, #20]
 80062d4:	2303      	movs	r3, #3
 80062d6:	4003      	ands	r3, r0
 80062d8:	9802      	ldr	r0, [sp, #8]
 80062da:	9903      	ldr	r1, [sp, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d008      	beq.n	80062f2 <sin+0x56>
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d00b      	beq.n	80062fc <sin+0x60>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d113      	bne.n	8006310 <sin+0x74>
 80062e8:	3301      	adds	r3, #1
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	0022      	movs	r2, r4
 80062ee:	002b      	movs	r3, r5
 80062f0:	e7df      	b.n	80062b2 <sin+0x16>
 80062f2:	0022      	movs	r2, r4
 80062f4:	002b      	movs	r3, r5
 80062f6:	f000 f815 	bl	8006324 <__kernel_cos>
 80062fa:	e7e4      	b.n	80062c6 <sin+0x2a>
 80062fc:	2301      	movs	r3, #1
 80062fe:	0022      	movs	r2, r4
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	002b      	movs	r3, r5
 8006304:	f000 f8ce 	bl	80064a4 <__kernel_sin>
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	18c9      	adds	r1, r1, r3
 800630e:	e7da      	b.n	80062c6 <sin+0x2a>
 8006310:	0022      	movs	r2, r4
 8006312:	002b      	movs	r3, r5
 8006314:	f000 f806 	bl	8006324 <__kernel_cos>
 8006318:	e7f6      	b.n	8006308 <sin+0x6c>
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	3fe921fb 	.word	0x3fe921fb
 8006320:	7fefffff 	.word	0x7fefffff

08006324 <__kernel_cos>:
 8006324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006326:	b087      	sub	sp, #28
 8006328:	9204      	str	r2, [sp, #16]
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	004b      	lsls	r3, r1, #1
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	23f9      	movs	r3, #249	; 0xf9
 8006334:	9a00      	ldr	r2, [sp, #0]
 8006336:	0007      	movs	r7, r0
 8006338:	000e      	movs	r6, r1
 800633a:	059b      	lsls	r3, r3, #22
 800633c:	429a      	cmp	r2, r3
 800633e:	da04      	bge.n	800634a <__kernel_cos+0x26>
 8006340:	f7fb fe52 	bl	8001fe8 <__aeabi_d2iz>
 8006344:	2800      	cmp	r0, #0
 8006346:	d100      	bne.n	800634a <__kernel_cos+0x26>
 8006348:	e084      	b.n	8006454 <__kernel_cos+0x130>
 800634a:	003a      	movs	r2, r7
 800634c:	0033      	movs	r3, r6
 800634e:	0038      	movs	r0, r7
 8006350:	0031      	movs	r1, r6
 8006352:	f7fb f805 	bl	8001360 <__aeabi_dmul>
 8006356:	2200      	movs	r2, #0
 8006358:	4b40      	ldr	r3, [pc, #256]	; (800645c <__kernel_cos+0x138>)
 800635a:	0004      	movs	r4, r0
 800635c:	000d      	movs	r5, r1
 800635e:	f7fa ffff 	bl	8001360 <__aeabi_dmul>
 8006362:	4a3f      	ldr	r2, [pc, #252]	; (8006460 <__kernel_cos+0x13c>)
 8006364:	9002      	str	r0, [sp, #8]
 8006366:	9103      	str	r1, [sp, #12]
 8006368:	4b3e      	ldr	r3, [pc, #248]	; (8006464 <__kernel_cos+0x140>)
 800636a:	0020      	movs	r0, r4
 800636c:	0029      	movs	r1, r5
 800636e:	f7fa fff7 	bl	8001360 <__aeabi_dmul>
 8006372:	4a3d      	ldr	r2, [pc, #244]	; (8006468 <__kernel_cos+0x144>)
 8006374:	4b3d      	ldr	r3, [pc, #244]	; (800646c <__kernel_cos+0x148>)
 8006376:	f7fa f899 	bl	80004ac <__aeabi_dadd>
 800637a:	0022      	movs	r2, r4
 800637c:	002b      	movs	r3, r5
 800637e:	f7fa ffef 	bl	8001360 <__aeabi_dmul>
 8006382:	4a3b      	ldr	r2, [pc, #236]	; (8006470 <__kernel_cos+0x14c>)
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <__kernel_cos+0x150>)
 8006386:	f7fb faad 	bl	80018e4 <__aeabi_dsub>
 800638a:	0022      	movs	r2, r4
 800638c:	002b      	movs	r3, r5
 800638e:	f7fa ffe7 	bl	8001360 <__aeabi_dmul>
 8006392:	4a39      	ldr	r2, [pc, #228]	; (8006478 <__kernel_cos+0x154>)
 8006394:	4b39      	ldr	r3, [pc, #228]	; (800647c <__kernel_cos+0x158>)
 8006396:	f7fa f889 	bl	80004ac <__aeabi_dadd>
 800639a:	0022      	movs	r2, r4
 800639c:	002b      	movs	r3, r5
 800639e:	f7fa ffdf 	bl	8001360 <__aeabi_dmul>
 80063a2:	4a37      	ldr	r2, [pc, #220]	; (8006480 <__kernel_cos+0x15c>)
 80063a4:	4b37      	ldr	r3, [pc, #220]	; (8006484 <__kernel_cos+0x160>)
 80063a6:	f7fb fa9d 	bl	80018e4 <__aeabi_dsub>
 80063aa:	0022      	movs	r2, r4
 80063ac:	002b      	movs	r3, r5
 80063ae:	f7fa ffd7 	bl	8001360 <__aeabi_dmul>
 80063b2:	4a35      	ldr	r2, [pc, #212]	; (8006488 <__kernel_cos+0x164>)
 80063b4:	4b35      	ldr	r3, [pc, #212]	; (800648c <__kernel_cos+0x168>)
 80063b6:	f7fa f879 	bl	80004ac <__aeabi_dadd>
 80063ba:	0022      	movs	r2, r4
 80063bc:	002b      	movs	r3, r5
 80063be:	f7fa ffcf 	bl	8001360 <__aeabi_dmul>
 80063c2:	0022      	movs	r2, r4
 80063c4:	002b      	movs	r3, r5
 80063c6:	f7fa ffcb 	bl	8001360 <__aeabi_dmul>
 80063ca:	9a04      	ldr	r2, [sp, #16]
 80063cc:	9b05      	ldr	r3, [sp, #20]
 80063ce:	0004      	movs	r4, r0
 80063d0:	000d      	movs	r5, r1
 80063d2:	0038      	movs	r0, r7
 80063d4:	0031      	movs	r1, r6
 80063d6:	f7fa ffc3 	bl	8001360 <__aeabi_dmul>
 80063da:	0002      	movs	r2, r0
 80063dc:	000b      	movs	r3, r1
 80063de:	0020      	movs	r0, r4
 80063e0:	0029      	movs	r1, r5
 80063e2:	f7fb fa7f 	bl	80018e4 <__aeabi_dsub>
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <__kernel_cos+0x16c>)
 80063e8:	9a00      	ldr	r2, [sp, #0]
 80063ea:	0004      	movs	r4, r0
 80063ec:	000d      	movs	r5, r1
 80063ee:	429a      	cmp	r2, r3
 80063f0:	dc0d      	bgt.n	800640e <__kernel_cos+0xea>
 80063f2:	0002      	movs	r2, r0
 80063f4:	000b      	movs	r3, r1
 80063f6:	9802      	ldr	r0, [sp, #8]
 80063f8:	9903      	ldr	r1, [sp, #12]
 80063fa:	f7fb fa73 	bl	80018e4 <__aeabi_dsub>
 80063fe:	0002      	movs	r2, r0
 8006400:	2000      	movs	r0, #0
 8006402:	000b      	movs	r3, r1
 8006404:	4923      	ldr	r1, [pc, #140]	; (8006494 <__kernel_cos+0x170>)
 8006406:	f7fb fa6d 	bl	80018e4 <__aeabi_dsub>
 800640a:	b007      	add	sp, #28
 800640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <__kernel_cos+0x174>)
 8006410:	9a00      	ldr	r2, [sp, #0]
 8006412:	2600      	movs	r6, #0
 8006414:	429a      	cmp	r2, r3
 8006416:	dc1b      	bgt.n	8006450 <__kernel_cos+0x12c>
 8006418:	0013      	movs	r3, r2
 800641a:	4a20      	ldr	r2, [pc, #128]	; (800649c <__kernel_cos+0x178>)
 800641c:	4694      	mov	ip, r2
 800641e:	4463      	add	r3, ip
 8006420:	001f      	movs	r7, r3
 8006422:	0032      	movs	r2, r6
 8006424:	003b      	movs	r3, r7
 8006426:	2000      	movs	r0, #0
 8006428:	491a      	ldr	r1, [pc, #104]	; (8006494 <__kernel_cos+0x170>)
 800642a:	f7fb fa5b 	bl	80018e4 <__aeabi_dsub>
 800642e:	0032      	movs	r2, r6
 8006430:	003b      	movs	r3, r7
 8006432:	9000      	str	r0, [sp, #0]
 8006434:	9101      	str	r1, [sp, #4]
 8006436:	9802      	ldr	r0, [sp, #8]
 8006438:	9903      	ldr	r1, [sp, #12]
 800643a:	f7fb fa53 	bl	80018e4 <__aeabi_dsub>
 800643e:	0022      	movs	r2, r4
 8006440:	002b      	movs	r3, r5
 8006442:	f7fb fa4f 	bl	80018e4 <__aeabi_dsub>
 8006446:	0002      	movs	r2, r0
 8006448:	000b      	movs	r3, r1
 800644a:	9800      	ldr	r0, [sp, #0]
 800644c:	9901      	ldr	r1, [sp, #4]
 800644e:	e7da      	b.n	8006406 <__kernel_cos+0xe2>
 8006450:	4f13      	ldr	r7, [pc, #76]	; (80064a0 <__kernel_cos+0x17c>)
 8006452:	e7e6      	b.n	8006422 <__kernel_cos+0xfe>
 8006454:	2000      	movs	r0, #0
 8006456:	490f      	ldr	r1, [pc, #60]	; (8006494 <__kernel_cos+0x170>)
 8006458:	e7d7      	b.n	800640a <__kernel_cos+0xe6>
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	3fe00000 	.word	0x3fe00000
 8006460:	be8838d4 	.word	0xbe8838d4
 8006464:	bda8fae9 	.word	0xbda8fae9
 8006468:	bdb4b1c4 	.word	0xbdb4b1c4
 800646c:	3e21ee9e 	.word	0x3e21ee9e
 8006470:	809c52ad 	.word	0x809c52ad
 8006474:	3e927e4f 	.word	0x3e927e4f
 8006478:	19cb1590 	.word	0x19cb1590
 800647c:	3efa01a0 	.word	0x3efa01a0
 8006480:	16c15177 	.word	0x16c15177
 8006484:	3f56c16c 	.word	0x3f56c16c
 8006488:	5555554c 	.word	0x5555554c
 800648c:	3fa55555 	.word	0x3fa55555
 8006490:	3fd33332 	.word	0x3fd33332
 8006494:	3ff00000 	.word	0x3ff00000
 8006498:	3fe90000 	.word	0x3fe90000
 800649c:	ffe00000 	.word	0xffe00000
 80064a0:	3fd20000 	.word	0x3fd20000

080064a4 <__kernel_sin>:
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	9202      	str	r2, [sp, #8]
 80064aa:	9303      	str	r3, [sp, #12]
 80064ac:	22f9      	movs	r2, #249	; 0xf9
 80064ae:	004b      	lsls	r3, r1, #1
 80064b0:	0007      	movs	r7, r0
 80064b2:	000e      	movs	r6, r1
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	0592      	lsls	r2, r2, #22
 80064b8:	4293      	cmp	r3, r2
 80064ba:	da03      	bge.n	80064c4 <__kernel_sin+0x20>
 80064bc:	f7fb fd94 	bl	8001fe8 <__aeabi_d2iz>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d04c      	beq.n	800655e <__kernel_sin+0xba>
 80064c4:	003a      	movs	r2, r7
 80064c6:	0033      	movs	r3, r6
 80064c8:	0038      	movs	r0, r7
 80064ca:	0031      	movs	r1, r6
 80064cc:	f7fa ff48 	bl	8001360 <__aeabi_dmul>
 80064d0:	0004      	movs	r4, r0
 80064d2:	000d      	movs	r5, r1
 80064d4:	0002      	movs	r2, r0
 80064d6:	000b      	movs	r3, r1
 80064d8:	0038      	movs	r0, r7
 80064da:	0031      	movs	r1, r6
 80064dc:	f7fa ff40 	bl	8001360 <__aeabi_dmul>
 80064e0:	4a39      	ldr	r2, [pc, #228]	; (80065c8 <__kernel_sin+0x124>)
 80064e2:	9000      	str	r0, [sp, #0]
 80064e4:	9101      	str	r1, [sp, #4]
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <__kernel_sin+0x128>)
 80064e8:	0020      	movs	r0, r4
 80064ea:	0029      	movs	r1, r5
 80064ec:	f7fa ff38 	bl	8001360 <__aeabi_dmul>
 80064f0:	4a37      	ldr	r2, [pc, #220]	; (80065d0 <__kernel_sin+0x12c>)
 80064f2:	4b38      	ldr	r3, [pc, #224]	; (80065d4 <__kernel_sin+0x130>)
 80064f4:	f7fb f9f6 	bl	80018e4 <__aeabi_dsub>
 80064f8:	0022      	movs	r2, r4
 80064fa:	002b      	movs	r3, r5
 80064fc:	f7fa ff30 	bl	8001360 <__aeabi_dmul>
 8006500:	4a35      	ldr	r2, [pc, #212]	; (80065d8 <__kernel_sin+0x134>)
 8006502:	4b36      	ldr	r3, [pc, #216]	; (80065dc <__kernel_sin+0x138>)
 8006504:	f7f9 ffd2 	bl	80004ac <__aeabi_dadd>
 8006508:	0022      	movs	r2, r4
 800650a:	002b      	movs	r3, r5
 800650c:	f7fa ff28 	bl	8001360 <__aeabi_dmul>
 8006510:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <__kernel_sin+0x13c>)
 8006512:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <__kernel_sin+0x140>)
 8006514:	f7fb f9e6 	bl	80018e4 <__aeabi_dsub>
 8006518:	0022      	movs	r2, r4
 800651a:	002b      	movs	r3, r5
 800651c:	f7fa ff20 	bl	8001360 <__aeabi_dmul>
 8006520:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <__kernel_sin+0x144>)
 8006522:	4a32      	ldr	r2, [pc, #200]	; (80065ec <__kernel_sin+0x148>)
 8006524:	f7f9 ffc2 	bl	80004ac <__aeabi_dadd>
 8006528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800652a:	9004      	str	r0, [sp, #16]
 800652c:	9105      	str	r1, [sp, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d119      	bne.n	8006566 <__kernel_sin+0xc2>
 8006532:	0002      	movs	r2, r0
 8006534:	000b      	movs	r3, r1
 8006536:	0020      	movs	r0, r4
 8006538:	0029      	movs	r1, r5
 800653a:	f7fa ff11 	bl	8001360 <__aeabi_dmul>
 800653e:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <__kernel_sin+0x14c>)
 8006540:	4b2c      	ldr	r3, [pc, #176]	; (80065f4 <__kernel_sin+0x150>)
 8006542:	f7fb f9cf 	bl	80018e4 <__aeabi_dsub>
 8006546:	9a00      	ldr	r2, [sp, #0]
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	f7fa ff09 	bl	8001360 <__aeabi_dmul>
 800654e:	0002      	movs	r2, r0
 8006550:	000b      	movs	r3, r1
 8006552:	0038      	movs	r0, r7
 8006554:	0031      	movs	r1, r6
 8006556:	f7f9 ffa9 	bl	80004ac <__aeabi_dadd>
 800655a:	0007      	movs	r7, r0
 800655c:	000e      	movs	r6, r1
 800655e:	0038      	movs	r0, r7
 8006560:	0031      	movs	r1, r6
 8006562:	b009      	add	sp, #36	; 0x24
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006566:	2200      	movs	r2, #0
 8006568:	9802      	ldr	r0, [sp, #8]
 800656a:	9903      	ldr	r1, [sp, #12]
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <__kernel_sin+0x154>)
 800656e:	f7fa fef7 	bl	8001360 <__aeabi_dmul>
 8006572:	9a04      	ldr	r2, [sp, #16]
 8006574:	9b05      	ldr	r3, [sp, #20]
 8006576:	9006      	str	r0, [sp, #24]
 8006578:	9107      	str	r1, [sp, #28]
 800657a:	9800      	ldr	r0, [sp, #0]
 800657c:	9901      	ldr	r1, [sp, #4]
 800657e:	f7fa feef 	bl	8001360 <__aeabi_dmul>
 8006582:	0002      	movs	r2, r0
 8006584:	000b      	movs	r3, r1
 8006586:	9806      	ldr	r0, [sp, #24]
 8006588:	9907      	ldr	r1, [sp, #28]
 800658a:	f7fb f9ab 	bl	80018e4 <__aeabi_dsub>
 800658e:	0022      	movs	r2, r4
 8006590:	002b      	movs	r3, r5
 8006592:	f7fa fee5 	bl	8001360 <__aeabi_dmul>
 8006596:	9a02      	ldr	r2, [sp, #8]
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	f7fb f9a3 	bl	80018e4 <__aeabi_dsub>
 800659e:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <__kernel_sin+0x14c>)
 80065a0:	0004      	movs	r4, r0
 80065a2:	000d      	movs	r5, r1
 80065a4:	9800      	ldr	r0, [sp, #0]
 80065a6:	9901      	ldr	r1, [sp, #4]
 80065a8:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <__kernel_sin+0x150>)
 80065aa:	f7fa fed9 	bl	8001360 <__aeabi_dmul>
 80065ae:	0002      	movs	r2, r0
 80065b0:	000b      	movs	r3, r1
 80065b2:	0020      	movs	r0, r4
 80065b4:	0029      	movs	r1, r5
 80065b6:	f7f9 ff79 	bl	80004ac <__aeabi_dadd>
 80065ba:	0002      	movs	r2, r0
 80065bc:	000b      	movs	r3, r1
 80065be:	0038      	movs	r0, r7
 80065c0:	0031      	movs	r1, r6
 80065c2:	f7fb f98f 	bl	80018e4 <__aeabi_dsub>
 80065c6:	e7c8      	b.n	800655a <__kernel_sin+0xb6>
 80065c8:	5acfd57c 	.word	0x5acfd57c
 80065cc:	3de5d93a 	.word	0x3de5d93a
 80065d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80065d4:	3e5ae5e6 	.word	0x3e5ae5e6
 80065d8:	57b1fe7d 	.word	0x57b1fe7d
 80065dc:	3ec71de3 	.word	0x3ec71de3
 80065e0:	19c161d5 	.word	0x19c161d5
 80065e4:	3f2a01a0 	.word	0x3f2a01a0
 80065e8:	3f811111 	.word	0x3f811111
 80065ec:	1110f8a6 	.word	0x1110f8a6
 80065f0:	55555549 	.word	0x55555549
 80065f4:	3fc55555 	.word	0x3fc55555
 80065f8:	3fe00000 	.word	0x3fe00000

080065fc <__ieee754_rem_pio2>:
 80065fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fe:	004b      	lsls	r3, r1, #1
 8006600:	b091      	sub	sp, #68	; 0x44
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	9302      	str	r3, [sp, #8]
 8006606:	0017      	movs	r7, r2
 8006608:	4bb6      	ldr	r3, [pc, #728]	; (80068e4 <__ieee754_rem_pio2+0x2e8>)
 800660a:	9a02      	ldr	r2, [sp, #8]
 800660c:	0004      	movs	r4, r0
 800660e:	000d      	movs	r5, r1
 8006610:	9109      	str	r1, [sp, #36]	; 0x24
 8006612:	429a      	cmp	r2, r3
 8006614:	dc09      	bgt.n	800662a <__ieee754_rem_pio2+0x2e>
 8006616:	0002      	movs	r2, r0
 8006618:	000b      	movs	r3, r1
 800661a:	603a      	str	r2, [r7, #0]
 800661c:	607b      	str	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	2300      	movs	r3, #0
 8006622:	60ba      	str	r2, [r7, #8]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	2600      	movs	r6, #0
 8006628:	e025      	b.n	8006676 <__ieee754_rem_pio2+0x7a>
 800662a:	4baf      	ldr	r3, [pc, #700]	; (80068e8 <__ieee754_rem_pio2+0x2ec>)
 800662c:	9a02      	ldr	r2, [sp, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	dd00      	ble.n	8006634 <__ieee754_rem_pio2+0x38>
 8006632:	e06e      	b.n	8006712 <__ieee754_rem_pio2+0x116>
 8006634:	4ead      	ldr	r6, [pc, #692]	; (80068ec <__ieee754_rem_pio2+0x2f0>)
 8006636:	4aae      	ldr	r2, [pc, #696]	; (80068f0 <__ieee754_rem_pio2+0x2f4>)
 8006638:	2d00      	cmp	r5, #0
 800663a:	dd35      	ble.n	80066a8 <__ieee754_rem_pio2+0xac>
 800663c:	0020      	movs	r0, r4
 800663e:	0029      	movs	r1, r5
 8006640:	4baa      	ldr	r3, [pc, #680]	; (80068ec <__ieee754_rem_pio2+0x2f0>)
 8006642:	f7fb f94f 	bl	80018e4 <__aeabi_dsub>
 8006646:	9b02      	ldr	r3, [sp, #8]
 8006648:	0004      	movs	r4, r0
 800664a:	000d      	movs	r5, r1
 800664c:	42b3      	cmp	r3, r6
 800664e:	d015      	beq.n	800667c <__ieee754_rem_pio2+0x80>
 8006650:	4aa8      	ldr	r2, [pc, #672]	; (80068f4 <__ieee754_rem_pio2+0x2f8>)
 8006652:	4ba9      	ldr	r3, [pc, #676]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 8006654:	f7fb f946 	bl	80018e4 <__aeabi_dsub>
 8006658:	0002      	movs	r2, r0
 800665a:	000b      	movs	r3, r1
 800665c:	0020      	movs	r0, r4
 800665e:	603a      	str	r2, [r7, #0]
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	0029      	movs	r1, r5
 8006664:	f7fb f93e 	bl	80018e4 <__aeabi_dsub>
 8006668:	4aa2      	ldr	r2, [pc, #648]	; (80068f4 <__ieee754_rem_pio2+0x2f8>)
 800666a:	4ba3      	ldr	r3, [pc, #652]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 800666c:	f7fb f93a 	bl	80018e4 <__aeabi_dsub>
 8006670:	2601      	movs	r6, #1
 8006672:	60b8      	str	r0, [r7, #8]
 8006674:	60f9      	str	r1, [r7, #12]
 8006676:	0030      	movs	r0, r6
 8006678:	b011      	add	sp, #68	; 0x44
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	22d3      	movs	r2, #211	; 0xd3
 800667e:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 8006680:	0552      	lsls	r2, r2, #21
 8006682:	f7fb f92f 	bl	80018e4 <__aeabi_dsub>
 8006686:	4a9d      	ldr	r2, [pc, #628]	; (80068fc <__ieee754_rem_pio2+0x300>)
 8006688:	4b9d      	ldr	r3, [pc, #628]	; (8006900 <__ieee754_rem_pio2+0x304>)
 800668a:	0004      	movs	r4, r0
 800668c:	000d      	movs	r5, r1
 800668e:	f7fb f929 	bl	80018e4 <__aeabi_dsub>
 8006692:	0002      	movs	r2, r0
 8006694:	000b      	movs	r3, r1
 8006696:	0020      	movs	r0, r4
 8006698:	603a      	str	r2, [r7, #0]
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	0029      	movs	r1, r5
 800669e:	f7fb f921 	bl	80018e4 <__aeabi_dsub>
 80066a2:	4a96      	ldr	r2, [pc, #600]	; (80068fc <__ieee754_rem_pio2+0x300>)
 80066a4:	4b96      	ldr	r3, [pc, #600]	; (8006900 <__ieee754_rem_pio2+0x304>)
 80066a6:	e7e1      	b.n	800666c <__ieee754_rem_pio2+0x70>
 80066a8:	0020      	movs	r0, r4
 80066aa:	0029      	movs	r1, r5
 80066ac:	4b8f      	ldr	r3, [pc, #572]	; (80068ec <__ieee754_rem_pio2+0x2f0>)
 80066ae:	f7f9 fefd 	bl	80004ac <__aeabi_dadd>
 80066b2:	9b02      	ldr	r3, [sp, #8]
 80066b4:	0004      	movs	r4, r0
 80066b6:	000d      	movs	r5, r1
 80066b8:	42b3      	cmp	r3, r6
 80066ba:	d014      	beq.n	80066e6 <__ieee754_rem_pio2+0xea>
 80066bc:	4a8d      	ldr	r2, [pc, #564]	; (80068f4 <__ieee754_rem_pio2+0x2f8>)
 80066be:	4b8e      	ldr	r3, [pc, #568]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 80066c0:	f7f9 fef4 	bl	80004ac <__aeabi_dadd>
 80066c4:	0002      	movs	r2, r0
 80066c6:	000b      	movs	r3, r1
 80066c8:	0020      	movs	r0, r4
 80066ca:	603a      	str	r2, [r7, #0]
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	0029      	movs	r1, r5
 80066d0:	f7fb f908 	bl	80018e4 <__aeabi_dsub>
 80066d4:	4a87      	ldr	r2, [pc, #540]	; (80068f4 <__ieee754_rem_pio2+0x2f8>)
 80066d6:	4b88      	ldr	r3, [pc, #544]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 80066d8:	f7f9 fee8 	bl	80004ac <__aeabi_dadd>
 80066dc:	2601      	movs	r6, #1
 80066de:	60b8      	str	r0, [r7, #8]
 80066e0:	60f9      	str	r1, [r7, #12]
 80066e2:	4276      	negs	r6, r6
 80066e4:	e7c7      	b.n	8006676 <__ieee754_rem_pio2+0x7a>
 80066e6:	22d3      	movs	r2, #211	; 0xd3
 80066e8:	4b83      	ldr	r3, [pc, #524]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 80066ea:	0552      	lsls	r2, r2, #21
 80066ec:	f7f9 fede 	bl	80004ac <__aeabi_dadd>
 80066f0:	4a82      	ldr	r2, [pc, #520]	; (80068fc <__ieee754_rem_pio2+0x300>)
 80066f2:	4b83      	ldr	r3, [pc, #524]	; (8006900 <__ieee754_rem_pio2+0x304>)
 80066f4:	0004      	movs	r4, r0
 80066f6:	000d      	movs	r5, r1
 80066f8:	f7f9 fed8 	bl	80004ac <__aeabi_dadd>
 80066fc:	0002      	movs	r2, r0
 80066fe:	000b      	movs	r3, r1
 8006700:	0020      	movs	r0, r4
 8006702:	603a      	str	r2, [r7, #0]
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	0029      	movs	r1, r5
 8006708:	f7fb f8ec 	bl	80018e4 <__aeabi_dsub>
 800670c:	4a7b      	ldr	r2, [pc, #492]	; (80068fc <__ieee754_rem_pio2+0x300>)
 800670e:	4b7c      	ldr	r3, [pc, #496]	; (8006900 <__ieee754_rem_pio2+0x304>)
 8006710:	e7e2      	b.n	80066d8 <__ieee754_rem_pio2+0xdc>
 8006712:	4b7c      	ldr	r3, [pc, #496]	; (8006904 <__ieee754_rem_pio2+0x308>)
 8006714:	9a02      	ldr	r2, [sp, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	dd00      	ble.n	800671c <__ieee754_rem_pio2+0x120>
 800671a:	e0d3      	b.n	80068c4 <__ieee754_rem_pio2+0x2c8>
 800671c:	0020      	movs	r0, r4
 800671e:	0029      	movs	r1, r5
 8006720:	f000 f95c 	bl	80069dc <fabs>
 8006724:	4a78      	ldr	r2, [pc, #480]	; (8006908 <__ieee754_rem_pio2+0x30c>)
 8006726:	4b79      	ldr	r3, [pc, #484]	; (800690c <__ieee754_rem_pio2+0x310>)
 8006728:	0004      	movs	r4, r0
 800672a:	000d      	movs	r5, r1
 800672c:	f7fa fe18 	bl	8001360 <__aeabi_dmul>
 8006730:	2200      	movs	r2, #0
 8006732:	4b77      	ldr	r3, [pc, #476]	; (8006910 <__ieee754_rem_pio2+0x314>)
 8006734:	f7f9 feba 	bl	80004ac <__aeabi_dadd>
 8006738:	f7fb fc56 	bl	8001fe8 <__aeabi_d2iz>
 800673c:	0006      	movs	r6, r0
 800673e:	f7fb fc89 	bl	8002054 <__aeabi_i2d>
 8006742:	4a6b      	ldr	r2, [pc, #428]	; (80068f0 <__ieee754_rem_pio2+0x2f4>)
 8006744:	4b69      	ldr	r3, [pc, #420]	; (80068ec <__ieee754_rem_pio2+0x2f0>)
 8006746:	9006      	str	r0, [sp, #24]
 8006748:	9107      	str	r1, [sp, #28]
 800674a:	f7fa fe09 	bl	8001360 <__aeabi_dmul>
 800674e:	0002      	movs	r2, r0
 8006750:	000b      	movs	r3, r1
 8006752:	0020      	movs	r0, r4
 8006754:	0029      	movs	r1, r5
 8006756:	f7fb f8c5 	bl	80018e4 <__aeabi_dsub>
 800675a:	4a66      	ldr	r2, [pc, #408]	; (80068f4 <__ieee754_rem_pio2+0x2f8>)
 800675c:	9004      	str	r0, [sp, #16]
 800675e:	9105      	str	r1, [sp, #20]
 8006760:	9806      	ldr	r0, [sp, #24]
 8006762:	9907      	ldr	r1, [sp, #28]
 8006764:	4b64      	ldr	r3, [pc, #400]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 8006766:	f7fa fdfb 	bl	8001360 <__aeabi_dmul>
 800676a:	0004      	movs	r4, r0
 800676c:	000d      	movs	r5, r1
 800676e:	2e1f      	cmp	r6, #31
 8006770:	dc0f      	bgt.n	8006792 <__ieee754_rem_pio2+0x196>
 8006772:	4b68      	ldr	r3, [pc, #416]	; (8006914 <__ieee754_rem_pio2+0x318>)
 8006774:	1e72      	subs	r2, r6, #1
 8006776:	0092      	lsls	r2, r2, #2
 8006778:	58d3      	ldr	r3, [r2, r3]
 800677a:	9a02      	ldr	r2, [sp, #8]
 800677c:	4293      	cmp	r3, r2
 800677e:	d008      	beq.n	8006792 <__ieee754_rem_pio2+0x196>
 8006780:	9804      	ldr	r0, [sp, #16]
 8006782:	9905      	ldr	r1, [sp, #20]
 8006784:	0022      	movs	r2, r4
 8006786:	002b      	movs	r3, r5
 8006788:	f7fb f8ac 	bl	80018e4 <__aeabi_dsub>
 800678c:	6038      	str	r0, [r7, #0]
 800678e:	6079      	str	r1, [r7, #4]
 8006790:	e012      	b.n	80067b8 <__ieee754_rem_pio2+0x1bc>
 8006792:	0022      	movs	r2, r4
 8006794:	9804      	ldr	r0, [sp, #16]
 8006796:	9905      	ldr	r1, [sp, #20]
 8006798:	002b      	movs	r3, r5
 800679a:	f7fb f8a3 	bl	80018e4 <__aeabi_dsub>
 800679e:	9b02      	ldr	r3, [sp, #8]
 80067a0:	151b      	asrs	r3, r3, #20
 80067a2:	9308      	str	r3, [sp, #32]
 80067a4:	9a08      	ldr	r2, [sp, #32]
 80067a6:	004b      	lsls	r3, r1, #1
 80067a8:	0d5b      	lsrs	r3, r3, #21
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	dc21      	bgt.n	80067f4 <__ieee754_rem_pio2+0x1f8>
 80067b0:	0002      	movs	r2, r0
 80067b2:	000b      	movs	r3, r1
 80067b4:	603a      	str	r2, [r7, #0]
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	9804      	ldr	r0, [sp, #16]
 80067ba:	9905      	ldr	r1, [sp, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	9b02      	ldr	r3, [sp, #8]
 80067c4:	f7fb f88e 	bl	80018e4 <__aeabi_dsub>
 80067c8:	0022      	movs	r2, r4
 80067ca:	002b      	movs	r3, r5
 80067cc:	f7fb f88a 	bl	80018e4 <__aeabi_dsub>
 80067d0:	000b      	movs	r3, r1
 80067d2:	0002      	movs	r2, r0
 80067d4:	60ba      	str	r2, [r7, #8]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	db00      	blt.n	80067e0 <__ieee754_rem_pio2+0x1e4>
 80067de:	e74a      	b.n	8006676 <__ieee754_rem_pio2+0x7a>
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	061b      	lsls	r3, r3, #24
 80067e4:	469c      	mov	ip, r3
 80067e6:	9c02      	ldr	r4, [sp, #8]
 80067e8:	18c9      	adds	r1, r1, r3
 80067ea:	4464      	add	r4, ip
 80067ec:	607c      	str	r4, [r7, #4]
 80067ee:	60b8      	str	r0, [r7, #8]
 80067f0:	60f9      	str	r1, [r7, #12]
 80067f2:	e776      	b.n	80066e2 <__ieee754_rem_pio2+0xe6>
 80067f4:	22d3      	movs	r2, #211	; 0xd3
 80067f6:	9806      	ldr	r0, [sp, #24]
 80067f8:	9907      	ldr	r1, [sp, #28]
 80067fa:	4b3f      	ldr	r3, [pc, #252]	; (80068f8 <__ieee754_rem_pio2+0x2fc>)
 80067fc:	0552      	lsls	r2, r2, #21
 80067fe:	f7fa fdaf 	bl	8001360 <__aeabi_dmul>
 8006802:	0004      	movs	r4, r0
 8006804:	000d      	movs	r5, r1
 8006806:	0002      	movs	r2, r0
 8006808:	000b      	movs	r3, r1
 800680a:	9804      	ldr	r0, [sp, #16]
 800680c:	9905      	ldr	r1, [sp, #20]
 800680e:	f7fb f869 	bl	80018e4 <__aeabi_dsub>
 8006812:	0002      	movs	r2, r0
 8006814:	000b      	movs	r3, r1
 8006816:	9002      	str	r0, [sp, #8]
 8006818:	9103      	str	r1, [sp, #12]
 800681a:	9804      	ldr	r0, [sp, #16]
 800681c:	9905      	ldr	r1, [sp, #20]
 800681e:	f7fb f861 	bl	80018e4 <__aeabi_dsub>
 8006822:	0022      	movs	r2, r4
 8006824:	002b      	movs	r3, r5
 8006826:	f7fb f85d 	bl	80018e4 <__aeabi_dsub>
 800682a:	0004      	movs	r4, r0
 800682c:	000d      	movs	r5, r1
 800682e:	9806      	ldr	r0, [sp, #24]
 8006830:	9907      	ldr	r1, [sp, #28]
 8006832:	4a32      	ldr	r2, [pc, #200]	; (80068fc <__ieee754_rem_pio2+0x300>)
 8006834:	4b32      	ldr	r3, [pc, #200]	; (8006900 <__ieee754_rem_pio2+0x304>)
 8006836:	f7fa fd93 	bl	8001360 <__aeabi_dmul>
 800683a:	0022      	movs	r2, r4
 800683c:	002b      	movs	r3, r5
 800683e:	f7fb f851 	bl	80018e4 <__aeabi_dsub>
 8006842:	0002      	movs	r2, r0
 8006844:	000b      	movs	r3, r1
 8006846:	0004      	movs	r4, r0
 8006848:	000d      	movs	r5, r1
 800684a:	9802      	ldr	r0, [sp, #8]
 800684c:	9903      	ldr	r1, [sp, #12]
 800684e:	f7fb f849 	bl	80018e4 <__aeabi_dsub>
 8006852:	9a08      	ldr	r2, [sp, #32]
 8006854:	004b      	lsls	r3, r1, #1
 8006856:	0d5b      	lsrs	r3, r3, #21
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b31      	cmp	r3, #49	; 0x31
 800685c:	dc08      	bgt.n	8006870 <__ieee754_rem_pio2+0x274>
 800685e:	0002      	movs	r2, r0
 8006860:	000b      	movs	r3, r1
 8006862:	603a      	str	r2, [r7, #0]
 8006864:	607b      	str	r3, [r7, #4]
 8006866:	9a02      	ldr	r2, [sp, #8]
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	9204      	str	r2, [sp, #16]
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	e7a3      	b.n	80067b8 <__ieee754_rem_pio2+0x1bc>
 8006870:	22b8      	movs	r2, #184	; 0xb8
 8006872:	9806      	ldr	r0, [sp, #24]
 8006874:	9907      	ldr	r1, [sp, #28]
 8006876:	4b22      	ldr	r3, [pc, #136]	; (8006900 <__ieee754_rem_pio2+0x304>)
 8006878:	0592      	lsls	r2, r2, #22
 800687a:	f7fa fd71 	bl	8001360 <__aeabi_dmul>
 800687e:	0004      	movs	r4, r0
 8006880:	000d      	movs	r5, r1
 8006882:	0002      	movs	r2, r0
 8006884:	000b      	movs	r3, r1
 8006886:	9802      	ldr	r0, [sp, #8]
 8006888:	9903      	ldr	r1, [sp, #12]
 800688a:	f7fb f82b 	bl	80018e4 <__aeabi_dsub>
 800688e:	0002      	movs	r2, r0
 8006890:	000b      	movs	r3, r1
 8006892:	9004      	str	r0, [sp, #16]
 8006894:	9105      	str	r1, [sp, #20]
 8006896:	9802      	ldr	r0, [sp, #8]
 8006898:	9903      	ldr	r1, [sp, #12]
 800689a:	f7fb f823 	bl	80018e4 <__aeabi_dsub>
 800689e:	0022      	movs	r2, r4
 80068a0:	002b      	movs	r3, r5
 80068a2:	f7fb f81f 	bl	80018e4 <__aeabi_dsub>
 80068a6:	0004      	movs	r4, r0
 80068a8:	000d      	movs	r5, r1
 80068aa:	9806      	ldr	r0, [sp, #24]
 80068ac:	9907      	ldr	r1, [sp, #28]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <__ieee754_rem_pio2+0x31c>)
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <__ieee754_rem_pio2+0x320>)
 80068b2:	f7fa fd55 	bl	8001360 <__aeabi_dmul>
 80068b6:	0022      	movs	r2, r4
 80068b8:	002b      	movs	r3, r5
 80068ba:	f7fb f813 	bl	80018e4 <__aeabi_dsub>
 80068be:	0004      	movs	r4, r0
 80068c0:	000d      	movs	r5, r1
 80068c2:	e75d      	b.n	8006780 <__ieee754_rem_pio2+0x184>
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <__ieee754_rem_pio2+0x324>)
 80068c6:	9a02      	ldr	r2, [sp, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	dd2b      	ble.n	8006924 <__ieee754_rem_pio2+0x328>
 80068cc:	0022      	movs	r2, r4
 80068ce:	002b      	movs	r3, r5
 80068d0:	0020      	movs	r0, r4
 80068d2:	0029      	movs	r1, r5
 80068d4:	f7fb f806 	bl	80018e4 <__aeabi_dsub>
 80068d8:	60b8      	str	r0, [r7, #8]
 80068da:	60f9      	str	r1, [r7, #12]
 80068dc:	6038      	str	r0, [r7, #0]
 80068de:	6079      	str	r1, [r7, #4]
 80068e0:	e6a1      	b.n	8006626 <__ieee754_rem_pio2+0x2a>
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	3fe921fb 	.word	0x3fe921fb
 80068e8:	4002d97b 	.word	0x4002d97b
 80068ec:	3ff921fb 	.word	0x3ff921fb
 80068f0:	54400000 	.word	0x54400000
 80068f4:	1a626331 	.word	0x1a626331
 80068f8:	3dd0b461 	.word	0x3dd0b461
 80068fc:	2e037073 	.word	0x2e037073
 8006900:	3ba3198a 	.word	0x3ba3198a
 8006904:	413921fb 	.word	0x413921fb
 8006908:	6dc9c883 	.word	0x6dc9c883
 800690c:	3fe45f30 	.word	0x3fe45f30
 8006910:	3fe00000 	.word	0x3fe00000
 8006914:	08007398 	.word	0x08007398
 8006918:	252049c1 	.word	0x252049c1
 800691c:	397b839a 	.word	0x397b839a
 8006920:	7fefffff 	.word	0x7fefffff
 8006924:	9a02      	ldr	r2, [sp, #8]
 8006926:	0020      	movs	r0, r4
 8006928:	1516      	asrs	r6, r2, #20
 800692a:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <__ieee754_rem_pio2+0x3d4>)
 800692c:	18b6      	adds	r6, r6, r2
 800692e:	9a02      	ldr	r2, [sp, #8]
 8006930:	0533      	lsls	r3, r6, #20
 8006932:	1ad5      	subs	r5, r2, r3
 8006934:	0029      	movs	r1, r5
 8006936:	f7fb fb57 	bl	8001fe8 <__aeabi_d2iz>
 800693a:	f7fb fb8b 	bl	8002054 <__aeabi_i2d>
 800693e:	0002      	movs	r2, r0
 8006940:	000b      	movs	r3, r1
 8006942:	0020      	movs	r0, r4
 8006944:	0029      	movs	r1, r5
 8006946:	920a      	str	r2, [sp, #40]	; 0x28
 8006948:	930b      	str	r3, [sp, #44]	; 0x2c
 800694a:	f7fa ffcb 	bl	80018e4 <__aeabi_dsub>
 800694e:	2200      	movs	r2, #0
 8006950:	4b20      	ldr	r3, [pc, #128]	; (80069d4 <__ieee754_rem_pio2+0x3d8>)
 8006952:	f7fa fd05 	bl	8001360 <__aeabi_dmul>
 8006956:	000d      	movs	r5, r1
 8006958:	0004      	movs	r4, r0
 800695a:	f7fb fb45 	bl	8001fe8 <__aeabi_d2iz>
 800695e:	f7fb fb79 	bl	8002054 <__aeabi_i2d>
 8006962:	0002      	movs	r2, r0
 8006964:	000b      	movs	r3, r1
 8006966:	0020      	movs	r0, r4
 8006968:	0029      	movs	r1, r5
 800696a:	920c      	str	r2, [sp, #48]	; 0x30
 800696c:	930d      	str	r3, [sp, #52]	; 0x34
 800696e:	f7fa ffb9 	bl	80018e4 <__aeabi_dsub>
 8006972:	2200      	movs	r2, #0
 8006974:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <__ieee754_rem_pio2+0x3d8>)
 8006976:	f7fa fcf3 	bl	8001360 <__aeabi_dmul>
 800697a:	2503      	movs	r5, #3
 800697c:	900e      	str	r0, [sp, #56]	; 0x38
 800697e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006980:	ac0a      	add	r4, sp, #40	; 0x28
 8006982:	2200      	movs	r2, #0
 8006984:	6920      	ldr	r0, [r4, #16]
 8006986:	6961      	ldr	r1, [r4, #20]
 8006988:	2300      	movs	r3, #0
 800698a:	9502      	str	r5, [sp, #8]
 800698c:	3c08      	subs	r4, #8
 800698e:	3d01      	subs	r5, #1
 8006990:	f7f9 fd40 	bl	8000414 <__aeabi_dcmpeq>
 8006994:	2800      	cmp	r0, #0
 8006996:	d1f4      	bne.n	8006982 <__ieee754_rem_pio2+0x386>
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <__ieee754_rem_pio2+0x3dc>)
 800699a:	0032      	movs	r2, r6
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	2302      	movs	r3, #2
 80069a0:	0039      	movs	r1, r7
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	a80a      	add	r0, sp, #40	; 0x28
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	f000 f81c 	bl	80069e4 <__kernel_rem_pio2>
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	0006      	movs	r6, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db00      	blt.n	80069b6 <__ieee754_rem_pio2+0x3ba>
 80069b4:	e65f      	b.n	8006676 <__ieee754_rem_pio2+0x7a>
 80069b6:	2080      	movs	r0, #128	; 0x80
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	0600      	lsls	r0, r0, #24
 80069be:	180b      	adds	r3, r1, r0
 80069c0:	68f9      	ldr	r1, [r7, #12]
 80069c2:	603a      	str	r2, [r7, #0]
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	180b      	adds	r3, r1, r0
 80069ca:	60ba      	str	r2, [r7, #8]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e688      	b.n	80066e2 <__ieee754_rem_pio2+0xe6>
 80069d0:	fffffbea 	.word	0xfffffbea
 80069d4:	41700000 	.word	0x41700000
 80069d8:	08007418 	.word	0x08007418

080069dc <fabs>:
 80069dc:	0049      	lsls	r1, r1, #1
 80069de:	084b      	lsrs	r3, r1, #1
 80069e0:	0019      	movs	r1, r3
 80069e2:	4770      	bx	lr

080069e4 <__kernel_rem_pio2>:
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	4ccb      	ldr	r4, [pc, #812]	; (8006d14 <__kernel_rem_pio2+0x330>)
 80069e8:	44a5      	add	sp, r4
 80069ea:	0014      	movs	r4, r2
 80069ec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80069ee:	930c      	str	r3, [sp, #48]	; 0x30
 80069f0:	4bc9      	ldr	r3, [pc, #804]	; (8006d18 <__kernel_rem_pio2+0x334>)
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	58d3      	ldr	r3, [r2, r3]
 80069f6:	900d      	str	r0, [sp, #52]	; 0x34
 80069f8:	9308      	str	r3, [sp, #32]
 80069fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069fc:	9106      	str	r1, [sp, #24]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	0023      	movs	r3, r4
 8006a08:	3314      	adds	r3, #20
 8006a0a:	db04      	blt.n	8006a16 <__kernel_rem_pio2+0x32>
 8006a0c:	2118      	movs	r1, #24
 8006a0e:	1ee0      	subs	r0, r4, #3
 8006a10:	f7f9 fc04 	bl	800021c <__divsi3>
 8006a14:	9000      	str	r0, [sp, #0]
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	ae24      	add	r6, sp, #144	; 0x90
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	2318      	movs	r3, #24
 8006a1e:	425b      	negs	r3, r3
 8006a20:	4353      	muls	r3, r2
 8006a22:	191b      	adds	r3, r3, r4
 8006a24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	1a9d      	subs	r5, r3, r2
 8006a2c:	002c      	movs	r4, r5
 8006a2e:	9b08      	ldr	r3, [sp, #32]
 8006a30:	189f      	adds	r7, r3, r2
 8006a32:	1b63      	subs	r3, r4, r5
 8006a34:	429f      	cmp	r7, r3
 8006a36:	da0f      	bge.n	8006a58 <__kernel_rem_pio2+0x74>
 8006a38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a3a:	af74      	add	r7, sp, #464	; 0x1d0
 8006a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a3e:	9a08      	ldr	r2, [sp, #32]
 8006a40:	1af3      	subs	r3, r6, r3
 8006a42:	429a      	cmp	r2, r3
 8006a44:	db30      	blt.n	8006aa8 <__kernel_rem_pio2+0xc4>
 8006a46:	ab24      	add	r3, sp, #144	; 0x90
 8006a48:	00f4      	lsls	r4, r6, #3
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	18e4      	adds	r4, r4, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2500      	movs	r5, #0
 8006a52:	9204      	str	r2, [sp, #16]
 8006a54:	9305      	str	r3, [sp, #20]
 8006a56:	e01e      	b.n	8006a96 <__kernel_rem_pio2+0xb2>
 8006a58:	2c00      	cmp	r4, #0
 8006a5a:	db07      	blt.n	8006a6c <__kernel_rem_pio2+0x88>
 8006a5c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8006a5e:	00a3      	lsls	r3, r4, #2
 8006a60:	58d0      	ldr	r0, [r2, r3]
 8006a62:	f7fb faf7 	bl	8002054 <__aeabi_i2d>
 8006a66:	c603      	stmia	r6!, {r0, r1}
 8006a68:	3401      	adds	r4, #1
 8006a6a:	e7e2      	b.n	8006a32 <__kernel_rem_pio2+0x4e>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	2100      	movs	r1, #0
 8006a70:	e7f9      	b.n	8006a66 <__kernel_rem_pio2+0x82>
 8006a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a74:	00e9      	lsls	r1, r5, #3
 8006a76:	1859      	adds	r1, r3, r1
 8006a78:	6808      	ldr	r0, [r1, #0]
 8006a7a:	6849      	ldr	r1, [r1, #4]
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	f7fa fc6e 	bl	8001360 <__aeabi_dmul>
 8006a84:	0002      	movs	r2, r0
 8006a86:	000b      	movs	r3, r1
 8006a88:	9804      	ldr	r0, [sp, #16]
 8006a8a:	9905      	ldr	r1, [sp, #20]
 8006a8c:	f7f9 fd0e 	bl	80004ac <__aeabi_dadd>
 8006a90:	9004      	str	r0, [sp, #16]
 8006a92:	9105      	str	r1, [sp, #20]
 8006a94:	3501      	adds	r5, #1
 8006a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a98:	3c08      	subs	r4, #8
 8006a9a:	429d      	cmp	r5, r3
 8006a9c:	dde9      	ble.n	8006a72 <__kernel_rem_pio2+0x8e>
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	9c05      	ldr	r4, [sp, #20]
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	c718      	stmia	r7!, {r3, r4}
 8006aa6:	e7c9      	b.n	8006a3c <__kernel_rem_pio2+0x58>
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	aa10      	add	r2, sp, #64	; 0x40
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	189b      	adds	r3, r3, r2
 8006ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	18d3      	adds	r3, r2, r3
 8006aba:	930e      	str	r3, [sp, #56]	; 0x38
 8006abc:	9b08      	ldr	r3, [sp, #32]
 8006abe:	9304      	str	r3, [sp, #16]
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	aa74      	add	r2, sp, #464	; 0x1d0
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	18d3      	adds	r3, r2, r3
 8006ac8:	681c      	ldr	r4, [r3, #0]
 8006aca:	685d      	ldr	r5, [r3, #4]
 8006acc:	ab10      	add	r3, sp, #64	; 0x40
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad2:	9b04      	ldr	r3, [sp, #16]
 8006ad4:	9307      	str	r3, [sp, #28]
 8006ad6:	9b07      	ldr	r3, [sp, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc74      	bgt.n	8006bc6 <__kernel_rem_pio2+0x1e2>
 8006adc:	0020      	movs	r0, r4
 8006ade:	0029      	movs	r1, r5
 8006ae0:	9a02      	ldr	r2, [sp, #8]
 8006ae2:	f000 faeb 	bl	80070bc <scalbn>
 8006ae6:	23ff      	movs	r3, #255	; 0xff
 8006ae8:	2200      	movs	r2, #0
 8006aea:	059b      	lsls	r3, r3, #22
 8006aec:	0004      	movs	r4, r0
 8006aee:	000d      	movs	r5, r1
 8006af0:	f7fa fc36 	bl	8001360 <__aeabi_dmul>
 8006af4:	f000 fb4c 	bl	8007190 <floor>
 8006af8:	2200      	movs	r2, #0
 8006afa:	4b88      	ldr	r3, [pc, #544]	; (8006d1c <__kernel_rem_pio2+0x338>)
 8006afc:	f7fa fc30 	bl	8001360 <__aeabi_dmul>
 8006b00:	0002      	movs	r2, r0
 8006b02:	000b      	movs	r3, r1
 8006b04:	0020      	movs	r0, r4
 8006b06:	0029      	movs	r1, r5
 8006b08:	f7fa feec 	bl	80018e4 <__aeabi_dsub>
 8006b0c:	000d      	movs	r5, r1
 8006b0e:	0004      	movs	r4, r0
 8006b10:	f7fb fa6a 	bl	8001fe8 <__aeabi_d2iz>
 8006b14:	900a      	str	r0, [sp, #40]	; 0x28
 8006b16:	f7fb fa9d 	bl	8002054 <__aeabi_i2d>
 8006b1a:	000b      	movs	r3, r1
 8006b1c:	0002      	movs	r2, r0
 8006b1e:	0029      	movs	r1, r5
 8006b20:	0020      	movs	r0, r4
 8006b22:	f7fa fedf 	bl	80018e4 <__aeabi_dsub>
 8006b26:	9b02      	ldr	r3, [sp, #8]
 8006b28:	0006      	movs	r6, r0
 8006b2a:	000f      	movs	r7, r1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd74      	ble.n	8006c1a <__kernel_rem_pio2+0x236>
 8006b30:	2018      	movs	r0, #24
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	aa10      	add	r2, sp, #64	; 0x40
 8006b36:	3b01      	subs	r3, #1
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	589a      	ldr	r2, [r3, r2]
 8006b3c:	9902      	ldr	r1, [sp, #8]
 8006b3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b40:	1a40      	subs	r0, r0, r1
 8006b42:	0011      	movs	r1, r2
 8006b44:	4101      	asrs	r1, r0
 8006b46:	1864      	adds	r4, r4, r1
 8006b48:	4081      	lsls	r1, r0
 8006b4a:	1a52      	subs	r2, r2, r1
 8006b4c:	a910      	add	r1, sp, #64	; 0x40
 8006b4e:	505a      	str	r2, [r3, r1]
 8006b50:	2317      	movs	r3, #23
 8006b52:	9902      	ldr	r1, [sp, #8]
 8006b54:	940a      	str	r4, [sp, #40]	; 0x28
 8006b56:	1a5b      	subs	r3, r3, r1
 8006b58:	411a      	asrs	r2, r3
 8006b5a:	9207      	str	r2, [sp, #28]
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd6d      	ble.n	8006c3e <__kernel_rem_pio2+0x25a>
 8006b62:	2200      	movs	r2, #0
 8006b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b66:	2080      	movs	r0, #128	; 0x80
 8006b68:	3301      	adds	r3, #1
 8006b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b6c:	4b6c      	ldr	r3, [pc, #432]	; (8006d20 <__kernel_rem_pio2+0x33c>)
 8006b6e:	0014      	movs	r4, r2
 8006b70:	469c      	mov	ip, r3
 8006b72:	2501      	movs	r5, #1
 8006b74:	0440      	lsls	r0, r0, #17
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	dd00      	ble.n	8006b7e <__kernel_rem_pio2+0x19a>
 8006b7c:	e09b      	b.n	8006cb6 <__kernel_rem_pio2+0x2d2>
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd05      	ble.n	8006b90 <__kernel_rem_pio2+0x1ac>
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d100      	bne.n	8006b8a <__kernel_rem_pio2+0x1a6>
 8006b88:	e0ab      	b.n	8006ce2 <__kernel_rem_pio2+0x2fe>
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d100      	bne.n	8006b90 <__kernel_rem_pio2+0x1ac>
 8006b8e:	e0b2      	b.n	8006cf6 <__kernel_rem_pio2+0x312>
 8006b90:	9b07      	ldr	r3, [sp, #28]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d153      	bne.n	8006c3e <__kernel_rem_pio2+0x25a>
 8006b96:	0032      	movs	r2, r6
 8006b98:	003b      	movs	r3, r7
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	4961      	ldr	r1, [pc, #388]	; (8006d24 <__kernel_rem_pio2+0x340>)
 8006b9e:	f7fa fea1 	bl	80018e4 <__aeabi_dsub>
 8006ba2:	0006      	movs	r6, r0
 8006ba4:	000f      	movs	r7, r1
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	d049      	beq.n	8006c3e <__kernel_rem_pio2+0x25a>
 8006baa:	9a02      	ldr	r2, [sp, #8]
 8006bac:	2000      	movs	r0, #0
 8006bae:	495d      	ldr	r1, [pc, #372]	; (8006d24 <__kernel_rem_pio2+0x340>)
 8006bb0:	f000 fa84 	bl	80070bc <scalbn>
 8006bb4:	0002      	movs	r2, r0
 8006bb6:	000b      	movs	r3, r1
 8006bb8:	0030      	movs	r0, r6
 8006bba:	0039      	movs	r1, r7
 8006bbc:	f7fa fe92 	bl	80018e4 <__aeabi_dsub>
 8006bc0:	0006      	movs	r6, r0
 8006bc2:	000f      	movs	r7, r1
 8006bc4:	e03b      	b.n	8006c3e <__kernel_rem_pio2+0x25a>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4b57      	ldr	r3, [pc, #348]	; (8006d28 <__kernel_rem_pio2+0x344>)
 8006bca:	0020      	movs	r0, r4
 8006bcc:	0029      	movs	r1, r5
 8006bce:	f7fa fbc7 	bl	8001360 <__aeabi_dmul>
 8006bd2:	f7fb fa09 	bl	8001fe8 <__aeabi_d2iz>
 8006bd6:	f7fb fa3d 	bl	8002054 <__aeabi_i2d>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4b53      	ldr	r3, [pc, #332]	; (8006d2c <__kernel_rem_pio2+0x348>)
 8006bde:	0006      	movs	r6, r0
 8006be0:	000f      	movs	r7, r1
 8006be2:	f7fa fbbd 	bl	8001360 <__aeabi_dmul>
 8006be6:	0002      	movs	r2, r0
 8006be8:	000b      	movs	r3, r1
 8006bea:	0020      	movs	r0, r4
 8006bec:	0029      	movs	r1, r5
 8006bee:	f7fa fe79 	bl	80018e4 <__aeabi_dsub>
 8006bf2:	f7fb f9f9 	bl	8001fe8 <__aeabi_d2iz>
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	aa74      	add	r2, sp, #464	; 0x1d0
 8006bfa:	c301      	stmia	r3!, {r0}
 8006bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8006bfe:	9b07      	ldr	r3, [sp, #28]
 8006c00:	0030      	movs	r0, r6
 8006c02:	3b01      	subs	r3, #1
 8006c04:	9307      	str	r3, [sp, #28]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	18d3      	adds	r3, r2, r3
 8006c0a:	0039      	movs	r1, r7
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f7f9 fc4c 	bl	80004ac <__aeabi_dadd>
 8006c14:	0004      	movs	r4, r0
 8006c16:	000d      	movs	r5, r1
 8006c18:	e75d      	b.n	8006ad6 <__kernel_rem_pio2+0xf2>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <__kernel_rem_pio2+0x24c>
 8006c20:	9b04      	ldr	r3, [sp, #16]
 8006c22:	aa10      	add	r2, sp, #64	; 0x40
 8006c24:	3b01      	subs	r3, #1
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	589b      	ldr	r3, [r3, r2]
 8006c2a:	15db      	asrs	r3, r3, #23
 8006c2c:	9307      	str	r3, [sp, #28]
 8006c2e:	e795      	b.n	8006b5c <__kernel_rem_pio2+0x178>
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b3f      	ldr	r3, [pc, #252]	; (8006d30 <__kernel_rem_pio2+0x34c>)
 8006c34:	f7f9 fc12 	bl	800045c <__aeabi_dcmpge>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d139      	bne.n	8006cb0 <__kernel_rem_pio2+0x2cc>
 8006c3c:	9007      	str	r0, [sp, #28]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2300      	movs	r3, #0
 8006c42:	0030      	movs	r0, r6
 8006c44:	0039      	movs	r1, r7
 8006c46:	f7f9 fbe5 	bl	8000414 <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d100      	bne.n	8006c50 <__kernel_rem_pio2+0x26c>
 8006c4e:	e0bc      	b.n	8006dca <__kernel_rem_pio2+0x3e6>
 8006c50:	2200      	movs	r2, #0
 8006c52:	9b04      	ldr	r3, [sp, #16]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	9908      	ldr	r1, [sp, #32]
 8006c5a:	428b      	cmp	r3, r1
 8006c5c:	da53      	bge.n	8006d06 <__kernel_rem_pio2+0x322>
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d100      	bne.n	8006c64 <__kernel_rem_pio2+0x280>
 8006c62:	e098      	b.n	8006d96 <__kernel_rem_pio2+0x3b2>
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	aa10      	add	r2, sp, #64	; 0x40
 8006c68:	3b18      	subs	r3, #24
 8006c6a:	9302      	str	r3, [sp, #8]
 8006c6c:	9b00      	ldr	r3, [sp, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	589b      	ldr	r3, [r3, r2]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d100      	bne.n	8006c78 <__kernel_rem_pio2+0x294>
 8006c76:	e0a4      	b.n	8006dc2 <__kernel_rem_pio2+0x3de>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	9a02      	ldr	r2, [sp, #8]
 8006c7c:	4929      	ldr	r1, [pc, #164]	; (8006d24 <__kernel_rem_pio2+0x340>)
 8006c7e:	f000 fa1d 	bl	80070bc <scalbn>
 8006c82:	0006      	movs	r6, r0
 8006c84:	000f      	movs	r7, r1
 8006c86:	9c00      	ldr	r4, [sp, #0]
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	db00      	blt.n	8006c8e <__kernel_rem_pio2+0x2aa>
 8006c8c:	e0dc      	b.n	8006e48 <__kernel_rem_pio2+0x464>
 8006c8e:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <__kernel_rem_pio2+0x350>)
 8006c90:	9c00      	ldr	r4, [sp, #0]
 8006c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	da00      	bge.n	8006c9a <__kernel_rem_pio2+0x2b6>
 8006c98:	e10f      	b.n	8006eba <__kernel_rem_pio2+0x4d6>
 8006c9a:	00e6      	lsls	r6, r4, #3
 8006c9c:	ab74      	add	r3, sp, #464	; 0x1d0
 8006c9e:	18f3      	adds	r3, r6, r3
 8006ca0:	9302      	str	r3, [sp, #8]
 8006ca2:	9b00      	ldr	r3, [sp, #0]
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	1b1b      	subs	r3, r3, r4
 8006ca8:	2700      	movs	r7, #0
 8006caa:	2500      	movs	r5, #0
 8006cac:	9304      	str	r3, [sp, #16]
 8006cae:	e0f6      	b.n	8006e9e <__kernel_rem_pio2+0x4ba>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	9307      	str	r3, [sp, #28]
 8006cb4:	e755      	b.n	8006b62 <__kernel_rem_pio2+0x17e>
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	d10b      	bne.n	8006cd6 <__kernel_rem_pio2+0x2f2>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <__kernel_rem_pio2+0x2e6>
 8006cc2:	9c00      	ldr	r4, [sp, #0]
 8006cc4:	1ac3      	subs	r3, r0, r3
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	002b      	movs	r3, r5
 8006cca:	9c00      	ldr	r4, [sp, #0]
 8006ccc:	3201      	adds	r2, #1
 8006cce:	3404      	adds	r4, #4
 8006cd0:	9400      	str	r4, [sp, #0]
 8006cd2:	001c      	movs	r4, r3
 8006cd4:	e74f      	b.n	8006b76 <__kernel_rem_pio2+0x192>
 8006cd6:	4661      	mov	r1, ip
 8006cd8:	1acb      	subs	r3, r1, r3
 8006cda:	9900      	ldr	r1, [sp, #0]
 8006cdc:	600b      	str	r3, [r1, #0]
 8006cde:	0023      	movs	r3, r4
 8006ce0:	e7f3      	b.n	8006cca <__kernel_rem_pio2+0x2e6>
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	aa10      	add	r2, sp, #64	; 0x40
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	589a      	ldr	r2, [r3, r2]
 8006cec:	0252      	lsls	r2, r2, #9
 8006cee:	0a52      	lsrs	r2, r2, #9
 8006cf0:	a910      	add	r1, sp, #64	; 0x40
 8006cf2:	505a      	str	r2, [r3, r1]
 8006cf4:	e74c      	b.n	8006b90 <__kernel_rem_pio2+0x1ac>
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	aa10      	add	r2, sp, #64	; 0x40
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	589a      	ldr	r2, [r3, r2]
 8006d00:	0292      	lsls	r2, r2, #10
 8006d02:	0a92      	lsrs	r2, r2, #10
 8006d04:	e7f4      	b.n	8006cf0 <__kernel_rem_pio2+0x30c>
 8006d06:	0099      	lsls	r1, r3, #2
 8006d08:	a810      	add	r0, sp, #64	; 0x40
 8006d0a:	5809      	ldr	r1, [r1, r0]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	e7a2      	b.n	8006c58 <__kernel_rem_pio2+0x274>
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	fffffd8c 	.word	0xfffffd8c
 8006d18:	08007560 	.word	0x08007560
 8006d1c:	40200000 	.word	0x40200000
 8006d20:	00ffffff 	.word	0x00ffffff
 8006d24:	3ff00000 	.word	0x3ff00000
 8006d28:	3e700000 	.word	0x3e700000
 8006d2c:	41700000 	.word	0x41700000
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	08007520 	.word	0x08007520
 8006d38:	3301      	adds	r3, #1
 8006d3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d3c:	009a      	lsls	r2, r3, #2
 8006d3e:	4252      	negs	r2, r2
 8006d40:	588a      	ldr	r2, [r1, r2]
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d0f8      	beq.n	8006d38 <__kernel_rem_pio2+0x354>
 8006d46:	9a04      	ldr	r2, [sp, #16]
 8006d48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d4a:	1c57      	adds	r7, r2, #1
 8006d4c:	1854      	adds	r4, r2, r1
 8006d4e:	00e4      	lsls	r4, r4, #3
 8006d50:	aa24      	add	r2, sp, #144	; 0x90
 8006d52:	1914      	adds	r4, r2, r4
 8006d54:	9a04      	ldr	r2, [sp, #16]
 8006d56:	18d3      	adds	r3, r2, r3
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	42bb      	cmp	r3, r7
 8006d5e:	da00      	bge.n	8006d62 <__kernel_rem_pio2+0x37e>
 8006d60:	e6ae      	b.n	8006ac0 <__kernel_rem_pio2+0xdc>
 8006d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d64:	00bb      	lsls	r3, r7, #2
 8006d66:	58d0      	ldr	r0, [r2, r3]
 8006d68:	f7fb f974 	bl	8002054 <__aeabi_i2d>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	0026      	movs	r6, r4
 8006d72:	2500      	movs	r5, #0
 8006d74:	6020      	str	r0, [r4, #0]
 8006d76:	6061      	str	r1, [r4, #4]
 8006d78:	9200      	str	r2, [sp, #0]
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	dd0b      	ble.n	8006d9a <__kernel_rem_pio2+0x3b6>
 8006d82:	00fb      	lsls	r3, r7, #3
 8006d84:	aa74      	add	r2, sp, #464	; 0x1d0
 8006d86:	18d3      	adds	r3, r2, r3
 8006d88:	3701      	adds	r7, #1
 8006d8a:	9900      	ldr	r1, [sp, #0]
 8006d8c:	9a01      	ldr	r2, [sp, #4]
 8006d8e:	3408      	adds	r4, #8
 8006d90:	6019      	str	r1, [r3, #0]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	e7e1      	b.n	8006d5a <__kernel_rem_pio2+0x376>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7cf      	b.n	8006d3a <__kernel_rem_pio2+0x356>
 8006d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d9c:	00e9      	lsls	r1, r5, #3
 8006d9e:	1859      	adds	r1, r3, r1
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	6849      	ldr	r1, [r1, #4]
 8006da4:	6832      	ldr	r2, [r6, #0]
 8006da6:	6873      	ldr	r3, [r6, #4]
 8006da8:	f7fa fada 	bl	8001360 <__aeabi_dmul>
 8006dac:	0002      	movs	r2, r0
 8006dae:	000b      	movs	r3, r1
 8006db0:	9800      	ldr	r0, [sp, #0]
 8006db2:	9901      	ldr	r1, [sp, #4]
 8006db4:	f7f9 fb7a 	bl	80004ac <__aeabi_dadd>
 8006db8:	3501      	adds	r5, #1
 8006dba:	9000      	str	r0, [sp, #0]
 8006dbc:	9101      	str	r1, [sp, #4]
 8006dbe:	3e08      	subs	r6, #8
 8006dc0:	e7dc      	b.n	8006d7c <__kernel_rem_pio2+0x398>
 8006dc2:	9b00      	ldr	r3, [sp, #0]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	e74c      	b.n	8006c64 <__kernel_rem_pio2+0x280>
 8006dca:	9b02      	ldr	r3, [sp, #8]
 8006dcc:	0030      	movs	r0, r6
 8006dce:	425a      	negs	r2, r3
 8006dd0:	0039      	movs	r1, r7
 8006dd2:	f000 f973 	bl	80070bc <scalbn>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4bb6      	ldr	r3, [pc, #728]	; (80070b4 <__kernel_rem_pio2+0x6d0>)
 8006dda:	0004      	movs	r4, r0
 8006ddc:	000d      	movs	r5, r1
 8006dde:	f7f9 fb3d 	bl	800045c <__aeabi_dcmpge>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d025      	beq.n	8006e32 <__kernel_rem_pio2+0x44e>
 8006de6:	2200      	movs	r2, #0
 8006de8:	4bb3      	ldr	r3, [pc, #716]	; (80070b8 <__kernel_rem_pio2+0x6d4>)
 8006dea:	0020      	movs	r0, r4
 8006dec:	0029      	movs	r1, r5
 8006dee:	f7fa fab7 	bl	8001360 <__aeabi_dmul>
 8006df2:	f7fb f8f9 	bl	8001fe8 <__aeabi_d2iz>
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	0006      	movs	r6, r0
 8006dfa:	009f      	lsls	r7, r3, #2
 8006dfc:	f7fb f92a 	bl	8002054 <__aeabi_i2d>
 8006e00:	2200      	movs	r2, #0
 8006e02:	4bac      	ldr	r3, [pc, #688]	; (80070b4 <__kernel_rem_pio2+0x6d0>)
 8006e04:	f7fa faac 	bl	8001360 <__aeabi_dmul>
 8006e08:	0002      	movs	r2, r0
 8006e0a:	000b      	movs	r3, r1
 8006e0c:	0020      	movs	r0, r4
 8006e0e:	0029      	movs	r1, r5
 8006e10:	f7fa fd68 	bl	80018e4 <__aeabi_dsub>
 8006e14:	f7fb f8e8 	bl	8001fe8 <__aeabi_d2iz>
 8006e18:	ab10      	add	r3, sp, #64	; 0x40
 8006e1a:	51d8      	str	r0, [r3, r7]
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	aa10      	add	r2, sp, #64	; 0x40
 8006e20:	3301      	adds	r3, #1
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	3318      	adds	r3, #24
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	9b00      	ldr	r3, [sp, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	509e      	str	r6, [r3, r2]
 8006e30:	e722      	b.n	8006c78 <__kernel_rem_pio2+0x294>
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	0020      	movs	r0, r4
 8006e36:	0029      	movs	r1, r5
 8006e38:	009e      	lsls	r6, r3, #2
 8006e3a:	f7fb f8d5 	bl	8001fe8 <__aeabi_d2iz>
 8006e3e:	ab10      	add	r3, sp, #64	; 0x40
 8006e40:	5198      	str	r0, [r3, r6]
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	e717      	b.n	8006c78 <__kernel_rem_pio2+0x294>
 8006e48:	00e5      	lsls	r5, r4, #3
 8006e4a:	ab74      	add	r3, sp, #464	; 0x1d0
 8006e4c:	aa10      	add	r2, sp, #64	; 0x40
 8006e4e:	195d      	adds	r5, r3, r5
 8006e50:	00a3      	lsls	r3, r4, #2
 8006e52:	5898      	ldr	r0, [r3, r2]
 8006e54:	f7fb f8fe 	bl	8002054 <__aeabi_i2d>
 8006e58:	0032      	movs	r2, r6
 8006e5a:	003b      	movs	r3, r7
 8006e5c:	f7fa fa80 	bl	8001360 <__aeabi_dmul>
 8006e60:	2200      	movs	r2, #0
 8006e62:	6028      	str	r0, [r5, #0]
 8006e64:	6069      	str	r1, [r5, #4]
 8006e66:	4b94      	ldr	r3, [pc, #592]	; (80070b8 <__kernel_rem_pio2+0x6d4>)
 8006e68:	0030      	movs	r0, r6
 8006e6a:	0039      	movs	r1, r7
 8006e6c:	f7fa fa78 	bl	8001360 <__aeabi_dmul>
 8006e70:	3c01      	subs	r4, #1
 8006e72:	0006      	movs	r6, r0
 8006e74:	000f      	movs	r7, r1
 8006e76:	e707      	b.n	8006c88 <__kernel_rem_pio2+0x2a4>
 8006e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7a:	9802      	ldr	r0, [sp, #8]
 8006e7c:	00e9      	lsls	r1, r5, #3
 8006e7e:	1859      	adds	r1, r3, r1
 8006e80:	c80c      	ldmia	r0!, {r2, r3}
 8006e82:	9002      	str	r0, [sp, #8]
 8006e84:	6808      	ldr	r0, [r1, #0]
 8006e86:	6849      	ldr	r1, [r1, #4]
 8006e88:	f7fa fa6a 	bl	8001360 <__aeabi_dmul>
 8006e8c:	0002      	movs	r2, r0
 8006e8e:	000b      	movs	r3, r1
 8006e90:	0030      	movs	r0, r6
 8006e92:	0039      	movs	r1, r7
 8006e94:	f7f9 fb0a 	bl	80004ac <__aeabi_dadd>
 8006e98:	0006      	movs	r6, r0
 8006e9a:	000f      	movs	r7, r1
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	9b08      	ldr	r3, [sp, #32]
 8006ea0:	429d      	cmp	r5, r3
 8006ea2:	dc02      	bgt.n	8006eaa <__kernel_rem_pio2+0x4c6>
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	429d      	cmp	r5, r3
 8006ea8:	dde6      	ble.n	8006e78 <__kernel_rem_pio2+0x494>
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	aa4c      	add	r2, sp, #304	; 0x130
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	18d3      	adds	r3, r2, r3
 8006eb2:	601e      	str	r6, [r3, #0]
 8006eb4:	605f      	str	r7, [r3, #4]
 8006eb6:	3c01      	subs	r4, #1
 8006eb8:	e6ec      	b.n	8006c94 <__kernel_rem_pio2+0x2b0>
 8006eba:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	dc0e      	bgt.n	8006ede <__kernel_rem_pio2+0x4fa>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	dd00      	ble.n	8006ec6 <__kernel_rem_pio2+0x4e2>
 8006ec4:	e08c      	b.n	8006fe0 <__kernel_rem_pio2+0x5fc>
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	002c      	movs	r4, r5
 8006eca:	42ab      	cmp	r3, r5
 8006ecc:	d046      	beq.n	8006f5c <__kernel_rem_pio2+0x578>
 8006ece:	2007      	movs	r0, #7
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed2:	4003      	ands	r3, r0
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	239d      	movs	r3, #157	; 0x9d
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	449d      	add	sp, r3
 8006edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ede:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d1f4      	bne.n	8006ece <__kernel_rem_pio2+0x4ea>
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	aa4c      	add	r2, sp, #304	; 0x130
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	18d4      	adds	r4, r2, r3
 8006eec:	0025      	movs	r5, r4
 8006eee:	9b00      	ldr	r3, [sp, #0]
 8006ef0:	9302      	str	r3, [sp, #8]
 8006ef2:	9b02      	ldr	r3, [sp, #8]
 8006ef4:	3d08      	subs	r5, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd00      	ble.n	8006efc <__kernel_rem_pio2+0x518>
 8006efa:	e07f      	b.n	8006ffc <__kernel_rem_pio2+0x618>
 8006efc:	9d00      	ldr	r5, [sp, #0]
 8006efe:	3c08      	subs	r4, #8
 8006f00:	2d01      	cmp	r5, #1
 8006f02:	dd00      	ble.n	8006f06 <__kernel_rem_pio2+0x522>
 8006f04:	e09c      	b.n	8007040 <__kernel_rem_pio2+0x65c>
 8006f06:	2400      	movs	r4, #0
 8006f08:	0021      	movs	r1, r4
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	dd00      	ble.n	8006f12 <__kernel_rem_pio2+0x52e>
 8006f10:	e0b4      	b.n	800707c <__kernel_rem_pio2+0x698>
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 8006f16:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 8006f18:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 8006f1a:	984f      	ldr	r0, [sp, #316]	; 0x13c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d000      	beq.n	8006f22 <__kernel_rem_pio2+0x53e>
 8006f20:	e0ba      	b.n	8007098 <__kernel_rem_pio2+0x6b4>
 8006f22:	0033      	movs	r3, r6
 8006f24:	003a      	movs	r2, r7
 8006f26:	9e06      	ldr	r6, [sp, #24]
 8006f28:	6032      	str	r2, [r6, #0]
 8006f2a:	6073      	str	r3, [r6, #4]
 8006f2c:	002a      	movs	r2, r5
 8006f2e:	0003      	movs	r3, r0
 8006f30:	60b2      	str	r2, [r6, #8]
 8006f32:	60f3      	str	r3, [r6, #12]
 8006f34:	0022      	movs	r2, r4
 8006f36:	000b      	movs	r3, r1
 8006f38:	6132      	str	r2, [r6, #16]
 8006f3a:	6173      	str	r3, [r6, #20]
 8006f3c:	e7c7      	b.n	8006ece <__kernel_rem_pio2+0x4ea>
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	aa4c      	add	r2, sp, #304	; 0x130
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	0028      	movs	r0, r5
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	0021      	movs	r1, r4
 8006f4e:	f7f9 faad 	bl	80004ac <__aeabi_dadd>
 8006f52:	0005      	movs	r5, r0
 8006f54:	000c      	movs	r4, r1
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	daed      	bge.n	8006f3e <__kernel_rem_pio2+0x55a>
 8006f62:	9b07      	ldr	r3, [sp, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <__kernel_rem_pio2+0x58a>
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	061b      	lsls	r3, r3, #24
 8006f6c:	18e4      	adds	r4, r4, r3
 8006f6e:	002a      	movs	r2, r5
 8006f70:	0023      	movs	r3, r4
 8006f72:	9906      	ldr	r1, [sp, #24]
 8006f74:	600a      	str	r2, [r1, #0]
 8006f76:	604b      	str	r3, [r1, #4]
 8006f78:	e7a9      	b.n	8006ece <__kernel_rem_pio2+0x4ea>
 8006f7a:	00e3      	lsls	r3, r4, #3
 8006f7c:	aa4c      	add	r2, sp, #304	; 0x130
 8006f7e:	18d3      	adds	r3, r2, r3
 8006f80:	0030      	movs	r0, r6
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	0029      	movs	r1, r5
 8006f88:	f7f9 fa90 	bl	80004ac <__aeabi_dadd>
 8006f8c:	0006      	movs	r6, r0
 8006f8e:	000d      	movs	r5, r1
 8006f90:	3c01      	subs	r4, #1
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	daf1      	bge.n	8006f7a <__kernel_rem_pio2+0x596>
 8006f96:	9b07      	ldr	r3, [sp, #28]
 8006f98:	0029      	movs	r1, r5
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <__kernel_rem_pio2+0x5c0>
 8006f9e:	2380      	movs	r3, #128	; 0x80
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	18e9      	adds	r1, r5, r3
 8006fa4:	0032      	movs	r2, r6
 8006fa6:	000b      	movs	r3, r1
 8006fa8:	9906      	ldr	r1, [sp, #24]
 8006faa:	2401      	movs	r4, #1
 8006fac:	600a      	str	r2, [r1, #0]
 8006fae:	604b      	str	r3, [r1, #4]
 8006fb0:	984c      	ldr	r0, [sp, #304]	; 0x130
 8006fb2:	994d      	ldr	r1, [sp, #308]	; 0x134
 8006fb4:	002b      	movs	r3, r5
 8006fb6:	f7fa fc95 	bl	80018e4 <__aeabi_dsub>
 8006fba:	0007      	movs	r7, r0
 8006fbc:	000e      	movs	r6, r1
 8006fbe:	ad4c      	add	r5, sp, #304	; 0x130
 8006fc0:	9b00      	ldr	r3, [sp, #0]
 8006fc2:	3508      	adds	r5, #8
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	da0f      	bge.n	8006fe8 <__kernel_rem_pio2+0x604>
 8006fc8:	9b07      	ldr	r3, [sp, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <__kernel_rem_pio2+0x5f0>
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	061b      	lsls	r3, r3, #24
 8006fd2:	18f6      	adds	r6, r6, r3
 8006fd4:	003a      	movs	r2, r7
 8006fd6:	0033      	movs	r3, r6
 8006fd8:	9906      	ldr	r1, [sp, #24]
 8006fda:	608a      	str	r2, [r1, #8]
 8006fdc:	60cb      	str	r3, [r1, #12]
 8006fde:	e776      	b.n	8006ece <__kernel_rem_pio2+0x4ea>
 8006fe0:	2600      	movs	r6, #0
 8006fe2:	9c00      	ldr	r4, [sp, #0]
 8006fe4:	0035      	movs	r5, r6
 8006fe6:	e7d4      	b.n	8006f92 <__kernel_rem_pio2+0x5ae>
 8006fe8:	0038      	movs	r0, r7
 8006fea:	682a      	ldr	r2, [r5, #0]
 8006fec:	686b      	ldr	r3, [r5, #4]
 8006fee:	0031      	movs	r1, r6
 8006ff0:	f7f9 fa5c 	bl	80004ac <__aeabi_dadd>
 8006ff4:	3401      	adds	r4, #1
 8006ff6:	0007      	movs	r7, r0
 8006ff8:	000e      	movs	r6, r1
 8006ffa:	e7e1      	b.n	8006fc0 <__kernel_rem_pio2+0x5dc>
 8006ffc:	9b02      	ldr	r3, [sp, #8]
 8006ffe:	68ae      	ldr	r6, [r5, #8]
 8007000:	68ef      	ldr	r7, [r5, #12]
 8007002:	3b01      	subs	r3, #1
 8007004:	9302      	str	r3, [sp, #8]
 8007006:	682a      	ldr	r2, [r5, #0]
 8007008:	686b      	ldr	r3, [r5, #4]
 800700a:	9204      	str	r2, [sp, #16]
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	9804      	ldr	r0, [sp, #16]
 8007010:	9905      	ldr	r1, [sp, #20]
 8007012:	0032      	movs	r2, r6
 8007014:	003b      	movs	r3, r7
 8007016:	f7f9 fa49 	bl	80004ac <__aeabi_dadd>
 800701a:	0002      	movs	r2, r0
 800701c:	000b      	movs	r3, r1
 800701e:	9008      	str	r0, [sp, #32]
 8007020:	9109      	str	r1, [sp, #36]	; 0x24
 8007022:	9804      	ldr	r0, [sp, #16]
 8007024:	9905      	ldr	r1, [sp, #20]
 8007026:	f7fa fc5d 	bl	80018e4 <__aeabi_dsub>
 800702a:	0032      	movs	r2, r6
 800702c:	003b      	movs	r3, r7
 800702e:	f7f9 fa3d 	bl	80004ac <__aeabi_dadd>
 8007032:	9a08      	ldr	r2, [sp, #32]
 8007034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007036:	60a8      	str	r0, [r5, #8]
 8007038:	60e9      	str	r1, [r5, #12]
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	606b      	str	r3, [r5, #4]
 800703e:	e758      	b.n	8006ef2 <__kernel_rem_pio2+0x50e>
 8007040:	6826      	ldr	r6, [r4, #0]
 8007042:	6867      	ldr	r7, [r4, #4]
 8007044:	68a2      	ldr	r2, [r4, #8]
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	0030      	movs	r0, r6
 800704a:	0039      	movs	r1, r7
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	9303      	str	r3, [sp, #12]
 8007050:	f7f9 fa2c 	bl	80004ac <__aeabi_dadd>
 8007054:	0002      	movs	r2, r0
 8007056:	000b      	movs	r3, r1
 8007058:	9004      	str	r0, [sp, #16]
 800705a:	9105      	str	r1, [sp, #20]
 800705c:	0030      	movs	r0, r6
 800705e:	0039      	movs	r1, r7
 8007060:	f7fa fc40 	bl	80018e4 <__aeabi_dsub>
 8007064:	9a02      	ldr	r2, [sp, #8]
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	f7f9 fa20 	bl	80004ac <__aeabi_dadd>
 800706c:	9a04      	ldr	r2, [sp, #16]
 800706e:	9b05      	ldr	r3, [sp, #20]
 8007070:	60a0      	str	r0, [r4, #8]
 8007072:	60e1      	str	r1, [r4, #12]
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	3d01      	subs	r5, #1
 800707a:	e740      	b.n	8006efe <__kernel_rem_pio2+0x51a>
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	aa4c      	add	r2, sp, #304	; 0x130
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	18d3      	adds	r3, r2, r3
 8007084:	0020      	movs	r0, r4
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f7f9 fa0f 	bl	80004ac <__aeabi_dadd>
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	0004      	movs	r4, r0
 8007092:	3b01      	subs	r3, #1
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	e738      	b.n	8006f0a <__kernel_rem_pio2+0x526>
 8007098:	9b06      	ldr	r3, [sp, #24]
 800709a:	9a06      	ldr	r2, [sp, #24]
 800709c:	601f      	str	r7, [r3, #0]
 800709e:	2380      	movs	r3, #128	; 0x80
 80070a0:	061b      	lsls	r3, r3, #24
 80070a2:	18f6      	adds	r6, r6, r3
 80070a4:	18c0      	adds	r0, r0, r3
 80070a6:	18c9      	adds	r1, r1, r3
 80070a8:	6056      	str	r6, [r2, #4]
 80070aa:	6095      	str	r5, [r2, #8]
 80070ac:	60d0      	str	r0, [r2, #12]
 80070ae:	6114      	str	r4, [r2, #16]
 80070b0:	6151      	str	r1, [r2, #20]
 80070b2:	e70c      	b.n	8006ece <__kernel_rem_pio2+0x4ea>
 80070b4:	41700000 	.word	0x41700000
 80070b8:	3e700000 	.word	0x3e700000

080070bc <scalbn>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	0014      	movs	r4, r2
 80070c0:	004a      	lsls	r2, r1, #1
 80070c2:	000b      	movs	r3, r1
 80070c4:	0d52      	lsrs	r2, r2, #21
 80070c6:	d10f      	bne.n	80070e8 <scalbn+0x2c>
 80070c8:	004b      	lsls	r3, r1, #1
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	4303      	orrs	r3, r0
 80070ce:	d011      	beq.n	80070f4 <scalbn+0x38>
 80070d0:	4b22      	ldr	r3, [pc, #136]	; (800715c <scalbn+0xa0>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7fa f944 	bl	8001360 <__aeabi_dmul>
 80070d8:	4b21      	ldr	r3, [pc, #132]	; (8007160 <scalbn+0xa4>)
 80070da:	429c      	cmp	r4, r3
 80070dc:	da0b      	bge.n	80070f6 <scalbn+0x3a>
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <scalbn+0xa8>)
 80070e0:	4b21      	ldr	r3, [pc, #132]	; (8007168 <scalbn+0xac>)
 80070e2:	f7fa f93d 	bl	8001360 <__aeabi_dmul>
 80070e6:	e005      	b.n	80070f4 <scalbn+0x38>
 80070e8:	4d20      	ldr	r5, [pc, #128]	; (800716c <scalbn+0xb0>)
 80070ea:	42aa      	cmp	r2, r5
 80070ec:	d107      	bne.n	80070fe <scalbn+0x42>
 80070ee:	0002      	movs	r2, r0
 80070f0:	f7f9 f9dc 	bl	80004ac <__aeabi_dadd>
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	000b      	movs	r3, r1
 80070f8:	004a      	lsls	r2, r1, #1
 80070fa:	0d52      	lsrs	r2, r2, #21
 80070fc:	3a36      	subs	r2, #54	; 0x36
 80070fe:	4d1c      	ldr	r5, [pc, #112]	; (8007170 <scalbn+0xb4>)
 8007100:	42ac      	cmp	r4, r5
 8007102:	dd0a      	ble.n	800711a <scalbn+0x5e>
 8007104:	4c1b      	ldr	r4, [pc, #108]	; (8007174 <scalbn+0xb8>)
 8007106:	4d1c      	ldr	r5, [pc, #112]	; (8007178 <scalbn+0xbc>)
 8007108:	2900      	cmp	r1, #0
 800710a:	da01      	bge.n	8007110 <scalbn+0x54>
 800710c:	4c19      	ldr	r4, [pc, #100]	; (8007174 <scalbn+0xb8>)
 800710e:	4d1b      	ldr	r5, [pc, #108]	; (800717c <scalbn+0xc0>)
 8007110:	4a18      	ldr	r2, [pc, #96]	; (8007174 <scalbn+0xb8>)
 8007112:	4b19      	ldr	r3, [pc, #100]	; (8007178 <scalbn+0xbc>)
 8007114:	0020      	movs	r0, r4
 8007116:	0029      	movs	r1, r5
 8007118:	e7e3      	b.n	80070e2 <scalbn+0x26>
 800711a:	18a2      	adds	r2, r4, r2
 800711c:	4c18      	ldr	r4, [pc, #96]	; (8007180 <scalbn+0xc4>)
 800711e:	42a2      	cmp	r2, r4
 8007120:	dcf0      	bgt.n	8007104 <scalbn+0x48>
 8007122:	2a00      	cmp	r2, #0
 8007124:	dd05      	ble.n	8007132 <scalbn+0x76>
 8007126:	4c17      	ldr	r4, [pc, #92]	; (8007184 <scalbn+0xc8>)
 8007128:	0512      	lsls	r2, r2, #20
 800712a:	4023      	ands	r3, r4
 800712c:	4313      	orrs	r3, r2
 800712e:	0019      	movs	r1, r3
 8007130:	e7e0      	b.n	80070f4 <scalbn+0x38>
 8007132:	0014      	movs	r4, r2
 8007134:	3435      	adds	r4, #53	; 0x35
 8007136:	da08      	bge.n	800714a <scalbn+0x8e>
 8007138:	4c0a      	ldr	r4, [pc, #40]	; (8007164 <scalbn+0xa8>)
 800713a:	4d0b      	ldr	r5, [pc, #44]	; (8007168 <scalbn+0xac>)
 800713c:	2900      	cmp	r1, #0
 800713e:	da01      	bge.n	8007144 <scalbn+0x88>
 8007140:	4c08      	ldr	r4, [pc, #32]	; (8007164 <scalbn+0xa8>)
 8007142:	4d11      	ldr	r5, [pc, #68]	; (8007188 <scalbn+0xcc>)
 8007144:	4a07      	ldr	r2, [pc, #28]	; (8007164 <scalbn+0xa8>)
 8007146:	4b08      	ldr	r3, [pc, #32]	; (8007168 <scalbn+0xac>)
 8007148:	e7e4      	b.n	8007114 <scalbn+0x58>
 800714a:	4c0e      	ldr	r4, [pc, #56]	; (8007184 <scalbn+0xc8>)
 800714c:	3236      	adds	r2, #54	; 0x36
 800714e:	4023      	ands	r3, r4
 8007150:	0512      	lsls	r2, r2, #20
 8007152:	431a      	orrs	r2, r3
 8007154:	0011      	movs	r1, r2
 8007156:	4b0d      	ldr	r3, [pc, #52]	; (800718c <scalbn+0xd0>)
 8007158:	2200      	movs	r2, #0
 800715a:	e7c2      	b.n	80070e2 <scalbn+0x26>
 800715c:	43500000 	.word	0x43500000
 8007160:	ffff3cb0 	.word	0xffff3cb0
 8007164:	c2f8f359 	.word	0xc2f8f359
 8007168:	01a56e1f 	.word	0x01a56e1f
 800716c:	000007ff 	.word	0x000007ff
 8007170:	0000c350 	.word	0x0000c350
 8007174:	8800759c 	.word	0x8800759c
 8007178:	7e37e43c 	.word	0x7e37e43c
 800717c:	fe37e43c 	.word	0xfe37e43c
 8007180:	000007fe 	.word	0x000007fe
 8007184:	800fffff 	.word	0x800fffff
 8007188:	81a56e1f 	.word	0x81a56e1f
 800718c:	3c900000 	.word	0x3c900000

08007190 <floor>:
 8007190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007192:	004b      	lsls	r3, r1, #1
 8007194:	4a3e      	ldr	r2, [pc, #248]	; (8007290 <floor+0x100>)
 8007196:	0d5b      	lsrs	r3, r3, #21
 8007198:	189f      	adds	r7, r3, r2
 800719a:	4684      	mov	ip, r0
 800719c:	000e      	movs	r6, r1
 800719e:	000c      	movs	r4, r1
 80071a0:	0005      	movs	r5, r0
 80071a2:	9001      	str	r0, [sp, #4]
 80071a4:	2f13      	cmp	r7, #19
 80071a6:	dc34      	bgt.n	8007212 <floor+0x82>
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	da16      	bge.n	80071da <floor+0x4a>
 80071ac:	4a39      	ldr	r2, [pc, #228]	; (8007294 <floor+0x104>)
 80071ae:	4b3a      	ldr	r3, [pc, #232]	; (8007298 <floor+0x108>)
 80071b0:	4660      	mov	r0, ip
 80071b2:	0031      	movs	r1, r6
 80071b4:	f7f9 f97a 	bl	80004ac <__aeabi_dadd>
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	f7f9 f944 	bl	8000448 <__aeabi_dcmpgt>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d007      	beq.n	80071d4 <floor+0x44>
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	da5d      	bge.n	8007284 <floor+0xf4>
 80071c8:	0074      	lsls	r4, r6, #1
 80071ca:	0864      	lsrs	r4, r4, #1
 80071cc:	4325      	orrs	r5, r4
 80071ce:	d05c      	beq.n	800728a <floor+0xfa>
 80071d0:	2500      	movs	r5, #0
 80071d2:	4c32      	ldr	r4, [pc, #200]	; (800729c <floor+0x10c>)
 80071d4:	46ac      	mov	ip, r5
 80071d6:	0026      	movs	r6, r4
 80071d8:	e029      	b.n	800722e <floor+0x9e>
 80071da:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <floor+0x110>)
 80071dc:	413b      	asrs	r3, r7
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	400b      	ands	r3, r1
 80071e2:	4303      	orrs	r3, r0
 80071e4:	d023      	beq.n	800722e <floor+0x9e>
 80071e6:	4a2b      	ldr	r2, [pc, #172]	; (8007294 <floor+0x104>)
 80071e8:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <floor+0x108>)
 80071ea:	4660      	mov	r0, ip
 80071ec:	0031      	movs	r1, r6
 80071ee:	f7f9 f95d 	bl	80004ac <__aeabi_dadd>
 80071f2:	2200      	movs	r2, #0
 80071f4:	2300      	movs	r3, #0
 80071f6:	f7f9 f927 	bl	8000448 <__aeabi_dcmpgt>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d0ea      	beq.n	80071d4 <floor+0x44>
 80071fe:	2e00      	cmp	r6, #0
 8007200:	da03      	bge.n	800720a <floor+0x7a>
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	035b      	lsls	r3, r3, #13
 8007206:	413b      	asrs	r3, r7
 8007208:	18f4      	adds	r4, r6, r3
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	2500      	movs	r5, #0
 800720e:	439c      	bics	r4, r3
 8007210:	e7e0      	b.n	80071d4 <floor+0x44>
 8007212:	2f33      	cmp	r7, #51	; 0x33
 8007214:	dd0f      	ble.n	8007236 <floor+0xa6>
 8007216:	2380      	movs	r3, #128	; 0x80
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	429f      	cmp	r7, r3
 800721c:	d107      	bne.n	800722e <floor+0x9e>
 800721e:	0002      	movs	r2, r0
 8007220:	000b      	movs	r3, r1
 8007222:	4660      	mov	r0, ip
 8007224:	0031      	movs	r1, r6
 8007226:	f7f9 f941 	bl	80004ac <__aeabi_dadd>
 800722a:	4684      	mov	ip, r0
 800722c:	000e      	movs	r6, r1
 800722e:	4660      	mov	r0, ip
 8007230:	0031      	movs	r1, r6
 8007232:	b003      	add	sp, #12
 8007234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007236:	4a1b      	ldr	r2, [pc, #108]	; (80072a4 <floor+0x114>)
 8007238:	189b      	adds	r3, r3, r2
 800723a:	2201      	movs	r2, #1
 800723c:	4252      	negs	r2, r2
 800723e:	40da      	lsrs	r2, r3
 8007240:	9200      	str	r2, [sp, #0]
 8007242:	4202      	tst	r2, r0
 8007244:	d0f3      	beq.n	800722e <floor+0x9e>
 8007246:	4a13      	ldr	r2, [pc, #76]	; (8007294 <floor+0x104>)
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <floor+0x108>)
 800724a:	4660      	mov	r0, ip
 800724c:	0031      	movs	r1, r6
 800724e:	f7f9 f92d 	bl	80004ac <__aeabi_dadd>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	f7f9 f8f7 	bl	8000448 <__aeabi_dcmpgt>
 800725a:	2800      	cmp	r0, #0
 800725c:	d0ba      	beq.n	80071d4 <floor+0x44>
 800725e:	2e00      	cmp	r6, #0
 8007260:	da02      	bge.n	8007268 <floor+0xd8>
 8007262:	2f14      	cmp	r7, #20
 8007264:	d103      	bne.n	800726e <floor+0xde>
 8007266:	3401      	adds	r4, #1
 8007268:	9b00      	ldr	r3, [sp, #0]
 800726a:	439d      	bics	r5, r3
 800726c:	e7b2      	b.n	80071d4 <floor+0x44>
 800726e:	2234      	movs	r2, #52	; 0x34
 8007270:	2301      	movs	r3, #1
 8007272:	1bd2      	subs	r2, r2, r7
 8007274:	4093      	lsls	r3, r2
 8007276:	18ed      	adds	r5, r5, r3
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	429d      	cmp	r5, r3
 800727c:	419b      	sbcs	r3, r3
 800727e:	425b      	negs	r3, r3
 8007280:	18f4      	adds	r4, r6, r3
 8007282:	e7f1      	b.n	8007268 <floor+0xd8>
 8007284:	2500      	movs	r5, #0
 8007286:	002c      	movs	r4, r5
 8007288:	e7a4      	b.n	80071d4 <floor+0x44>
 800728a:	2480      	movs	r4, #128	; 0x80
 800728c:	0624      	lsls	r4, r4, #24
 800728e:	e7a1      	b.n	80071d4 <floor+0x44>
 8007290:	fffffc01 	.word	0xfffffc01
 8007294:	8800759c 	.word	0x8800759c
 8007298:	7e37e43c 	.word	0x7e37e43c
 800729c:	bff00000 	.word	0xbff00000
 80072a0:	000fffff 	.word	0x000fffff
 80072a4:	fffffbed 	.word	0xfffffbed

080072a8 <_init>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr

080072b4 <_fini>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr
