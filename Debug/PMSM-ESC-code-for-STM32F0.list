
PMSM-ESC-code-for-STM32F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080069c8  080069c8  000169c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c68  08006c68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c68  08006c68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  2000000c  08006c7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08006c7c  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f335  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ab  00000000  00000000  0002f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0a  00000000  00000000  00032a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000119df  00000000  00000000  0003358a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d5a  00000000  00000000  00044f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00067422  00000000  00000000  00056cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000358c  00000000  00000000  000be0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c1674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080069ac 	.word	0x080069ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080069ac 	.word	0x080069ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ff47 	bl	8001298 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe97 	bl	8001148 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff39 	bl	8001298 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff2f 	bl	8001298 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 febf 	bl	80011cc <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 feb5 	bl	80011cc <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fdaf 	bl	8001fe8 <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f001 fa26 	bl	80018e4 <__aeabi_dsub>
 8000498:	f001 fda6 	bl	8001fe8 <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_dadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	4646      	mov	r6, r8
 80004b2:	46d6      	mov	lr, sl
 80004b4:	0004      	movs	r4, r0
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	001f      	movs	r7, r3
 80004ba:	030b      	lsls	r3, r1, #12
 80004bc:	0010      	movs	r0, r2
 80004be:	004e      	lsls	r6, r1, #1
 80004c0:	0a5b      	lsrs	r3, r3, #9
 80004c2:	0fcd      	lsrs	r5, r1, #31
 80004c4:	0f61      	lsrs	r1, r4, #29
 80004c6:	007a      	lsls	r2, r7, #1
 80004c8:	4319      	orrs	r1, r3
 80004ca:	00e3      	lsls	r3, r4, #3
 80004cc:	033c      	lsls	r4, r7, #12
 80004ce:	0fff      	lsrs	r7, r7, #31
 80004d0:	46bc      	mov	ip, r7
 80004d2:	0a64      	lsrs	r4, r4, #9
 80004d4:	0f47      	lsrs	r7, r0, #29
 80004d6:	4327      	orrs	r7, r4
 80004d8:	0d76      	lsrs	r6, r6, #21
 80004da:	0d52      	lsrs	r2, r2, #21
 80004dc:	00c0      	lsls	r0, r0, #3
 80004de:	46b9      	mov	r9, r7
 80004e0:	4680      	mov	r8, r0
 80004e2:	1ab7      	subs	r7, r6, r2
 80004e4:	4565      	cmp	r5, ip
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0x3e>
 80004e8:	e09b      	b.n	8000622 <__aeabi_dadd+0x176>
 80004ea:	2f00      	cmp	r7, #0
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_dadd+0x44>
 80004ee:	e084      	b.n	80005fa <__aeabi_dadd+0x14e>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4a>
 80004f4:	e0be      	b.n	8000674 <__aeabi_dadd+0x1c8>
 80004f6:	4ac8      	ldr	r2, [pc, #800]	; (8000818 <__aeabi_dadd+0x36c>)
 80004f8:	4296      	cmp	r6, r2
 80004fa:	d100      	bne.n	80004fe <__aeabi_dadd+0x52>
 80004fc:	e124      	b.n	8000748 <__aeabi_dadd+0x29c>
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	464c      	mov	r4, r9
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	4314      	orrs	r4, r2
 8000506:	46a1      	mov	r9, r4
 8000508:	2f38      	cmp	r7, #56	; 0x38
 800050a:	dd00      	ble.n	800050e <__aeabi_dadd+0x62>
 800050c:	e167      	b.n	80007de <__aeabi_dadd+0x332>
 800050e:	2f1f      	cmp	r7, #31
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x68>
 8000512:	e1d6      	b.n	80008c2 <__aeabi_dadd+0x416>
 8000514:	2220      	movs	r2, #32
 8000516:	464c      	mov	r4, r9
 8000518:	1bd2      	subs	r2, r2, r7
 800051a:	4094      	lsls	r4, r2
 800051c:	46a2      	mov	sl, r4
 800051e:	4644      	mov	r4, r8
 8000520:	40fc      	lsrs	r4, r7
 8000522:	0020      	movs	r0, r4
 8000524:	4654      	mov	r4, sl
 8000526:	4304      	orrs	r4, r0
 8000528:	4640      	mov	r0, r8
 800052a:	4090      	lsls	r0, r2
 800052c:	1e42      	subs	r2, r0, #1
 800052e:	4190      	sbcs	r0, r2
 8000530:	464a      	mov	r2, r9
 8000532:	40fa      	lsrs	r2, r7
 8000534:	4304      	orrs	r4, r0
 8000536:	1a89      	subs	r1, r1, r2
 8000538:	1b1c      	subs	r4, r3, r4
 800053a:	42a3      	cmp	r3, r4
 800053c:	4192      	sbcs	r2, r2
 800053e:	4252      	negs	r2, r2
 8000540:	1a8b      	subs	r3, r1, r2
 8000542:	469a      	mov	sl, r3
 8000544:	4653      	mov	r3, sl
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0xa0>
 800054a:	e0d4      	b.n	80006f6 <__aeabi_dadd+0x24a>
 800054c:	4653      	mov	r3, sl
 800054e:	025a      	lsls	r2, r3, #9
 8000550:	0a53      	lsrs	r3, r2, #9
 8000552:	469a      	mov	sl, r3
 8000554:	4653      	mov	r3, sl
 8000556:	2b00      	cmp	r3, #0
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xb0>
 800055a:	e104      	b.n	8000766 <__aeabi_dadd+0x2ba>
 800055c:	4650      	mov	r0, sl
 800055e:	f001 fdf1 	bl	8002144 <__clzsi2>
 8000562:	0003      	movs	r3, r0
 8000564:	3b08      	subs	r3, #8
 8000566:	2220      	movs	r2, #32
 8000568:	0020      	movs	r0, r4
 800056a:	1ad2      	subs	r2, r2, r3
 800056c:	4651      	mov	r1, sl
 800056e:	40d0      	lsrs	r0, r2
 8000570:	4099      	lsls	r1, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409c      	lsls	r4, r3
 8000576:	430a      	orrs	r2, r1
 8000578:	42b3      	cmp	r3, r6
 800057a:	da00      	bge.n	800057e <__aeabi_dadd+0xd2>
 800057c:	e102      	b.n	8000784 <__aeabi_dadd+0x2d8>
 800057e:	1b9b      	subs	r3, r3, r6
 8000580:	1c59      	adds	r1, r3, #1
 8000582:	291f      	cmp	r1, #31
 8000584:	dd00      	ble.n	8000588 <__aeabi_dadd+0xdc>
 8000586:	e0a7      	b.n	80006d8 <__aeabi_dadd+0x22c>
 8000588:	2320      	movs	r3, #32
 800058a:	0010      	movs	r0, r2
 800058c:	0026      	movs	r6, r4
 800058e:	1a5b      	subs	r3, r3, r1
 8000590:	409c      	lsls	r4, r3
 8000592:	4098      	lsls	r0, r3
 8000594:	40ce      	lsrs	r6, r1
 8000596:	40ca      	lsrs	r2, r1
 8000598:	1e63      	subs	r3, r4, #1
 800059a:	419c      	sbcs	r4, r3
 800059c:	4330      	orrs	r0, r6
 800059e:	4692      	mov	sl, r2
 80005a0:	2600      	movs	r6, #0
 80005a2:	4304      	orrs	r4, r0
 80005a4:	0763      	lsls	r3, r4, #29
 80005a6:	d009      	beq.n	80005bc <__aeabi_dadd+0x110>
 80005a8:	230f      	movs	r3, #15
 80005aa:	4023      	ands	r3, r4
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d005      	beq.n	80005bc <__aeabi_dadd+0x110>
 80005b0:	1d23      	adds	r3, r4, #4
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	41a4      	sbcs	r4, r4
 80005b6:	4264      	negs	r4, r4
 80005b8:	44a2      	add	sl, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	4653      	mov	r3, sl
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	d400      	bmi.n	80005c4 <__aeabi_dadd+0x118>
 80005c2:	e09b      	b.n	80006fc <__aeabi_dadd+0x250>
 80005c4:	4b94      	ldr	r3, [pc, #592]	; (8000818 <__aeabi_dadd+0x36c>)
 80005c6:	3601      	adds	r6, #1
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x122>
 80005cc:	e0b8      	b.n	8000740 <__aeabi_dadd+0x294>
 80005ce:	4653      	mov	r3, sl
 80005d0:	4992      	ldr	r1, [pc, #584]	; (800081c <__aeabi_dadd+0x370>)
 80005d2:	08e4      	lsrs	r4, r4, #3
 80005d4:	400b      	ands	r3, r1
 80005d6:	0019      	movs	r1, r3
 80005d8:	075b      	lsls	r3, r3, #29
 80005da:	4323      	orrs	r3, r4
 80005dc:	0572      	lsls	r2, r6, #21
 80005de:	024c      	lsls	r4, r1, #9
 80005e0:	0b24      	lsrs	r4, r4, #12
 80005e2:	0d52      	lsrs	r2, r2, #21
 80005e4:	0512      	lsls	r2, r2, #20
 80005e6:	07ed      	lsls	r5, r5, #31
 80005e8:	4322      	orrs	r2, r4
 80005ea:	432a      	orrs	r2, r5
 80005ec:	0018      	movs	r0, r3
 80005ee:	0011      	movs	r1, r2
 80005f0:	bce0      	pop	{r5, r6, r7}
 80005f2:	46ba      	mov	sl, r7
 80005f4:	46b1      	mov	r9, r6
 80005f6:	46a8      	mov	r8, r5
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	d048      	beq.n	8000690 <__aeabi_dadd+0x1e4>
 80005fe:	1b97      	subs	r7, r2, r6
 8000600:	2e00      	cmp	r6, #0
 8000602:	d000      	beq.n	8000606 <__aeabi_dadd+0x15a>
 8000604:	e10e      	b.n	8000824 <__aeabi_dadd+0x378>
 8000606:	000c      	movs	r4, r1
 8000608:	431c      	orrs	r4, r3
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x162>
 800060c:	e1b7      	b.n	800097e <__aeabi_dadd+0x4d2>
 800060e:	1e7c      	subs	r4, r7, #1
 8000610:	2f01      	cmp	r7, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16a>
 8000614:	e226      	b.n	8000a64 <__aeabi_dadd+0x5b8>
 8000616:	4d80      	ldr	r5, [pc, #512]	; (8000818 <__aeabi_dadd+0x36c>)
 8000618:	42af      	cmp	r7, r5
 800061a:	d100      	bne.n	800061e <__aeabi_dadd+0x172>
 800061c:	e1d5      	b.n	80009ca <__aeabi_dadd+0x51e>
 800061e:	0027      	movs	r7, r4
 8000620:	e107      	b.n	8000832 <__aeabi_dadd+0x386>
 8000622:	2f00      	cmp	r7, #0
 8000624:	dc00      	bgt.n	8000628 <__aeabi_dadd+0x17c>
 8000626:	e0b2      	b.n	800078e <__aeabi_dadd+0x2e2>
 8000628:	2a00      	cmp	r2, #0
 800062a:	d047      	beq.n	80006bc <__aeabi_dadd+0x210>
 800062c:	4a7a      	ldr	r2, [pc, #488]	; (8000818 <__aeabi_dadd+0x36c>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x188>
 8000632:	e089      	b.n	8000748 <__aeabi_dadd+0x29c>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	464c      	mov	r4, r9
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a1      	mov	r9, r4
 800063e:	2f38      	cmp	r7, #56	; 0x38
 8000640:	dc6b      	bgt.n	800071a <__aeabi_dadd+0x26e>
 8000642:	2f1f      	cmp	r7, #31
 8000644:	dc00      	bgt.n	8000648 <__aeabi_dadd+0x19c>
 8000646:	e16e      	b.n	8000926 <__aeabi_dadd+0x47a>
 8000648:	003a      	movs	r2, r7
 800064a:	4648      	mov	r0, r9
 800064c:	3a20      	subs	r2, #32
 800064e:	40d0      	lsrs	r0, r2
 8000650:	4684      	mov	ip, r0
 8000652:	2f20      	cmp	r7, #32
 8000654:	d007      	beq.n	8000666 <__aeabi_dadd+0x1ba>
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	4648      	mov	r0, r9
 800065a:	1bd2      	subs	r2, r2, r7
 800065c:	4090      	lsls	r0, r2
 800065e:	0002      	movs	r2, r0
 8000660:	4640      	mov	r0, r8
 8000662:	4310      	orrs	r0, r2
 8000664:	4680      	mov	r8, r0
 8000666:	4640      	mov	r0, r8
 8000668:	1e42      	subs	r2, r0, #1
 800066a:	4190      	sbcs	r0, r2
 800066c:	4662      	mov	r2, ip
 800066e:	0004      	movs	r4, r0
 8000670:	4314      	orrs	r4, r2
 8000672:	e057      	b.n	8000724 <__aeabi_dadd+0x278>
 8000674:	464a      	mov	r2, r9
 8000676:	4302      	orrs	r2, r0
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x1d0>
 800067a:	e103      	b.n	8000884 <__aeabi_dadd+0x3d8>
 800067c:	1e7a      	subs	r2, r7, #1
 800067e:	2f01      	cmp	r7, #1
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x1d8>
 8000682:	e193      	b.n	80009ac <__aeabi_dadd+0x500>
 8000684:	4c64      	ldr	r4, [pc, #400]	; (8000818 <__aeabi_dadd+0x36c>)
 8000686:	42a7      	cmp	r7, r4
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x1e0>
 800068a:	e18a      	b.n	80009a2 <__aeabi_dadd+0x4f6>
 800068c:	0017      	movs	r7, r2
 800068e:	e73b      	b.n	8000508 <__aeabi_dadd+0x5c>
 8000690:	4c63      	ldr	r4, [pc, #396]	; (8000820 <__aeabi_dadd+0x374>)
 8000692:	1c72      	adds	r2, r6, #1
 8000694:	4222      	tst	r2, r4
 8000696:	d000      	beq.n	800069a <__aeabi_dadd+0x1ee>
 8000698:	e0e0      	b.n	800085c <__aeabi_dadd+0x3b0>
 800069a:	000a      	movs	r2, r1
 800069c:	431a      	orrs	r2, r3
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d000      	beq.n	80006a4 <__aeabi_dadd+0x1f8>
 80006a2:	e174      	b.n	800098e <__aeabi_dadd+0x4e2>
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x1fe>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a0>
 80006aa:	464a      	mov	r2, r9
 80006ac:	4302      	orrs	r2, r0
 80006ae:	d000      	beq.n	80006b2 <__aeabi_dadd+0x206>
 80006b0:	e1e3      	b.n	8000a7a <__aeabi_dadd+0x5ce>
 80006b2:	074a      	lsls	r2, r1, #29
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	08c9      	lsrs	r1, r1, #3
 80006ba:	e029      	b.n	8000710 <__aeabi_dadd+0x264>
 80006bc:	464a      	mov	r2, r9
 80006be:	4302      	orrs	r2, r0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x218>
 80006c2:	e17d      	b.n	80009c0 <__aeabi_dadd+0x514>
 80006c4:	1e7a      	subs	r2, r7, #1
 80006c6:	2f01      	cmp	r7, #1
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x220>
 80006ca:	e0e0      	b.n	800088e <__aeabi_dadd+0x3e2>
 80006cc:	4c52      	ldr	r4, [pc, #328]	; (8000818 <__aeabi_dadd+0x36c>)
 80006ce:	42a7      	cmp	r7, r4
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x228>
 80006d2:	e166      	b.n	80009a2 <__aeabi_dadd+0x4f6>
 80006d4:	0017      	movs	r7, r2
 80006d6:	e7b2      	b.n	800063e <__aeabi_dadd+0x192>
 80006d8:	0010      	movs	r0, r2
 80006da:	3b1f      	subs	r3, #31
 80006dc:	40d8      	lsrs	r0, r3
 80006de:	2920      	cmp	r1, #32
 80006e0:	d003      	beq.n	80006ea <__aeabi_dadd+0x23e>
 80006e2:	2340      	movs	r3, #64	; 0x40
 80006e4:	1a5b      	subs	r3, r3, r1
 80006e6:	409a      	lsls	r2, r3
 80006e8:	4314      	orrs	r4, r2
 80006ea:	1e63      	subs	r3, r4, #1
 80006ec:	419c      	sbcs	r4, r3
 80006ee:	2300      	movs	r3, #0
 80006f0:	2600      	movs	r6, #0
 80006f2:	469a      	mov	sl, r3
 80006f4:	4304      	orrs	r4, r0
 80006f6:	0763      	lsls	r3, r4, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_dadd+0x250>
 80006fa:	e755      	b.n	80005a8 <__aeabi_dadd+0xfc>
 80006fc:	4652      	mov	r2, sl
 80006fe:	08e3      	lsrs	r3, r4, #3
 8000700:	0752      	lsls	r2, r2, #29
 8000702:	4313      	orrs	r3, r2
 8000704:	4652      	mov	r2, sl
 8000706:	0037      	movs	r7, r6
 8000708:	08d1      	lsrs	r1, r2, #3
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <__aeabi_dadd+0x36c>)
 800070c:	4297      	cmp	r7, r2
 800070e:	d01f      	beq.n	8000750 <__aeabi_dadd+0x2a4>
 8000710:	0309      	lsls	r1, r1, #12
 8000712:	057a      	lsls	r2, r7, #21
 8000714:	0b0c      	lsrs	r4, r1, #12
 8000716:	0d52      	lsrs	r2, r2, #21
 8000718:	e764      	b.n	80005e4 <__aeabi_dadd+0x138>
 800071a:	4642      	mov	r2, r8
 800071c:	464c      	mov	r4, r9
 800071e:	4314      	orrs	r4, r2
 8000720:	1e62      	subs	r2, r4, #1
 8000722:	4194      	sbcs	r4, r2
 8000724:	18e4      	adds	r4, r4, r3
 8000726:	429c      	cmp	r4, r3
 8000728:	4192      	sbcs	r2, r2
 800072a:	4252      	negs	r2, r2
 800072c:	4692      	mov	sl, r2
 800072e:	448a      	add	sl, r1
 8000730:	4653      	mov	r3, sl
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	d5df      	bpl.n	80006f6 <__aeabi_dadd+0x24a>
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <__aeabi_dadd+0x36c>)
 8000738:	3601      	adds	r6, #1
 800073a:	429e      	cmp	r6, r3
 800073c:	d000      	beq.n	8000740 <__aeabi_dadd+0x294>
 800073e:	e0b3      	b.n	80008a8 <__aeabi_dadd+0x3fc>
 8000740:	0032      	movs	r2, r6
 8000742:	2400      	movs	r4, #0
 8000744:	2300      	movs	r3, #0
 8000746:	e74d      	b.n	80005e4 <__aeabi_dadd+0x138>
 8000748:	074a      	lsls	r2, r1, #29
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	4313      	orrs	r3, r2
 800074e:	08c9      	lsrs	r1, r1, #3
 8000750:	001a      	movs	r2, r3
 8000752:	430a      	orrs	r2, r1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x2ac>
 8000756:	e200      	b.n	8000b5a <__aeabi_dadd+0x6ae>
 8000758:	2480      	movs	r4, #128	; 0x80
 800075a:	0324      	lsls	r4, r4, #12
 800075c:	430c      	orrs	r4, r1
 800075e:	0324      	lsls	r4, r4, #12
 8000760:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <__aeabi_dadd+0x36c>)
 8000762:	0b24      	lsrs	r4, r4, #12
 8000764:	e73e      	b.n	80005e4 <__aeabi_dadd+0x138>
 8000766:	0020      	movs	r0, r4
 8000768:	f001 fcec 	bl	8002144 <__clzsi2>
 800076c:	0003      	movs	r3, r0
 800076e:	3318      	adds	r3, #24
 8000770:	2b1f      	cmp	r3, #31
 8000772:	dc00      	bgt.n	8000776 <__aeabi_dadd+0x2ca>
 8000774:	e6f7      	b.n	8000566 <__aeabi_dadd+0xba>
 8000776:	0022      	movs	r2, r4
 8000778:	3808      	subs	r0, #8
 800077a:	4082      	lsls	r2, r0
 800077c:	2400      	movs	r4, #0
 800077e:	42b3      	cmp	r3, r6
 8000780:	db00      	blt.n	8000784 <__aeabi_dadd+0x2d8>
 8000782:	e6fc      	b.n	800057e <__aeabi_dadd+0xd2>
 8000784:	1af6      	subs	r6, r6, r3
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <__aeabi_dadd+0x370>)
 8000788:	401a      	ands	r2, r3
 800078a:	4692      	mov	sl, r2
 800078c:	e70a      	b.n	80005a4 <__aeabi_dadd+0xf8>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d02b      	beq.n	80007ea <__aeabi_dadd+0x33e>
 8000792:	1b97      	subs	r7, r2, r6
 8000794:	2e00      	cmp	r6, #0
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2ee>
 8000798:	e0b8      	b.n	800090c <__aeabi_dadd+0x460>
 800079a:	4c1f      	ldr	r4, [pc, #124]	; (8000818 <__aeabi_dadd+0x36c>)
 800079c:	42a2      	cmp	r2, r4
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x2f6>
 80007a0:	e11c      	b.n	80009dc <__aeabi_dadd+0x530>
 80007a2:	2480      	movs	r4, #128	; 0x80
 80007a4:	0424      	lsls	r4, r4, #16
 80007a6:	4321      	orrs	r1, r4
 80007a8:	2f38      	cmp	r7, #56	; 0x38
 80007aa:	dd00      	ble.n	80007ae <__aeabi_dadd+0x302>
 80007ac:	e11e      	b.n	80009ec <__aeabi_dadd+0x540>
 80007ae:	2f1f      	cmp	r7, #31
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dadd+0x308>
 80007b2:	e19e      	b.n	8000af2 <__aeabi_dadd+0x646>
 80007b4:	2620      	movs	r6, #32
 80007b6:	000c      	movs	r4, r1
 80007b8:	1bf6      	subs	r6, r6, r7
 80007ba:	0018      	movs	r0, r3
 80007bc:	40b3      	lsls	r3, r6
 80007be:	40b4      	lsls	r4, r6
 80007c0:	40f8      	lsrs	r0, r7
 80007c2:	1e5e      	subs	r6, r3, #1
 80007c4:	41b3      	sbcs	r3, r6
 80007c6:	40f9      	lsrs	r1, r7
 80007c8:	4304      	orrs	r4, r0
 80007ca:	431c      	orrs	r4, r3
 80007cc:	4489      	add	r9, r1
 80007ce:	4444      	add	r4, r8
 80007d0:	4544      	cmp	r4, r8
 80007d2:	419b      	sbcs	r3, r3
 80007d4:	425b      	negs	r3, r3
 80007d6:	444b      	add	r3, r9
 80007d8:	469a      	mov	sl, r3
 80007da:	0016      	movs	r6, r2
 80007dc:	e7a8      	b.n	8000730 <__aeabi_dadd+0x284>
 80007de:	4642      	mov	r2, r8
 80007e0:	464c      	mov	r4, r9
 80007e2:	4314      	orrs	r4, r2
 80007e4:	1e62      	subs	r2, r4, #1
 80007e6:	4194      	sbcs	r4, r2
 80007e8:	e6a6      	b.n	8000538 <__aeabi_dadd+0x8c>
 80007ea:	4c0d      	ldr	r4, [pc, #52]	; (8000820 <__aeabi_dadd+0x374>)
 80007ec:	1c72      	adds	r2, r6, #1
 80007ee:	4222      	tst	r2, r4
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x348>
 80007f2:	e0a8      	b.n	8000946 <__aeabi_dadd+0x49a>
 80007f4:	000a      	movs	r2, r1
 80007f6:	431a      	orrs	r2, r3
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x352>
 80007fc:	e10a      	b.n	8000a14 <__aeabi_dadd+0x568>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x358>
 8000802:	e15e      	b.n	8000ac2 <__aeabi_dadd+0x616>
 8000804:	464a      	mov	r2, r9
 8000806:	4302      	orrs	r2, r0
 8000808:	d000      	beq.n	800080c <__aeabi_dadd+0x360>
 800080a:	e161      	b.n	8000ad0 <__aeabi_dadd+0x624>
 800080c:	074a      	lsls	r2, r1, #29
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	4313      	orrs	r3, r2
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	e77c      	b.n	8000710 <__aeabi_dadd+0x264>
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	000007ff 	.word	0x000007ff
 800081c:	ff7fffff 	.word	0xff7fffff
 8000820:	000007fe 	.word	0x000007fe
 8000824:	4ccf      	ldr	r4, [pc, #828]	; (8000b64 <__aeabi_dadd+0x6b8>)
 8000826:	42a2      	cmp	r2, r4
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x380>
 800082a:	e0ce      	b.n	80009ca <__aeabi_dadd+0x51e>
 800082c:	2480      	movs	r4, #128	; 0x80
 800082e:	0424      	lsls	r4, r4, #16
 8000830:	4321      	orrs	r1, r4
 8000832:	2f38      	cmp	r7, #56	; 0x38
 8000834:	dc5b      	bgt.n	80008ee <__aeabi_dadd+0x442>
 8000836:	2f1f      	cmp	r7, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x390>
 800083a:	e0dc      	b.n	80009f6 <__aeabi_dadd+0x54a>
 800083c:	2520      	movs	r5, #32
 800083e:	000c      	movs	r4, r1
 8000840:	1bed      	subs	r5, r5, r7
 8000842:	001e      	movs	r6, r3
 8000844:	40ab      	lsls	r3, r5
 8000846:	40ac      	lsls	r4, r5
 8000848:	40fe      	lsrs	r6, r7
 800084a:	1e5d      	subs	r5, r3, #1
 800084c:	41ab      	sbcs	r3, r5
 800084e:	4334      	orrs	r4, r6
 8000850:	40f9      	lsrs	r1, r7
 8000852:	431c      	orrs	r4, r3
 8000854:	464b      	mov	r3, r9
 8000856:	1a5b      	subs	r3, r3, r1
 8000858:	4699      	mov	r9, r3
 800085a:	e04c      	b.n	80008f6 <__aeabi_dadd+0x44a>
 800085c:	464a      	mov	r2, r9
 800085e:	1a1c      	subs	r4, r3, r0
 8000860:	1a88      	subs	r0, r1, r2
 8000862:	42a3      	cmp	r3, r4
 8000864:	4192      	sbcs	r2, r2
 8000866:	4252      	negs	r2, r2
 8000868:	4692      	mov	sl, r2
 800086a:	0002      	movs	r2, r0
 800086c:	4650      	mov	r0, sl
 800086e:	1a12      	subs	r2, r2, r0
 8000870:	4692      	mov	sl, r2
 8000872:	0212      	lsls	r2, r2, #8
 8000874:	d478      	bmi.n	8000968 <__aeabi_dadd+0x4bc>
 8000876:	4653      	mov	r3, sl
 8000878:	4323      	orrs	r3, r4
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x3d2>
 800087c:	e66a      	b.n	8000554 <__aeabi_dadd+0xa8>
 800087e:	2100      	movs	r1, #0
 8000880:	2500      	movs	r5, #0
 8000882:	e745      	b.n	8000710 <__aeabi_dadd+0x264>
 8000884:	074a      	lsls	r2, r1, #29
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	4313      	orrs	r3, r2
 800088a:	08c9      	lsrs	r1, r1, #3
 800088c:	e73d      	b.n	800070a <__aeabi_dadd+0x25e>
 800088e:	181c      	adds	r4, r3, r0
 8000890:	429c      	cmp	r4, r3
 8000892:	419b      	sbcs	r3, r3
 8000894:	4449      	add	r1, r9
 8000896:	468a      	mov	sl, r1
 8000898:	425b      	negs	r3, r3
 800089a:	449a      	add	sl, r3
 800089c:	4653      	mov	r3, sl
 800089e:	2601      	movs	r6, #1
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	d400      	bmi.n	80008a6 <__aeabi_dadd+0x3fa>
 80008a4:	e727      	b.n	80006f6 <__aeabi_dadd+0x24a>
 80008a6:	2602      	movs	r6, #2
 80008a8:	4652      	mov	r2, sl
 80008aa:	4baf      	ldr	r3, [pc, #700]	; (8000b68 <__aeabi_dadd+0x6bc>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	401a      	ands	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	4021      	ands	r1, r4
 80008b4:	0862      	lsrs	r2, r4, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	07dc      	lsls	r4, r3, #31
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	469a      	mov	sl, r3
 80008be:	4314      	orrs	r4, r2
 80008c0:	e670      	b.n	80005a4 <__aeabi_dadd+0xf8>
 80008c2:	003a      	movs	r2, r7
 80008c4:	464c      	mov	r4, r9
 80008c6:	3a20      	subs	r2, #32
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	46a4      	mov	ip, r4
 80008cc:	2f20      	cmp	r7, #32
 80008ce:	d007      	beq.n	80008e0 <__aeabi_dadd+0x434>
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	4648      	mov	r0, r9
 80008d4:	1bd2      	subs	r2, r2, r7
 80008d6:	4090      	lsls	r0, r2
 80008d8:	0002      	movs	r2, r0
 80008da:	4640      	mov	r0, r8
 80008dc:	4310      	orrs	r0, r2
 80008de:	4680      	mov	r8, r0
 80008e0:	4640      	mov	r0, r8
 80008e2:	1e42      	subs	r2, r0, #1
 80008e4:	4190      	sbcs	r0, r2
 80008e6:	4662      	mov	r2, ip
 80008e8:	0004      	movs	r4, r0
 80008ea:	4314      	orrs	r4, r2
 80008ec:	e624      	b.n	8000538 <__aeabi_dadd+0x8c>
 80008ee:	4319      	orrs	r1, r3
 80008f0:	000c      	movs	r4, r1
 80008f2:	1e63      	subs	r3, r4, #1
 80008f4:	419c      	sbcs	r4, r3
 80008f6:	4643      	mov	r3, r8
 80008f8:	1b1c      	subs	r4, r3, r4
 80008fa:	45a0      	cmp	r8, r4
 80008fc:	419b      	sbcs	r3, r3
 80008fe:	4649      	mov	r1, r9
 8000900:	425b      	negs	r3, r3
 8000902:	1acb      	subs	r3, r1, r3
 8000904:	469a      	mov	sl, r3
 8000906:	4665      	mov	r5, ip
 8000908:	0016      	movs	r6, r2
 800090a:	e61b      	b.n	8000544 <__aeabi_dadd+0x98>
 800090c:	000c      	movs	r4, r1
 800090e:	431c      	orrs	r4, r3
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x468>
 8000912:	e0c7      	b.n	8000aa4 <__aeabi_dadd+0x5f8>
 8000914:	1e7c      	subs	r4, r7, #1
 8000916:	2f01      	cmp	r7, #1
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x470>
 800091a:	e0f9      	b.n	8000b10 <__aeabi_dadd+0x664>
 800091c:	4e91      	ldr	r6, [pc, #580]	; (8000b64 <__aeabi_dadd+0x6b8>)
 800091e:	42b7      	cmp	r7, r6
 8000920:	d05c      	beq.n	80009dc <__aeabi_dadd+0x530>
 8000922:	0027      	movs	r7, r4
 8000924:	e740      	b.n	80007a8 <__aeabi_dadd+0x2fc>
 8000926:	2220      	movs	r2, #32
 8000928:	464c      	mov	r4, r9
 800092a:	4640      	mov	r0, r8
 800092c:	1bd2      	subs	r2, r2, r7
 800092e:	4094      	lsls	r4, r2
 8000930:	40f8      	lsrs	r0, r7
 8000932:	4304      	orrs	r4, r0
 8000934:	4640      	mov	r0, r8
 8000936:	4090      	lsls	r0, r2
 8000938:	1e42      	subs	r2, r0, #1
 800093a:	4190      	sbcs	r0, r2
 800093c:	464a      	mov	r2, r9
 800093e:	40fa      	lsrs	r2, r7
 8000940:	4304      	orrs	r4, r0
 8000942:	1889      	adds	r1, r1, r2
 8000944:	e6ee      	b.n	8000724 <__aeabi_dadd+0x278>
 8000946:	4c87      	ldr	r4, [pc, #540]	; (8000b64 <__aeabi_dadd+0x6b8>)
 8000948:	42a2      	cmp	r2, r4
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x4a2>
 800094c:	e6f9      	b.n	8000742 <__aeabi_dadd+0x296>
 800094e:	1818      	adds	r0, r3, r0
 8000950:	4298      	cmp	r0, r3
 8000952:	419b      	sbcs	r3, r3
 8000954:	4449      	add	r1, r9
 8000956:	425b      	negs	r3, r3
 8000958:	18cb      	adds	r3, r1, r3
 800095a:	07dc      	lsls	r4, r3, #31
 800095c:	0840      	lsrs	r0, r0, #1
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	469a      	mov	sl, r3
 8000962:	0016      	movs	r6, r2
 8000964:	4304      	orrs	r4, r0
 8000966:	e6c6      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000968:	4642      	mov	r2, r8
 800096a:	1ad4      	subs	r4, r2, r3
 800096c:	45a0      	cmp	r8, r4
 800096e:	4180      	sbcs	r0, r0
 8000970:	464b      	mov	r3, r9
 8000972:	4240      	negs	r0, r0
 8000974:	1a59      	subs	r1, r3, r1
 8000976:	1a0b      	subs	r3, r1, r0
 8000978:	469a      	mov	sl, r3
 800097a:	4665      	mov	r5, ip
 800097c:	e5ea      	b.n	8000554 <__aeabi_dadd+0xa8>
 800097e:	464b      	mov	r3, r9
 8000980:	464a      	mov	r2, r9
 8000982:	08c0      	lsrs	r0, r0, #3
 8000984:	075b      	lsls	r3, r3, #29
 8000986:	4665      	mov	r5, ip
 8000988:	4303      	orrs	r3, r0
 800098a:	08d1      	lsrs	r1, r2, #3
 800098c:	e6bd      	b.n	800070a <__aeabi_dadd+0x25e>
 800098e:	2a00      	cmp	r2, #0
 8000990:	d000      	beq.n	8000994 <__aeabi_dadd+0x4e8>
 8000992:	e08e      	b.n	8000ab2 <__aeabi_dadd+0x606>
 8000994:	464b      	mov	r3, r9
 8000996:	4303      	orrs	r3, r0
 8000998:	d117      	bne.n	80009ca <__aeabi_dadd+0x51e>
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	2500      	movs	r5, #0
 800099e:	0309      	lsls	r1, r1, #12
 80009a0:	e6da      	b.n	8000758 <__aeabi_dadd+0x2ac>
 80009a2:	074a      	lsls	r2, r1, #29
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	08c9      	lsrs	r1, r1, #3
 80009aa:	e6d1      	b.n	8000750 <__aeabi_dadd+0x2a4>
 80009ac:	1a1c      	subs	r4, r3, r0
 80009ae:	464a      	mov	r2, r9
 80009b0:	42a3      	cmp	r3, r4
 80009b2:	419b      	sbcs	r3, r3
 80009b4:	1a89      	subs	r1, r1, r2
 80009b6:	425b      	negs	r3, r3
 80009b8:	1acb      	subs	r3, r1, r3
 80009ba:	469a      	mov	sl, r3
 80009bc:	2601      	movs	r6, #1
 80009be:	e5c1      	b.n	8000544 <__aeabi_dadd+0x98>
 80009c0:	074a      	lsls	r2, r1, #29
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	08c9      	lsrs	r1, r1, #3
 80009c8:	e69f      	b.n	800070a <__aeabi_dadd+0x25e>
 80009ca:	4643      	mov	r3, r8
 80009cc:	08d8      	lsrs	r0, r3, #3
 80009ce:	464b      	mov	r3, r9
 80009d0:	464a      	mov	r2, r9
 80009d2:	075b      	lsls	r3, r3, #29
 80009d4:	4665      	mov	r5, ip
 80009d6:	4303      	orrs	r3, r0
 80009d8:	08d1      	lsrs	r1, r2, #3
 80009da:	e6b9      	b.n	8000750 <__aeabi_dadd+0x2a4>
 80009dc:	4643      	mov	r3, r8
 80009de:	08d8      	lsrs	r0, r3, #3
 80009e0:	464b      	mov	r3, r9
 80009e2:	464a      	mov	r2, r9
 80009e4:	075b      	lsls	r3, r3, #29
 80009e6:	4303      	orrs	r3, r0
 80009e8:	08d1      	lsrs	r1, r2, #3
 80009ea:	e6b1      	b.n	8000750 <__aeabi_dadd+0x2a4>
 80009ec:	4319      	orrs	r1, r3
 80009ee:	000c      	movs	r4, r1
 80009f0:	1e63      	subs	r3, r4, #1
 80009f2:	419c      	sbcs	r4, r3
 80009f4:	e6eb      	b.n	80007ce <__aeabi_dadd+0x322>
 80009f6:	003c      	movs	r4, r7
 80009f8:	000d      	movs	r5, r1
 80009fa:	3c20      	subs	r4, #32
 80009fc:	40e5      	lsrs	r5, r4
 80009fe:	2f20      	cmp	r7, #32
 8000a00:	d003      	beq.n	8000a0a <__aeabi_dadd+0x55e>
 8000a02:	2440      	movs	r4, #64	; 0x40
 8000a04:	1be4      	subs	r4, r4, r7
 8000a06:	40a1      	lsls	r1, r4
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	001c      	movs	r4, r3
 8000a0c:	1e63      	subs	r3, r4, #1
 8000a0e:	419c      	sbcs	r4, r3
 8000a10:	432c      	orrs	r4, r5
 8000a12:	e770      	b.n	80008f6 <__aeabi_dadd+0x44a>
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d0e1      	beq.n	80009dc <__aeabi_dadd+0x530>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	4302      	orrs	r2, r0
 8000a1c:	d0c1      	beq.n	80009a2 <__aeabi_dadd+0x4f6>
 8000a1e:	074a      	lsls	r2, r1, #29
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	0312      	lsls	r2, r2, #12
 8000a2a:	4211      	tst	r1, r2
 8000a2c:	d008      	beq.n	8000a40 <__aeabi_dadd+0x594>
 8000a2e:	4648      	mov	r0, r9
 8000a30:	08c4      	lsrs	r4, r0, #3
 8000a32:	4214      	tst	r4, r2
 8000a34:	d104      	bne.n	8000a40 <__aeabi_dadd+0x594>
 8000a36:	4643      	mov	r3, r8
 8000a38:	0021      	movs	r1, r4
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	0742      	lsls	r2, r0, #29
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	0f5a      	lsrs	r2, r3, #29
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	0752      	lsls	r2, r2, #29
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	e681      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4303      	orrs	r3, r0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x5a8>
 8000a52:	e714      	b.n	800087e <__aeabi_dadd+0x3d2>
 8000a54:	464b      	mov	r3, r9
 8000a56:	464a      	mov	r2, r9
 8000a58:	08c0      	lsrs	r0, r0, #3
 8000a5a:	075b      	lsls	r3, r3, #29
 8000a5c:	4665      	mov	r5, ip
 8000a5e:	4303      	orrs	r3, r0
 8000a60:	08d1      	lsrs	r1, r2, #3
 8000a62:	e655      	b.n	8000710 <__aeabi_dadd+0x264>
 8000a64:	1ac4      	subs	r4, r0, r3
 8000a66:	45a0      	cmp	r8, r4
 8000a68:	4180      	sbcs	r0, r0
 8000a6a:	464b      	mov	r3, r9
 8000a6c:	4240      	negs	r0, r0
 8000a6e:	1a59      	subs	r1, r3, r1
 8000a70:	1a0b      	subs	r3, r1, r0
 8000a72:	469a      	mov	sl, r3
 8000a74:	4665      	mov	r5, ip
 8000a76:	2601      	movs	r6, #1
 8000a78:	e564      	b.n	8000544 <__aeabi_dadd+0x98>
 8000a7a:	1a1c      	subs	r4, r3, r0
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	4180      	sbcs	r0, r0
 8000a82:	1a8a      	subs	r2, r1, r2
 8000a84:	4240      	negs	r0, r0
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	4692      	mov	sl, r2
 8000a8a:	0212      	lsls	r2, r2, #8
 8000a8c:	d549      	bpl.n	8000b22 <__aeabi_dadd+0x676>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	1ad4      	subs	r4, r2, r3
 8000a92:	45a0      	cmp	r8, r4
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	464b      	mov	r3, r9
 8000a98:	4240      	negs	r0, r0
 8000a9a:	1a59      	subs	r1, r3, r1
 8000a9c:	1a0b      	subs	r3, r1, r0
 8000a9e:	469a      	mov	sl, r3
 8000aa0:	4665      	mov	r5, ip
 8000aa2:	e57f      	b.n	80005a4 <__aeabi_dadd+0xf8>
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	08c0      	lsrs	r0, r0, #3
 8000aaa:	075b      	lsls	r3, r3, #29
 8000aac:	4303      	orrs	r3, r0
 8000aae:	08d1      	lsrs	r1, r2, #3
 8000ab0:	e62b      	b.n	800070a <__aeabi_dadd+0x25e>
 8000ab2:	464a      	mov	r2, r9
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d138      	bne.n	8000b2c <__aeabi_dadd+0x680>
 8000aba:	074a      	lsls	r2, r1, #29
 8000abc:	4313      	orrs	r3, r2
 8000abe:	08c9      	lsrs	r1, r1, #3
 8000ac0:	e646      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000ac2:	464b      	mov	r3, r9
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	08c0      	lsrs	r0, r0, #3
 8000ac8:	075b      	lsls	r3, r3, #29
 8000aca:	4303      	orrs	r3, r0
 8000acc:	08d1      	lsrs	r1, r2, #3
 8000ace:	e61f      	b.n	8000710 <__aeabi_dadd+0x264>
 8000ad0:	181c      	adds	r4, r3, r0
 8000ad2:	429c      	cmp	r4, r3
 8000ad4:	419b      	sbcs	r3, r3
 8000ad6:	4449      	add	r1, r9
 8000ad8:	468a      	mov	sl, r1
 8000ada:	425b      	negs	r3, r3
 8000adc:	449a      	add	sl, r3
 8000ade:	4653      	mov	r3, sl
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_dadd+0x63a>
 8000ae4:	e607      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000ae6:	4652      	mov	r2, sl
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <__aeabi_dadd+0x6bc>)
 8000aea:	2601      	movs	r6, #1
 8000aec:	401a      	ands	r2, r3
 8000aee:	4692      	mov	sl, r2
 8000af0:	e601      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000af2:	003c      	movs	r4, r7
 8000af4:	000e      	movs	r6, r1
 8000af6:	3c20      	subs	r4, #32
 8000af8:	40e6      	lsrs	r6, r4
 8000afa:	2f20      	cmp	r7, #32
 8000afc:	d003      	beq.n	8000b06 <__aeabi_dadd+0x65a>
 8000afe:	2440      	movs	r4, #64	; 0x40
 8000b00:	1be4      	subs	r4, r4, r7
 8000b02:	40a1      	lsls	r1, r4
 8000b04:	430b      	orrs	r3, r1
 8000b06:	001c      	movs	r4, r3
 8000b08:	1e63      	subs	r3, r4, #1
 8000b0a:	419c      	sbcs	r4, r3
 8000b0c:	4334      	orrs	r4, r6
 8000b0e:	e65e      	b.n	80007ce <__aeabi_dadd+0x322>
 8000b10:	4443      	add	r3, r8
 8000b12:	4283      	cmp	r3, r0
 8000b14:	4180      	sbcs	r0, r0
 8000b16:	4449      	add	r1, r9
 8000b18:	468a      	mov	sl, r1
 8000b1a:	4240      	negs	r0, r0
 8000b1c:	001c      	movs	r4, r3
 8000b1e:	4482      	add	sl, r0
 8000b20:	e6bc      	b.n	800089c <__aeabi_dadd+0x3f0>
 8000b22:	4653      	mov	r3, sl
 8000b24:	4323      	orrs	r3, r4
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x67e>
 8000b28:	e6a9      	b.n	800087e <__aeabi_dadd+0x3d2>
 8000b2a:	e5e4      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000b2c:	074a      	lsls	r2, r1, #29
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	08c9      	lsrs	r1, r1, #3
 8000b34:	0312      	lsls	r2, r2, #12
 8000b36:	4211      	tst	r1, r2
 8000b38:	d009      	beq.n	8000b4e <__aeabi_dadd+0x6a2>
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	08c4      	lsrs	r4, r0, #3
 8000b3e:	4214      	tst	r4, r2
 8000b40:	d105      	bne.n	8000b4e <__aeabi_dadd+0x6a2>
 8000b42:	4643      	mov	r3, r8
 8000b44:	4665      	mov	r5, ip
 8000b46:	0021      	movs	r1, r4
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	0742      	lsls	r2, r0, #29
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	0f5a      	lsrs	r2, r3, #29
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	0752      	lsls	r2, r2, #29
 8000b56:	4313      	orrs	r3, r2
 8000b58:	e5fa      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	4a01      	ldr	r2, [pc, #4]	; (8000b64 <__aeabi_dadd+0x6b8>)
 8000b5e:	001c      	movs	r4, r3
 8000b60:	e540      	b.n	80005e4 <__aeabi_dadd+0x138>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff

08000b6c <__aeabi_ddiv>:
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	4657      	mov	r7, sl
 8000b70:	464e      	mov	r6, r9
 8000b72:	4645      	mov	r5, r8
 8000b74:	46de      	mov	lr, fp
 8000b76:	b5e0      	push	{r5, r6, r7, lr}
 8000b78:	030c      	lsls	r4, r1, #12
 8000b7a:	001f      	movs	r7, r3
 8000b7c:	004b      	lsls	r3, r1, #1
 8000b7e:	4681      	mov	r9, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0005      	movs	r5, r0
 8000b84:	b085      	sub	sp, #20
 8000b86:	0b24      	lsrs	r4, r4, #12
 8000b88:	0d5b      	lsrs	r3, r3, #21
 8000b8a:	0fce      	lsrs	r6, r1, #31
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x26>
 8000b90:	e152      	b.n	8000e38 <__aeabi_ddiv+0x2cc>
 8000b92:	4ad2      	ldr	r2, [pc, #840]	; (8000edc <__aeabi_ddiv+0x370>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d100      	bne.n	8000b9a <__aeabi_ddiv+0x2e>
 8000b98:	e16e      	b.n	8000e78 <__aeabi_ddiv+0x30c>
 8000b9a:	0f42      	lsrs	r2, r0, #29
 8000b9c:	00e4      	lsls	r4, r4, #3
 8000b9e:	4314      	orrs	r4, r2
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0412      	lsls	r2, r2, #16
 8000ba4:	4322      	orrs	r2, r4
 8000ba6:	4690      	mov	r8, r2
 8000ba8:	4acd      	ldr	r2, [pc, #820]	; (8000ee0 <__aeabi_ddiv+0x374>)
 8000baa:	00c5      	lsls	r5, r0, #3
 8000bac:	4693      	mov	fp, r2
 8000bae:	449b      	add	fp, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	033c      	lsls	r4, r7, #12
 8000bb8:	007b      	lsls	r3, r7, #1
 8000bba:	4650      	mov	r0, sl
 8000bbc:	0b24      	lsrs	r4, r4, #12
 8000bbe:	0d5b      	lsrs	r3, r3, #21
 8000bc0:	0fff      	lsrs	r7, r7, #31
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_ddiv+0x5c>
 8000bc6:	e11a      	b.n	8000dfe <__aeabi_ddiv+0x292>
 8000bc8:	4ac4      	ldr	r2, [pc, #784]	; (8000edc <__aeabi_ddiv+0x370>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_ddiv+0x64>
 8000bce:	e15e      	b.n	8000e8e <__aeabi_ddiv+0x322>
 8000bd0:	0f42      	lsrs	r2, r0, #29
 8000bd2:	00e4      	lsls	r4, r4, #3
 8000bd4:	4322      	orrs	r2, r4
 8000bd6:	2480      	movs	r4, #128	; 0x80
 8000bd8:	0424      	lsls	r4, r4, #16
 8000bda:	4314      	orrs	r4, r2
 8000bdc:	4ac0      	ldr	r2, [pc, #768]	; (8000ee0 <__aeabi_ddiv+0x374>)
 8000bde:	00c1      	lsls	r1, r0, #3
 8000be0:	4694      	mov	ip, r2
 8000be2:	465a      	mov	r2, fp
 8000be4:	4463      	add	r3, ip
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	469b      	mov	fp, r3
 8000bea:	2000      	movs	r0, #0
 8000bec:	0033      	movs	r3, r6
 8000bee:	407b      	eors	r3, r7
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	464b      	mov	r3, r9
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d827      	bhi.n	8000c48 <__aeabi_ddiv+0xdc>
 8000bf8:	4aba      	ldr	r2, [pc, #744]	; (8000ee4 <__aeabi_ddiv+0x378>)
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	58d3      	ldr	r3, [r2, r3]
 8000bfe:	469f      	mov	pc, r3
 8000c00:	46b2      	mov	sl, r6
 8000c02:	9b00      	ldr	r3, [sp, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d016      	beq.n	8000c36 <__aeabi_ddiv+0xca>
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_ddiv+0xa2>
 8000c0c:	e287      	b.n	800111e <__aeabi_ddiv+0x5b2>
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d000      	beq.n	8000c14 <__aeabi_ddiv+0xa8>
 8000c12:	e0d5      	b.n	8000dc0 <__aeabi_ddiv+0x254>
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2500      	movs	r5, #0
 8000c1a:	051b      	lsls	r3, r3, #20
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	4652      	mov	r2, sl
 8000c20:	07d2      	lsls	r2, r2, #31
 8000c22:	4313      	orrs	r3, r2
 8000c24:	0028      	movs	r0, r5
 8000c26:	0019      	movs	r1, r3
 8000c28:	b005      	add	sp, #20
 8000c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c2c:	46bb      	mov	fp, r7
 8000c2e:	46b2      	mov	sl, r6
 8000c30:	46a9      	mov	r9, r5
 8000c32:	46a0      	mov	r8, r4
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c36:	2200      	movs	r2, #0
 8000c38:	2500      	movs	r5, #0
 8000c3a:	4ba8      	ldr	r3, [pc, #672]	; (8000edc <__aeabi_ddiv+0x370>)
 8000c3c:	e7ed      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000c3e:	46ba      	mov	sl, r7
 8000c40:	46a0      	mov	r8, r4
 8000c42:	000d      	movs	r5, r1
 8000c44:	9000      	str	r0, [sp, #0]
 8000c46:	e7dc      	b.n	8000c02 <__aeabi_ddiv+0x96>
 8000c48:	4544      	cmp	r4, r8
 8000c4a:	d200      	bcs.n	8000c4e <__aeabi_ddiv+0xe2>
 8000c4c:	e1c4      	b.n	8000fd8 <__aeabi_ddiv+0x46c>
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_ddiv+0xe6>
 8000c50:	e1bf      	b.n	8000fd2 <__aeabi_ddiv+0x466>
 8000c52:	2301      	movs	r3, #1
 8000c54:	425b      	negs	r3, r3
 8000c56:	469c      	mov	ip, r3
 8000c58:	002e      	movs	r6, r5
 8000c5a:	4640      	mov	r0, r8
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	44e3      	add	fp, ip
 8000c60:	0223      	lsls	r3, r4, #8
 8000c62:	0e0c      	lsrs	r4, r1, #24
 8000c64:	431c      	orrs	r4, r3
 8000c66:	0c1b      	lsrs	r3, r3, #16
 8000c68:	4699      	mov	r9, r3
 8000c6a:	0423      	lsls	r3, r4, #16
 8000c6c:	020a      	lsls	r2, r1, #8
 8000c6e:	0c1f      	lsrs	r7, r3, #16
 8000c70:	4649      	mov	r1, r9
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	9701      	str	r7, [sp, #4]
 8000c76:	f7ff facd 	bl	8000214 <__aeabi_uidivmod>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	437a      	muls	r2, r7
 8000c7e:	040b      	lsls	r3, r1, #16
 8000c80:	0c31      	lsrs	r1, r6, #16
 8000c82:	4680      	mov	r8, r0
 8000c84:	4319      	orrs	r1, r3
 8000c86:	428a      	cmp	r2, r1
 8000c88:	d907      	bls.n	8000c9a <__aeabi_ddiv+0x12e>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	469c      	mov	ip, r3
 8000c90:	1909      	adds	r1, r1, r4
 8000c92:	44e0      	add	r8, ip
 8000c94:	428c      	cmp	r4, r1
 8000c96:	d800      	bhi.n	8000c9a <__aeabi_ddiv+0x12e>
 8000c98:	e201      	b.n	800109e <__aeabi_ddiv+0x532>
 8000c9a:	1a88      	subs	r0, r1, r2
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	f7ff fab9 	bl	8000214 <__aeabi_uidivmod>
 8000ca2:	9a01      	ldr	r2, [sp, #4]
 8000ca4:	0436      	lsls	r6, r6, #16
 8000ca6:	4342      	muls	r2, r0
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	0003      	movs	r3, r0
 8000cae:	430e      	orrs	r6, r1
 8000cb0:	42b2      	cmp	r2, r6
 8000cb2:	d904      	bls.n	8000cbe <__aeabi_ddiv+0x152>
 8000cb4:	1936      	adds	r6, r6, r4
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	42b4      	cmp	r4, r6
 8000cba:	d800      	bhi.n	8000cbe <__aeabi_ddiv+0x152>
 8000cbc:	e1e9      	b.n	8001092 <__aeabi_ddiv+0x526>
 8000cbe:	1ab0      	subs	r0, r6, r2
 8000cc0:	4642      	mov	r2, r8
 8000cc2:	9e00      	ldr	r6, [sp, #0]
 8000cc4:	0412      	lsls	r2, r2, #16
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	0c33      	lsrs	r3, r6, #16
 8000cca:	001f      	movs	r7, r3
 8000ccc:	0c11      	lsrs	r1, r2, #16
 8000cce:	4690      	mov	r8, r2
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	0413      	lsls	r3, r2, #16
 8000cd4:	0432      	lsls	r2, r6, #16
 8000cd6:	0c16      	lsrs	r6, r2, #16
 8000cd8:	0032      	movs	r2, r6
 8000cda:	0c1b      	lsrs	r3, r3, #16
 8000cdc:	435a      	muls	r2, r3
 8000cde:	9603      	str	r6, [sp, #12]
 8000ce0:	437b      	muls	r3, r7
 8000ce2:	434e      	muls	r6, r1
 8000ce4:	4379      	muls	r1, r7
 8000ce6:	0c17      	lsrs	r7, r2, #16
 8000ce8:	46bc      	mov	ip, r7
 8000cea:	199b      	adds	r3, r3, r6
 8000cec:	4463      	add	r3, ip
 8000cee:	429e      	cmp	r6, r3
 8000cf0:	d903      	bls.n	8000cfa <__aeabi_ddiv+0x18e>
 8000cf2:	2680      	movs	r6, #128	; 0x80
 8000cf4:	0276      	lsls	r6, r6, #9
 8000cf6:	46b4      	mov	ip, r6
 8000cf8:	4461      	add	r1, ip
 8000cfa:	0c1e      	lsrs	r6, r3, #16
 8000cfc:	1871      	adds	r1, r6, r1
 8000cfe:	0416      	lsls	r6, r2, #16
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	0c36      	lsrs	r6, r6, #16
 8000d04:	199e      	adds	r6, r3, r6
 8000d06:	4288      	cmp	r0, r1
 8000d08:	d302      	bcc.n	8000d10 <__aeabi_ddiv+0x1a4>
 8000d0a:	d112      	bne.n	8000d32 <__aeabi_ddiv+0x1c6>
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	d210      	bcs.n	8000d32 <__aeabi_ddiv+0x1c6>
 8000d10:	4643      	mov	r3, r8
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	9b00      	ldr	r3, [sp, #0]
 8000d16:	469c      	mov	ip, r3
 8000d18:	4465      	add	r5, ip
 8000d1a:	001f      	movs	r7, r3
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	419b      	sbcs	r3, r3
 8000d20:	425b      	negs	r3, r3
 8000d22:	191b      	adds	r3, r3, r4
 8000d24:	18c0      	adds	r0, r0, r3
 8000d26:	4284      	cmp	r4, r0
 8000d28:	d200      	bcs.n	8000d2c <__aeabi_ddiv+0x1c0>
 8000d2a:	e19e      	b.n	800106a <__aeabi_ddiv+0x4fe>
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x1c4>
 8000d2e:	e199      	b.n	8001064 <__aeabi_ddiv+0x4f8>
 8000d30:	4690      	mov	r8, r2
 8000d32:	1bae      	subs	r6, r5, r6
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	41ad      	sbcs	r5, r5
 8000d38:	1a40      	subs	r0, r0, r1
 8000d3a:	426d      	negs	r5, r5
 8000d3c:	1b40      	subs	r0, r0, r5
 8000d3e:	4284      	cmp	r4, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x1d8>
 8000d42:	e1d2      	b.n	80010ea <__aeabi_ddiv+0x57e>
 8000d44:	4649      	mov	r1, r9
 8000d46:	f7ff fa65 	bl	8000214 <__aeabi_uidivmod>
 8000d4a:	9a01      	ldr	r2, [sp, #4]
 8000d4c:	040b      	lsls	r3, r1, #16
 8000d4e:	4342      	muls	r2, r0
 8000d50:	0c31      	lsrs	r1, r6, #16
 8000d52:	0005      	movs	r5, r0
 8000d54:	4319      	orrs	r1, r3
 8000d56:	428a      	cmp	r2, r1
 8000d58:	d900      	bls.n	8000d5c <__aeabi_ddiv+0x1f0>
 8000d5a:	e16c      	b.n	8001036 <__aeabi_ddiv+0x4ca>
 8000d5c:	1a88      	subs	r0, r1, r2
 8000d5e:	4649      	mov	r1, r9
 8000d60:	f7ff fa58 	bl	8000214 <__aeabi_uidivmod>
 8000d64:	9a01      	ldr	r2, [sp, #4]
 8000d66:	0436      	lsls	r6, r6, #16
 8000d68:	4342      	muls	r2, r0
 8000d6a:	0409      	lsls	r1, r1, #16
 8000d6c:	0c36      	lsrs	r6, r6, #16
 8000d6e:	0003      	movs	r3, r0
 8000d70:	430e      	orrs	r6, r1
 8000d72:	42b2      	cmp	r2, r6
 8000d74:	d900      	bls.n	8000d78 <__aeabi_ddiv+0x20c>
 8000d76:	e153      	b.n	8001020 <__aeabi_ddiv+0x4b4>
 8000d78:	9803      	ldr	r0, [sp, #12]
 8000d7a:	1ab6      	subs	r6, r6, r2
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	042d      	lsls	r5, r5, #16
 8000d80:	431d      	orrs	r5, r3
 8000d82:	9f02      	ldr	r7, [sp, #8]
 8000d84:	042b      	lsls	r3, r5, #16
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	435a      	muls	r2, r3
 8000d8a:	437b      	muls	r3, r7
 8000d8c:	469c      	mov	ip, r3
 8000d8e:	0c29      	lsrs	r1, r5, #16
 8000d90:	4348      	muls	r0, r1
 8000d92:	0c13      	lsrs	r3, r2, #16
 8000d94:	4484      	add	ip, r0
 8000d96:	4463      	add	r3, ip
 8000d98:	4379      	muls	r1, r7
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d903      	bls.n	8000da6 <__aeabi_ddiv+0x23a>
 8000d9e:	2080      	movs	r0, #128	; 0x80
 8000da0:	0240      	lsls	r0, r0, #9
 8000da2:	4684      	mov	ip, r0
 8000da4:	4461      	add	r1, ip
 8000da6:	0c18      	lsrs	r0, r3, #16
 8000da8:	0412      	lsls	r2, r2, #16
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	0c12      	lsrs	r2, r2, #16
 8000dae:	1840      	adds	r0, r0, r1
 8000db0:	189b      	adds	r3, r3, r2
 8000db2:	4286      	cmp	r6, r0
 8000db4:	d200      	bcs.n	8000db8 <__aeabi_ddiv+0x24c>
 8000db6:	e100      	b.n	8000fba <__aeabi_ddiv+0x44e>
 8000db8:	d100      	bne.n	8000dbc <__aeabi_ddiv+0x250>
 8000dba:	e0fb      	b.n	8000fb4 <__aeabi_ddiv+0x448>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	431d      	orrs	r5, r3
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <__aeabi_ddiv+0x37c>)
 8000dc2:	445b      	add	r3, fp
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dc00      	bgt.n	8000dca <__aeabi_ddiv+0x25e>
 8000dc8:	e0aa      	b.n	8000f20 <__aeabi_ddiv+0x3b4>
 8000dca:	076a      	lsls	r2, r5, #29
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_ddiv+0x264>
 8000dce:	e13d      	b.n	800104c <__aeabi_ddiv+0x4e0>
 8000dd0:	08e9      	lsrs	r1, r5, #3
 8000dd2:	4642      	mov	r2, r8
 8000dd4:	01d2      	lsls	r2, r2, #7
 8000dd6:	d506      	bpl.n	8000de6 <__aeabi_ddiv+0x27a>
 8000dd8:	4642      	mov	r2, r8
 8000dda:	4b44      	ldr	r3, [pc, #272]	; (8000eec <__aeabi_ddiv+0x380>)
 8000ddc:	401a      	ands	r2, r3
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	4690      	mov	r8, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	445b      	add	r3, fp
 8000de6:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <__aeabi_ddiv+0x384>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	dd00      	ble.n	8000dee <__aeabi_ddiv+0x282>
 8000dec:	e723      	b.n	8000c36 <__aeabi_ddiv+0xca>
 8000dee:	4642      	mov	r2, r8
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	0755      	lsls	r5, r2, #29
 8000df4:	0252      	lsls	r2, r2, #9
 8000df6:	430d      	orrs	r5, r1
 8000df8:	0b12      	lsrs	r2, r2, #12
 8000dfa:	0d5b      	lsrs	r3, r3, #21
 8000dfc:	e70d      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000dfe:	4651      	mov	r1, sl
 8000e00:	4321      	orrs	r1, r4
 8000e02:	d100      	bne.n	8000e06 <__aeabi_ddiv+0x29a>
 8000e04:	e07c      	b.n	8000f00 <__aeabi_ddiv+0x394>
 8000e06:	2c00      	cmp	r4, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x2a0>
 8000e0a:	e0fb      	b.n	8001004 <__aeabi_ddiv+0x498>
 8000e0c:	0020      	movs	r0, r4
 8000e0e:	f001 f999 	bl	8002144 <__clzsi2>
 8000e12:	0002      	movs	r2, r0
 8000e14:	3a0b      	subs	r2, #11
 8000e16:	231d      	movs	r3, #29
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	4652      	mov	r2, sl
 8000e1c:	0001      	movs	r1, r0
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	4653      	mov	r3, sl
 8000e22:	3908      	subs	r1, #8
 8000e24:	408b      	lsls	r3, r1
 8000e26:	408c      	lsls	r4, r1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	4314      	orrs	r4, r2
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <__aeabi_ddiv+0x388>)
 8000e2e:	4458      	add	r0, fp
 8000e30:	469b      	mov	fp, r3
 8000e32:	4483      	add	fp, r0
 8000e34:	2000      	movs	r0, #0
 8000e36:	e6d9      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4323      	orrs	r3, r4
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	d044      	beq.n	8000eca <__aeabi_ddiv+0x35e>
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_ddiv+0x2da>
 8000e44:	e0cf      	b.n	8000fe6 <__aeabi_ddiv+0x47a>
 8000e46:	0020      	movs	r0, r4
 8000e48:	f001 f97c 	bl	8002144 <__clzsi2>
 8000e4c:	0001      	movs	r1, r0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	390b      	subs	r1, #11
 8000e52:	231d      	movs	r3, #29
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	4649      	mov	r1, r9
 8000e58:	0010      	movs	r0, r2
 8000e5a:	40d9      	lsrs	r1, r3
 8000e5c:	3808      	subs	r0, #8
 8000e5e:	4084      	lsls	r4, r0
 8000e60:	000b      	movs	r3, r1
 8000e62:	464d      	mov	r5, r9
 8000e64:	4323      	orrs	r3, r4
 8000e66:	4698      	mov	r8, r3
 8000e68:	4085      	lsls	r5, r0
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <__aeabi_ddiv+0x38c>)
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	469b      	mov	fp, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	4699      	mov	r9, r3
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	e69e      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	4690      	mov	r8, r2
 8000e7e:	d11d      	bne.n	8000ebc <__aeabi_ddiv+0x350>
 8000e80:	2208      	movs	r2, #8
 8000e82:	469b      	mov	fp, r3
 8000e84:	2302      	movs	r3, #2
 8000e86:	2500      	movs	r5, #0
 8000e88:	4691      	mov	r9, r2
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	e693      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000e8e:	4651      	mov	r1, sl
 8000e90:	4321      	orrs	r1, r4
 8000e92:	d109      	bne.n	8000ea8 <__aeabi_ddiv+0x33c>
 8000e94:	2302      	movs	r3, #2
 8000e96:	464a      	mov	r2, r9
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <__aeabi_ddiv+0x390>)
 8000e9c:	4691      	mov	r9, r2
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	44e3      	add	fp, ip
 8000ea6:	e6a1      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	464a      	mov	r2, r9
 8000eac:	431a      	orrs	r2, r3
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <__aeabi_ddiv+0x390>)
 8000eb0:	4691      	mov	r9, r2
 8000eb2:	469c      	mov	ip, r3
 8000eb4:	4651      	mov	r1, sl
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	44e3      	add	fp, ip
 8000eba:	e697      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	469b      	mov	fp, r3
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	46a0      	mov	r8, r4
 8000ec4:	4691      	mov	r9, r2
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	e675      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	4699      	mov	r9, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	e66d      	b.n	8000bb6 <__aeabi_ddiv+0x4a>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	000007ff 	.word	0x000007ff
 8000ee0:	fffffc01 	.word	0xfffffc01
 8000ee4:	080069c8 	.word	0x080069c8
 8000ee8:	000003ff 	.word	0x000003ff
 8000eec:	feffffff 	.word	0xfeffffff
 8000ef0:	000007fe 	.word	0x000007fe
 8000ef4:	000003f3 	.word	0x000003f3
 8000ef8:	fffffc0d 	.word	0xfffffc0d
 8000efc:	fffff801 	.word	0xfffff801
 8000f00:	464a      	mov	r2, r9
 8000f02:	2301      	movs	r3, #1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4691      	mov	r9, r2
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	e66e      	b.n	8000bec <__aeabi_ddiv+0x80>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	469a      	mov	sl, r3
 8000f14:	2500      	movs	r5, #0
 8000f16:	4b88      	ldr	r3, [pc, #544]	; (8001138 <__aeabi_ddiv+0x5cc>)
 8000f18:	0312      	lsls	r2, r2, #12
 8000f1a:	e67e      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000f1c:	2501      	movs	r5, #1
 8000f1e:	426d      	negs	r5, r5
 8000f20:	2201      	movs	r2, #1
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	2a38      	cmp	r2, #56	; 0x38
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_ddiv+0x3be>
 8000f28:	e674      	b.n	8000c14 <__aeabi_ddiv+0xa8>
 8000f2a:	2a1f      	cmp	r2, #31
 8000f2c:	dc00      	bgt.n	8000f30 <__aeabi_ddiv+0x3c4>
 8000f2e:	e0bd      	b.n	80010ac <__aeabi_ddiv+0x540>
 8000f30:	211f      	movs	r1, #31
 8000f32:	4249      	negs	r1, r1
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	4641      	mov	r1, r8
 8000f38:	40d9      	lsrs	r1, r3
 8000f3a:	000b      	movs	r3, r1
 8000f3c:	2a20      	cmp	r2, #32
 8000f3e:	d004      	beq.n	8000f4a <__aeabi_ddiv+0x3de>
 8000f40:	4641      	mov	r1, r8
 8000f42:	4a7e      	ldr	r2, [pc, #504]	; (800113c <__aeabi_ddiv+0x5d0>)
 8000f44:	445a      	add	r2, fp
 8000f46:	4091      	lsls	r1, r2
 8000f48:	430d      	orrs	r5, r1
 8000f4a:	0029      	movs	r1, r5
 8000f4c:	1e4a      	subs	r2, r1, #1
 8000f4e:	4191      	sbcs	r1, r2
 8000f50:	4319      	orrs	r1, r3
 8000f52:	2307      	movs	r3, #7
 8000f54:	001d      	movs	r5, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	400d      	ands	r5, r1
 8000f5a:	420b      	tst	r3, r1
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x3f4>
 8000f5e:	e0d0      	b.n	8001102 <__aeabi_ddiv+0x596>
 8000f60:	220f      	movs	r2, #15
 8000f62:	2300      	movs	r3, #0
 8000f64:	400a      	ands	r2, r1
 8000f66:	2a04      	cmp	r2, #4
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x400>
 8000f6a:	e0c7      	b.n	80010fc <__aeabi_ddiv+0x590>
 8000f6c:	1d0a      	adds	r2, r1, #4
 8000f6e:	428a      	cmp	r2, r1
 8000f70:	4189      	sbcs	r1, r1
 8000f72:	4249      	negs	r1, r1
 8000f74:	185b      	adds	r3, r3, r1
 8000f76:	0011      	movs	r1, r2
 8000f78:	021a      	lsls	r2, r3, #8
 8000f7a:	d400      	bmi.n	8000f7e <__aeabi_ddiv+0x412>
 8000f7c:	e0be      	b.n	80010fc <__aeabi_ddiv+0x590>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2200      	movs	r2, #0
 8000f82:	2500      	movs	r5, #0
 8000f84:	e649      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	4643      	mov	r3, r8
 8000f8a:	0312      	lsls	r2, r2, #12
 8000f8c:	4213      	tst	r3, r2
 8000f8e:	d008      	beq.n	8000fa2 <__aeabi_ddiv+0x436>
 8000f90:	4214      	tst	r4, r2
 8000f92:	d106      	bne.n	8000fa2 <__aeabi_ddiv+0x436>
 8000f94:	4322      	orrs	r2, r4
 8000f96:	0312      	lsls	r2, r2, #12
 8000f98:	46ba      	mov	sl, r7
 8000f9a:	000d      	movs	r5, r1
 8000f9c:	4b66      	ldr	r3, [pc, #408]	; (8001138 <__aeabi_ddiv+0x5cc>)
 8000f9e:	0b12      	lsrs	r2, r2, #12
 8000fa0:	e63b      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	0312      	lsls	r2, r2, #12
 8000fac:	46b2      	mov	sl, r6
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <__aeabi_ddiv+0x5cc>)
 8000fb0:	0b12      	lsrs	r2, r2, #12
 8000fb2:	e632      	b.n	8000c1a <__aeabi_ddiv+0xae>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_ddiv+0x44e>
 8000fb8:	e702      	b.n	8000dc0 <__aeabi_ddiv+0x254>
 8000fba:	19a6      	adds	r6, r4, r6
 8000fbc:	1e6a      	subs	r2, r5, #1
 8000fbe:	42a6      	cmp	r6, r4
 8000fc0:	d200      	bcs.n	8000fc4 <__aeabi_ddiv+0x458>
 8000fc2:	e089      	b.n	80010d8 <__aeabi_ddiv+0x56c>
 8000fc4:	4286      	cmp	r6, r0
 8000fc6:	d200      	bcs.n	8000fca <__aeabi_ddiv+0x45e>
 8000fc8:	e09f      	b.n	800110a <__aeabi_ddiv+0x59e>
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x462>
 8000fcc:	e0af      	b.n	800112e <__aeabi_ddiv+0x5c2>
 8000fce:	0015      	movs	r5, r2
 8000fd0:	e6f4      	b.n	8000dbc <__aeabi_ddiv+0x250>
 8000fd2:	42a9      	cmp	r1, r5
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x46c>
 8000fd6:	e63c      	b.n	8000c52 <__aeabi_ddiv+0xe6>
 8000fd8:	4643      	mov	r3, r8
 8000fda:	07de      	lsls	r6, r3, #31
 8000fdc:	0858      	lsrs	r0, r3, #1
 8000fde:	086b      	lsrs	r3, r5, #1
 8000fe0:	431e      	orrs	r6, r3
 8000fe2:	07ed      	lsls	r5, r5, #31
 8000fe4:	e63c      	b.n	8000c60 <__aeabi_ddiv+0xf4>
 8000fe6:	f001 f8ad 	bl	8002144 <__clzsi2>
 8000fea:	0001      	movs	r1, r0
 8000fec:	0002      	movs	r2, r0
 8000fee:	3115      	adds	r1, #21
 8000ff0:	3220      	adds	r2, #32
 8000ff2:	291c      	cmp	r1, #28
 8000ff4:	dc00      	bgt.n	8000ff8 <__aeabi_ddiv+0x48c>
 8000ff6:	e72c      	b.n	8000e52 <__aeabi_ddiv+0x2e6>
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	3808      	subs	r0, #8
 8000ffc:	4083      	lsls	r3, r0
 8000ffe:	2500      	movs	r5, #0
 8001000:	4698      	mov	r8, r3
 8001002:	e732      	b.n	8000e6a <__aeabi_ddiv+0x2fe>
 8001004:	f001 f89e 	bl	8002144 <__clzsi2>
 8001008:	0003      	movs	r3, r0
 800100a:	001a      	movs	r2, r3
 800100c:	3215      	adds	r2, #21
 800100e:	3020      	adds	r0, #32
 8001010:	2a1c      	cmp	r2, #28
 8001012:	dc00      	bgt.n	8001016 <__aeabi_ddiv+0x4aa>
 8001014:	e6ff      	b.n	8000e16 <__aeabi_ddiv+0x2aa>
 8001016:	4654      	mov	r4, sl
 8001018:	3b08      	subs	r3, #8
 800101a:	2100      	movs	r1, #0
 800101c:	409c      	lsls	r4, r3
 800101e:	e705      	b.n	8000e2c <__aeabi_ddiv+0x2c0>
 8001020:	1936      	adds	r6, r6, r4
 8001022:	3b01      	subs	r3, #1
 8001024:	42b4      	cmp	r4, r6
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x4be>
 8001028:	e6a6      	b.n	8000d78 <__aeabi_ddiv+0x20c>
 800102a:	42b2      	cmp	r2, r6
 800102c:	d800      	bhi.n	8001030 <__aeabi_ddiv+0x4c4>
 800102e:	e6a3      	b.n	8000d78 <__aeabi_ddiv+0x20c>
 8001030:	1e83      	subs	r3, r0, #2
 8001032:	1936      	adds	r6, r6, r4
 8001034:	e6a0      	b.n	8000d78 <__aeabi_ddiv+0x20c>
 8001036:	1909      	adds	r1, r1, r4
 8001038:	3d01      	subs	r5, #1
 800103a:	428c      	cmp	r4, r1
 800103c:	d900      	bls.n	8001040 <__aeabi_ddiv+0x4d4>
 800103e:	e68d      	b.n	8000d5c <__aeabi_ddiv+0x1f0>
 8001040:	428a      	cmp	r2, r1
 8001042:	d800      	bhi.n	8001046 <__aeabi_ddiv+0x4da>
 8001044:	e68a      	b.n	8000d5c <__aeabi_ddiv+0x1f0>
 8001046:	1e85      	subs	r5, r0, #2
 8001048:	1909      	adds	r1, r1, r4
 800104a:	e687      	b.n	8000d5c <__aeabi_ddiv+0x1f0>
 800104c:	220f      	movs	r2, #15
 800104e:	402a      	ands	r2, r5
 8001050:	2a04      	cmp	r2, #4
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x4ea>
 8001054:	e6bc      	b.n	8000dd0 <__aeabi_ddiv+0x264>
 8001056:	1d29      	adds	r1, r5, #4
 8001058:	42a9      	cmp	r1, r5
 800105a:	41ad      	sbcs	r5, r5
 800105c:	426d      	negs	r5, r5
 800105e:	08c9      	lsrs	r1, r1, #3
 8001060:	44a8      	add	r8, r5
 8001062:	e6b6      	b.n	8000dd2 <__aeabi_ddiv+0x266>
 8001064:	42af      	cmp	r7, r5
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fe>
 8001068:	e662      	b.n	8000d30 <__aeabi_ddiv+0x1c4>
 800106a:	4281      	cmp	r1, r0
 800106c:	d804      	bhi.n	8001078 <__aeabi_ddiv+0x50c>
 800106e:	d000      	beq.n	8001072 <__aeabi_ddiv+0x506>
 8001070:	e65e      	b.n	8000d30 <__aeabi_ddiv+0x1c4>
 8001072:	42ae      	cmp	r6, r5
 8001074:	d800      	bhi.n	8001078 <__aeabi_ddiv+0x50c>
 8001076:	e65b      	b.n	8000d30 <__aeabi_ddiv+0x1c4>
 8001078:	2302      	movs	r3, #2
 800107a:	425b      	negs	r3, r3
 800107c:	469c      	mov	ip, r3
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	44e0      	add	r8, ip
 8001082:	469c      	mov	ip, r3
 8001084:	4465      	add	r5, ip
 8001086:	429d      	cmp	r5, r3
 8001088:	419b      	sbcs	r3, r3
 800108a:	425b      	negs	r3, r3
 800108c:	191b      	adds	r3, r3, r4
 800108e:	18c0      	adds	r0, r0, r3
 8001090:	e64f      	b.n	8000d32 <__aeabi_ddiv+0x1c6>
 8001092:	42b2      	cmp	r2, r6
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x52c>
 8001096:	e612      	b.n	8000cbe <__aeabi_ddiv+0x152>
 8001098:	1e83      	subs	r3, r0, #2
 800109a:	1936      	adds	r6, r6, r4
 800109c:	e60f      	b.n	8000cbe <__aeabi_ddiv+0x152>
 800109e:	428a      	cmp	r2, r1
 80010a0:	d800      	bhi.n	80010a4 <__aeabi_ddiv+0x538>
 80010a2:	e5fa      	b.n	8000c9a <__aeabi_ddiv+0x12e>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	4698      	mov	r8, r3
 80010a8:	1909      	adds	r1, r1, r4
 80010aa:	e5f6      	b.n	8000c9a <__aeabi_ddiv+0x12e>
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <__aeabi_ddiv+0x5d4>)
 80010ae:	0028      	movs	r0, r5
 80010b0:	445b      	add	r3, fp
 80010b2:	4641      	mov	r1, r8
 80010b4:	409d      	lsls	r5, r3
 80010b6:	4099      	lsls	r1, r3
 80010b8:	40d0      	lsrs	r0, r2
 80010ba:	1e6b      	subs	r3, r5, #1
 80010bc:	419d      	sbcs	r5, r3
 80010be:	4643      	mov	r3, r8
 80010c0:	4301      	orrs	r1, r0
 80010c2:	4329      	orrs	r1, r5
 80010c4:	40d3      	lsrs	r3, r2
 80010c6:	074a      	lsls	r2, r1, #29
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x560>
 80010ca:	e755      	b.n	8000f78 <__aeabi_ddiv+0x40c>
 80010cc:	220f      	movs	r2, #15
 80010ce:	400a      	ands	r2, r1
 80010d0:	2a04      	cmp	r2, #4
 80010d2:	d000      	beq.n	80010d6 <__aeabi_ddiv+0x56a>
 80010d4:	e74a      	b.n	8000f6c <__aeabi_ddiv+0x400>
 80010d6:	e74f      	b.n	8000f78 <__aeabi_ddiv+0x40c>
 80010d8:	0015      	movs	r5, r2
 80010da:	4286      	cmp	r6, r0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x574>
 80010de:	e66d      	b.n	8000dbc <__aeabi_ddiv+0x250>
 80010e0:	9a00      	ldr	r2, [sp, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d000      	beq.n	80010e8 <__aeabi_ddiv+0x57c>
 80010e6:	e669      	b.n	8000dbc <__aeabi_ddiv+0x250>
 80010e8:	e66a      	b.n	8000dc0 <__aeabi_ddiv+0x254>
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <__aeabi_ddiv+0x5d8>)
 80010ec:	445b      	add	r3, fp
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dc00      	bgt.n	80010f4 <__aeabi_ddiv+0x588>
 80010f2:	e713      	b.n	8000f1c <__aeabi_ddiv+0x3b0>
 80010f4:	2501      	movs	r5, #1
 80010f6:	2100      	movs	r1, #0
 80010f8:	44a8      	add	r8, r5
 80010fa:	e66a      	b.n	8000dd2 <__aeabi_ddiv+0x266>
 80010fc:	075d      	lsls	r5, r3, #29
 80010fe:	025b      	lsls	r3, r3, #9
 8001100:	0b1a      	lsrs	r2, r3, #12
 8001102:	08c9      	lsrs	r1, r1, #3
 8001104:	2300      	movs	r3, #0
 8001106:	430d      	orrs	r5, r1
 8001108:	e587      	b.n	8000c1a <__aeabi_ddiv+0xae>
 800110a:	9900      	ldr	r1, [sp, #0]
 800110c:	3d02      	subs	r5, #2
 800110e:	004a      	lsls	r2, r1, #1
 8001110:	428a      	cmp	r2, r1
 8001112:	41bf      	sbcs	r7, r7
 8001114:	427f      	negs	r7, r7
 8001116:	193f      	adds	r7, r7, r4
 8001118:	19f6      	adds	r6, r6, r7
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	e7dd      	b.n	80010da <__aeabi_ddiv+0x56e>
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	4643      	mov	r3, r8
 8001122:	0312      	lsls	r2, r2, #12
 8001124:	431a      	orrs	r2, r3
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <__aeabi_ddiv+0x5cc>)
 800112a:	0b12      	lsrs	r2, r2, #12
 800112c:	e575      	b.n	8000c1a <__aeabi_ddiv+0xae>
 800112e:	9900      	ldr	r1, [sp, #0]
 8001130:	4299      	cmp	r1, r3
 8001132:	d3ea      	bcc.n	800110a <__aeabi_ddiv+0x59e>
 8001134:	0015      	movs	r5, r2
 8001136:	e7d3      	b.n	80010e0 <__aeabi_ddiv+0x574>
 8001138:	000007ff 	.word	0x000007ff
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff

08001148 <__eqdf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464e      	mov	r6, r9
 800114c:	4645      	mov	r5, r8
 800114e:	46de      	mov	lr, fp
 8001150:	4657      	mov	r7, sl
 8001152:	4690      	mov	r8, r2
 8001154:	b5e0      	push	{r5, r6, r7, lr}
 8001156:	0017      	movs	r7, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	0005      	movs	r5, r0
 800115e:	4684      	mov	ip, r0
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <__eqdf2+0x80>)
 8001162:	030e      	lsls	r6, r1, #12
 8001164:	004c      	lsls	r4, r1, #1
 8001166:	4691      	mov	r9, r2
 8001168:	005a      	lsls	r2, r3, #1
 800116a:	0fdb      	lsrs	r3, r3, #31
 800116c:	469b      	mov	fp, r3
 800116e:	0b36      	lsrs	r6, r6, #12
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	4284      	cmp	r4, r0
 8001178:	d019      	beq.n	80011ae <__eqdf2+0x66>
 800117a:	4282      	cmp	r2, r0
 800117c:	d010      	beq.n	80011a0 <__eqdf2+0x58>
 800117e:	2001      	movs	r0, #1
 8001180:	4294      	cmp	r4, r2
 8001182:	d10e      	bne.n	80011a2 <__eqdf2+0x5a>
 8001184:	454e      	cmp	r6, r9
 8001186:	d10c      	bne.n	80011a2 <__eqdf2+0x5a>
 8001188:	2001      	movs	r0, #1
 800118a:	45c4      	cmp	ip, r8
 800118c:	d109      	bne.n	80011a2 <__eqdf2+0x5a>
 800118e:	4559      	cmp	r1, fp
 8001190:	d017      	beq.n	80011c2 <__eqdf2+0x7a>
 8001192:	2c00      	cmp	r4, #0
 8001194:	d105      	bne.n	80011a2 <__eqdf2+0x5a>
 8001196:	0030      	movs	r0, r6
 8001198:	4328      	orrs	r0, r5
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	4198      	sbcs	r0, r3
 800119e:	e000      	b.n	80011a2 <__eqdf2+0x5a>
 80011a0:	2001      	movs	r0, #1
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	46bb      	mov	fp, r7
 80011a6:	46b2      	mov	sl, r6
 80011a8:	46a9      	mov	r9, r5
 80011aa:	46a0      	mov	r8, r4
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	0033      	movs	r3, r6
 80011b0:	2001      	movs	r0, #1
 80011b2:	432b      	orrs	r3, r5
 80011b4:	d1f5      	bne.n	80011a2 <__eqdf2+0x5a>
 80011b6:	42a2      	cmp	r2, r4
 80011b8:	d1f3      	bne.n	80011a2 <__eqdf2+0x5a>
 80011ba:	464b      	mov	r3, r9
 80011bc:	433b      	orrs	r3, r7
 80011be:	d1f0      	bne.n	80011a2 <__eqdf2+0x5a>
 80011c0:	e7e2      	b.n	8001188 <__eqdf2+0x40>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7ed      	b.n	80011a2 <__eqdf2+0x5a>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	000007ff 	.word	0x000007ff

080011cc <__gedf2>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	4647      	mov	r7, r8
 80011d0:	46ce      	mov	lr, r9
 80011d2:	0004      	movs	r4, r0
 80011d4:	0018      	movs	r0, r3
 80011d6:	0016      	movs	r6, r2
 80011d8:	031b      	lsls	r3, r3, #12
 80011da:	0b1b      	lsrs	r3, r3, #12
 80011dc:	4d2d      	ldr	r5, [pc, #180]	; (8001294 <__gedf2+0xc8>)
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	b580      	push	{r7, lr}
 80011e4:	0043      	lsls	r3, r0, #1
 80011e6:	030f      	lsls	r7, r1, #12
 80011e8:	46a4      	mov	ip, r4
 80011ea:	46b0      	mov	r8, r6
 80011ec:	0b3f      	lsrs	r7, r7, #12
 80011ee:	0d52      	lsrs	r2, r2, #21
 80011f0:	0fc9      	lsrs	r1, r1, #31
 80011f2:	0d5b      	lsrs	r3, r3, #21
 80011f4:	0fc0      	lsrs	r0, r0, #31
 80011f6:	42aa      	cmp	r2, r5
 80011f8:	d021      	beq.n	800123e <__gedf2+0x72>
 80011fa:	42ab      	cmp	r3, r5
 80011fc:	d013      	beq.n	8001226 <__gedf2+0x5a>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d122      	bne.n	8001248 <__gedf2+0x7c>
 8001202:	433c      	orrs	r4, r7
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <__gedf2+0x42>
 8001208:	464d      	mov	r5, r9
 800120a:	432e      	orrs	r6, r5
 800120c:	d022      	beq.n	8001254 <__gedf2+0x88>
 800120e:	2c00      	cmp	r4, #0
 8001210:	d010      	beq.n	8001234 <__gedf2+0x68>
 8001212:	4281      	cmp	r1, r0
 8001214:	d022      	beq.n	800125c <__gedf2+0x90>
 8001216:	2002      	movs	r0, #2
 8001218:	3901      	subs	r1, #1
 800121a:	4008      	ands	r0, r1
 800121c:	3801      	subs	r0, #1
 800121e:	bcc0      	pop	{r6, r7}
 8001220:	46b9      	mov	r9, r7
 8001222:	46b0      	mov	r8, r6
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001226:	464d      	mov	r5, r9
 8001228:	432e      	orrs	r6, r5
 800122a:	d129      	bne.n	8001280 <__gedf2+0xb4>
 800122c:	2a00      	cmp	r2, #0
 800122e:	d1f0      	bne.n	8001212 <__gedf2+0x46>
 8001230:	433c      	orrs	r4, r7
 8001232:	d1ee      	bne.n	8001212 <__gedf2+0x46>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1f2      	bne.n	800121e <__gedf2+0x52>
 8001238:	2001      	movs	r0, #1
 800123a:	4240      	negs	r0, r0
 800123c:	e7ef      	b.n	800121e <__gedf2+0x52>
 800123e:	003d      	movs	r5, r7
 8001240:	4325      	orrs	r5, r4
 8001242:	d11d      	bne.n	8001280 <__gedf2+0xb4>
 8001244:	4293      	cmp	r3, r2
 8001246:	d0ee      	beq.n	8001226 <__gedf2+0x5a>
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e2      	bne.n	8001212 <__gedf2+0x46>
 800124c:	464c      	mov	r4, r9
 800124e:	4326      	orrs	r6, r4
 8001250:	d1df      	bne.n	8001212 <__gedf2+0x46>
 8001252:	e7e0      	b.n	8001216 <__gedf2+0x4a>
 8001254:	2000      	movs	r0, #0
 8001256:	2c00      	cmp	r4, #0
 8001258:	d0e1      	beq.n	800121e <__gedf2+0x52>
 800125a:	e7dc      	b.n	8001216 <__gedf2+0x4a>
 800125c:	429a      	cmp	r2, r3
 800125e:	dc0a      	bgt.n	8001276 <__gedf2+0xaa>
 8001260:	dbe8      	blt.n	8001234 <__gedf2+0x68>
 8001262:	454f      	cmp	r7, r9
 8001264:	d8d7      	bhi.n	8001216 <__gedf2+0x4a>
 8001266:	d00e      	beq.n	8001286 <__gedf2+0xba>
 8001268:	2000      	movs	r0, #0
 800126a:	454f      	cmp	r7, r9
 800126c:	d2d7      	bcs.n	800121e <__gedf2+0x52>
 800126e:	2900      	cmp	r1, #0
 8001270:	d0e2      	beq.n	8001238 <__gedf2+0x6c>
 8001272:	0008      	movs	r0, r1
 8001274:	e7d3      	b.n	800121e <__gedf2+0x52>
 8001276:	4243      	negs	r3, r0
 8001278:	4158      	adcs	r0, r3
 800127a:	0040      	lsls	r0, r0, #1
 800127c:	3801      	subs	r0, #1
 800127e:	e7ce      	b.n	800121e <__gedf2+0x52>
 8001280:	2002      	movs	r0, #2
 8001282:	4240      	negs	r0, r0
 8001284:	e7cb      	b.n	800121e <__gedf2+0x52>
 8001286:	45c4      	cmp	ip, r8
 8001288:	d8c5      	bhi.n	8001216 <__gedf2+0x4a>
 800128a:	2000      	movs	r0, #0
 800128c:	45c4      	cmp	ip, r8
 800128e:	d2c6      	bcs.n	800121e <__gedf2+0x52>
 8001290:	e7ed      	b.n	800126e <__gedf2+0xa2>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	000007ff 	.word	0x000007ff

08001298 <__ledf2>:
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	4647      	mov	r7, r8
 800129c:	46ce      	mov	lr, r9
 800129e:	0004      	movs	r4, r0
 80012a0:	0018      	movs	r0, r3
 80012a2:	0016      	movs	r6, r2
 80012a4:	031b      	lsls	r3, r3, #12
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4d2c      	ldr	r5, [pc, #176]	; (800135c <__ledf2+0xc4>)
 80012aa:	004a      	lsls	r2, r1, #1
 80012ac:	4699      	mov	r9, r3
 80012ae:	b580      	push	{r7, lr}
 80012b0:	0043      	lsls	r3, r0, #1
 80012b2:	030f      	lsls	r7, r1, #12
 80012b4:	46a4      	mov	ip, r4
 80012b6:	46b0      	mov	r8, r6
 80012b8:	0b3f      	lsrs	r7, r7, #12
 80012ba:	0d52      	lsrs	r2, r2, #21
 80012bc:	0fc9      	lsrs	r1, r1, #31
 80012be:	0d5b      	lsrs	r3, r3, #21
 80012c0:	0fc0      	lsrs	r0, r0, #31
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d00d      	beq.n	80012e2 <__ledf2+0x4a>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d010      	beq.n	80012ec <__ledf2+0x54>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d127      	bne.n	800131e <__ledf2+0x86>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d111      	bne.n	80012f8 <__ledf2+0x60>
 80012d4:	464d      	mov	r5, r9
 80012d6:	432e      	orrs	r6, r5
 80012d8:	d10e      	bne.n	80012f8 <__ledf2+0x60>
 80012da:	2000      	movs	r0, #0
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d015      	beq.n	800130c <__ledf2+0x74>
 80012e0:	e00e      	b.n	8001300 <__ledf2+0x68>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d110      	bne.n	800130a <__ledf2+0x72>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d118      	bne.n	800131e <__ledf2+0x86>
 80012ec:	464d      	mov	r5, r9
 80012ee:	432e      	orrs	r6, r5
 80012f0:	d10b      	bne.n	800130a <__ledf2+0x72>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d102      	bne.n	80012fc <__ledf2+0x64>
 80012f6:	433c      	orrs	r4, r7
 80012f8:	2c00      	cmp	r4, #0
 80012fa:	d00b      	beq.n	8001314 <__ledf2+0x7c>
 80012fc:	4281      	cmp	r1, r0
 80012fe:	d014      	beq.n	800132a <__ledf2+0x92>
 8001300:	2002      	movs	r0, #2
 8001302:	3901      	subs	r1, #1
 8001304:	4008      	ands	r0, r1
 8001306:	3801      	subs	r0, #1
 8001308:	e000      	b.n	800130c <__ledf2+0x74>
 800130a:	2002      	movs	r0, #2
 800130c:	bcc0      	pop	{r6, r7}
 800130e:	46b9      	mov	r9, r7
 8001310:	46b0      	mov	r8, r6
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	2800      	cmp	r0, #0
 8001316:	d1f9      	bne.n	800130c <__ledf2+0x74>
 8001318:	2001      	movs	r0, #1
 800131a:	4240      	negs	r0, r0
 800131c:	e7f6      	b.n	800130c <__ledf2+0x74>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ec      	bne.n	80012fc <__ledf2+0x64>
 8001322:	464c      	mov	r4, r9
 8001324:	4326      	orrs	r6, r4
 8001326:	d1e9      	bne.n	80012fc <__ledf2+0x64>
 8001328:	e7ea      	b.n	8001300 <__ledf2+0x68>
 800132a:	429a      	cmp	r2, r3
 800132c:	dd04      	ble.n	8001338 <__ledf2+0xa0>
 800132e:	4243      	negs	r3, r0
 8001330:	4158      	adcs	r0, r3
 8001332:	0040      	lsls	r0, r0, #1
 8001334:	3801      	subs	r0, #1
 8001336:	e7e9      	b.n	800130c <__ledf2+0x74>
 8001338:	429a      	cmp	r2, r3
 800133a:	dbeb      	blt.n	8001314 <__ledf2+0x7c>
 800133c:	454f      	cmp	r7, r9
 800133e:	d8df      	bhi.n	8001300 <__ledf2+0x68>
 8001340:	d006      	beq.n	8001350 <__ledf2+0xb8>
 8001342:	2000      	movs	r0, #0
 8001344:	454f      	cmp	r7, r9
 8001346:	d2e1      	bcs.n	800130c <__ledf2+0x74>
 8001348:	2900      	cmp	r1, #0
 800134a:	d0e5      	beq.n	8001318 <__ledf2+0x80>
 800134c:	0008      	movs	r0, r1
 800134e:	e7dd      	b.n	800130c <__ledf2+0x74>
 8001350:	45c4      	cmp	ip, r8
 8001352:	d8d5      	bhi.n	8001300 <__ledf2+0x68>
 8001354:	2000      	movs	r0, #0
 8001356:	45c4      	cmp	ip, r8
 8001358:	d2d8      	bcs.n	800130c <__ledf2+0x74>
 800135a:	e7f5      	b.n	8001348 <__ledf2+0xb0>
 800135c:	000007ff 	.word	0x000007ff

08001360 <__aeabi_dmul>:
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	4645      	mov	r5, r8
 8001364:	46de      	mov	lr, fp
 8001366:	4657      	mov	r7, sl
 8001368:	464e      	mov	r6, r9
 800136a:	b5e0      	push	{r5, r6, r7, lr}
 800136c:	001f      	movs	r7, r3
 800136e:	030b      	lsls	r3, r1, #12
 8001370:	0b1b      	lsrs	r3, r3, #12
 8001372:	469b      	mov	fp, r3
 8001374:	004d      	lsls	r5, r1, #1
 8001376:	0fcb      	lsrs	r3, r1, #31
 8001378:	0004      	movs	r4, r0
 800137a:	4691      	mov	r9, r2
 800137c:	4698      	mov	r8, r3
 800137e:	b087      	sub	sp, #28
 8001380:	0d6d      	lsrs	r5, r5, #21
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x26>
 8001384:	e1cd      	b.n	8001722 <__aeabi_dmul+0x3c2>
 8001386:	4bce      	ldr	r3, [pc, #824]	; (80016c0 <__aeabi_dmul+0x360>)
 8001388:	429d      	cmp	r5, r3
 800138a:	d100      	bne.n	800138e <__aeabi_dmul+0x2e>
 800138c:	e1e9      	b.n	8001762 <__aeabi_dmul+0x402>
 800138e:	465a      	mov	r2, fp
 8001390:	0f43      	lsrs	r3, r0, #29
 8001392:	00d2      	lsls	r2, r2, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0412      	lsls	r2, r2, #16
 800139a:	431a      	orrs	r2, r3
 800139c:	00c3      	lsls	r3, r0, #3
 800139e:	469a      	mov	sl, r3
 80013a0:	4bc8      	ldr	r3, [pc, #800]	; (80016c4 <__aeabi_dmul+0x364>)
 80013a2:	4693      	mov	fp, r2
 80013a4:	469c      	mov	ip, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	2600      	movs	r6, #0
 80013aa:	4465      	add	r5, ip
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	033c      	lsls	r4, r7, #12
 80013b0:	007b      	lsls	r3, r7, #1
 80013b2:	4648      	mov	r0, r9
 80013b4:	0b24      	lsrs	r4, r4, #12
 80013b6:	0d5b      	lsrs	r3, r3, #21
 80013b8:	0fff      	lsrs	r7, r7, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dmul+0x60>
 80013be:	e189      	b.n	80016d4 <__aeabi_dmul+0x374>
 80013c0:	4abf      	ldr	r2, [pc, #764]	; (80016c0 <__aeabi_dmul+0x360>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <__aeabi_dmul+0x9a>
 80013c6:	0f42      	lsrs	r2, r0, #29
 80013c8:	00e4      	lsls	r4, r4, #3
 80013ca:	4322      	orrs	r2, r4
 80013cc:	2480      	movs	r4, #128	; 0x80
 80013ce:	0424      	lsls	r4, r4, #16
 80013d0:	4314      	orrs	r4, r2
 80013d2:	4abc      	ldr	r2, [pc, #752]	; (80016c4 <__aeabi_dmul+0x364>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4694      	mov	ip, r2
 80013d8:	4642      	mov	r2, r8
 80013da:	4463      	add	r3, ip
 80013dc:	195b      	adds	r3, r3, r5
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	407a      	eors	r2, r7
 80013e4:	3301      	adds	r3, #1
 80013e6:	00c0      	lsls	r0, r0, #3
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2e0a      	cmp	r6, #10
 80013ee:	dd1c      	ble.n	800142a <__aeabi_dmul+0xca>
 80013f0:	003a      	movs	r2, r7
 80013f2:	2e0b      	cmp	r6, #11
 80013f4:	d05e      	beq.n	80014b4 <__aeabi_dmul+0x154>
 80013f6:	4647      	mov	r7, r8
 80013f8:	e056      	b.n	80014a8 <__aeabi_dmul+0x148>
 80013fa:	4649      	mov	r1, r9
 80013fc:	4bb0      	ldr	r3, [pc, #704]	; (80016c0 <__aeabi_dmul+0x360>)
 80013fe:	4321      	orrs	r1, r4
 8001400:	18eb      	adds	r3, r5, r3
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	2900      	cmp	r1, #0
 8001406:	d12a      	bne.n	800145e <__aeabi_dmul+0xfe>
 8001408:	2080      	movs	r0, #128	; 0x80
 800140a:	2202      	movs	r2, #2
 800140c:	0100      	lsls	r0, r0, #4
 800140e:	002b      	movs	r3, r5
 8001410:	4684      	mov	ip, r0
 8001412:	4316      	orrs	r6, r2
 8001414:	4642      	mov	r2, r8
 8001416:	4463      	add	r3, ip
 8001418:	407a      	eors	r2, r7
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2e0a      	cmp	r6, #10
 8001420:	dd00      	ble.n	8001424 <__aeabi_dmul+0xc4>
 8001422:	e231      	b.n	8001888 <__aeabi_dmul+0x528>
 8001424:	2000      	movs	r0, #0
 8001426:	2400      	movs	r4, #0
 8001428:	2102      	movs	r1, #2
 800142a:	2e02      	cmp	r6, #2
 800142c:	dc26      	bgt.n	800147c <__aeabi_dmul+0x11c>
 800142e:	3e01      	subs	r6, #1
 8001430:	2e01      	cmp	r6, #1
 8001432:	d852      	bhi.n	80014da <__aeabi_dmul+0x17a>
 8001434:	2902      	cmp	r1, #2
 8001436:	d04c      	beq.n	80014d2 <__aeabi_dmul+0x172>
 8001438:	2901      	cmp	r1, #1
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0xde>
 800143c:	e118      	b.n	8001670 <__aeabi_dmul+0x310>
 800143e:	2300      	movs	r3, #0
 8001440:	2400      	movs	r4, #0
 8001442:	2500      	movs	r5, #0
 8001444:	051b      	lsls	r3, r3, #20
 8001446:	4323      	orrs	r3, r4
 8001448:	07d2      	lsls	r2, r2, #31
 800144a:	4313      	orrs	r3, r2
 800144c:	0028      	movs	r0, r5
 800144e:	0019      	movs	r1, r3
 8001450:	b007      	add	sp, #28
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	2203      	movs	r2, #3
 8001462:	0109      	lsls	r1, r1, #4
 8001464:	002b      	movs	r3, r5
 8001466:	468c      	mov	ip, r1
 8001468:	4316      	orrs	r6, r2
 800146a:	4642      	mov	r2, r8
 800146c:	4463      	add	r3, ip
 800146e:	407a      	eors	r2, r7
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2e0a      	cmp	r6, #10
 8001476:	dd00      	ble.n	800147a <__aeabi_dmul+0x11a>
 8001478:	e228      	b.n	80018cc <__aeabi_dmul+0x56c>
 800147a:	2103      	movs	r1, #3
 800147c:	2501      	movs	r5, #1
 800147e:	40b5      	lsls	r5, r6
 8001480:	46ac      	mov	ip, r5
 8001482:	26a6      	movs	r6, #166	; 0xa6
 8001484:	4663      	mov	r3, ip
 8001486:	00f6      	lsls	r6, r6, #3
 8001488:	4035      	ands	r5, r6
 800148a:	4233      	tst	r3, r6
 800148c:	d10b      	bne.n	80014a6 <__aeabi_dmul+0x146>
 800148e:	2690      	movs	r6, #144	; 0x90
 8001490:	00b6      	lsls	r6, r6, #2
 8001492:	4233      	tst	r3, r6
 8001494:	d118      	bne.n	80014c8 <__aeabi_dmul+0x168>
 8001496:	3eb9      	subs	r6, #185	; 0xb9
 8001498:	3eff      	subs	r6, #255	; 0xff
 800149a:	421e      	tst	r6, r3
 800149c:	d01d      	beq.n	80014da <__aeabi_dmul+0x17a>
 800149e:	46a3      	mov	fp, r4
 80014a0:	4682      	mov	sl, r0
 80014a2:	9100      	str	r1, [sp, #0]
 80014a4:	e000      	b.n	80014a8 <__aeabi_dmul+0x148>
 80014a6:	0017      	movs	r7, r2
 80014a8:	9900      	ldr	r1, [sp, #0]
 80014aa:	003a      	movs	r2, r7
 80014ac:	2902      	cmp	r1, #2
 80014ae:	d010      	beq.n	80014d2 <__aeabi_dmul+0x172>
 80014b0:	465c      	mov	r4, fp
 80014b2:	4650      	mov	r0, sl
 80014b4:	2903      	cmp	r1, #3
 80014b6:	d1bf      	bne.n	8001438 <__aeabi_dmul+0xd8>
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	431c      	orrs	r4, r3
 80014be:	0324      	lsls	r4, r4, #12
 80014c0:	0005      	movs	r5, r0
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <__aeabi_dmul+0x360>)
 80014c4:	0b24      	lsrs	r4, r4, #12
 80014c6:	e7bd      	b.n	8001444 <__aeabi_dmul+0xe4>
 80014c8:	2480      	movs	r4, #128	; 0x80
 80014ca:	2200      	movs	r2, #0
 80014cc:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <__aeabi_dmul+0x360>)
 80014ce:	0324      	lsls	r4, r4, #12
 80014d0:	e7b8      	b.n	8001444 <__aeabi_dmul+0xe4>
 80014d2:	2400      	movs	r4, #0
 80014d4:	2500      	movs	r5, #0
 80014d6:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <__aeabi_dmul+0x360>)
 80014d8:	e7b4      	b.n	8001444 <__aeabi_dmul+0xe4>
 80014da:	4653      	mov	r3, sl
 80014dc:	041e      	lsls	r6, r3, #16
 80014de:	0c36      	lsrs	r6, r6, #16
 80014e0:	0c1f      	lsrs	r7, r3, #16
 80014e2:	0033      	movs	r3, r6
 80014e4:	0c01      	lsrs	r1, r0, #16
 80014e6:	0400      	lsls	r0, r0, #16
 80014e8:	0c00      	lsrs	r0, r0, #16
 80014ea:	4343      	muls	r3, r0
 80014ec:	4698      	mov	r8, r3
 80014ee:	0003      	movs	r3, r0
 80014f0:	437b      	muls	r3, r7
 80014f2:	4699      	mov	r9, r3
 80014f4:	0033      	movs	r3, r6
 80014f6:	434b      	muls	r3, r1
 80014f8:	469c      	mov	ip, r3
 80014fa:	4643      	mov	r3, r8
 80014fc:	000d      	movs	r5, r1
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	469a      	mov	sl, r3
 8001502:	437d      	muls	r5, r7
 8001504:	44cc      	add	ip, r9
 8001506:	44d4      	add	ip, sl
 8001508:	9500      	str	r5, [sp, #0]
 800150a:	45e1      	cmp	r9, ip
 800150c:	d904      	bls.n	8001518 <__aeabi_dmul+0x1b8>
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	4699      	mov	r9, r3
 8001514:	444d      	add	r5, r9
 8001516:	9500      	str	r5, [sp, #0]
 8001518:	4663      	mov	r3, ip
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	001d      	movs	r5, r3
 800151e:	4663      	mov	r3, ip
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	469c      	mov	ip, r3
 8001524:	4643      	mov	r3, r8
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	4698      	mov	r8, r3
 800152c:	4663      	mov	r3, ip
 800152e:	4443      	add	r3, r8
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	0c23      	lsrs	r3, r4, #16
 8001534:	4698      	mov	r8, r3
 8001536:	0033      	movs	r3, r6
 8001538:	0424      	lsls	r4, r4, #16
 800153a:	0c24      	lsrs	r4, r4, #16
 800153c:	4363      	muls	r3, r4
 800153e:	469c      	mov	ip, r3
 8001540:	0023      	movs	r3, r4
 8001542:	437b      	muls	r3, r7
 8001544:	4699      	mov	r9, r3
 8001546:	4643      	mov	r3, r8
 8001548:	435e      	muls	r6, r3
 800154a:	435f      	muls	r7, r3
 800154c:	444e      	add	r6, r9
 800154e:	4663      	mov	r3, ip
 8001550:	46b2      	mov	sl, r6
 8001552:	0c1e      	lsrs	r6, r3, #16
 8001554:	4456      	add	r6, sl
 8001556:	45b1      	cmp	r9, r6
 8001558:	d903      	bls.n	8001562 <__aeabi_dmul+0x202>
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	4699      	mov	r9, r3
 8001560:	444f      	add	r7, r9
 8001562:	0c33      	lsrs	r3, r6, #16
 8001564:	4699      	mov	r9, r3
 8001566:	003b      	movs	r3, r7
 8001568:	444b      	add	r3, r9
 800156a:	9305      	str	r3, [sp, #20]
 800156c:	4663      	mov	r3, ip
 800156e:	46ac      	mov	ip, r5
 8001570:	041f      	lsls	r7, r3, #16
 8001572:	0c3f      	lsrs	r7, r7, #16
 8001574:	0436      	lsls	r6, r6, #16
 8001576:	19f6      	adds	r6, r6, r7
 8001578:	44b4      	add	ip, r6
 800157a:	4663      	mov	r3, ip
 800157c:	9304      	str	r3, [sp, #16]
 800157e:	465b      	mov	r3, fp
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	469c      	mov	ip, r3
 8001584:	465b      	mov	r3, fp
 8001586:	041f      	lsls	r7, r3, #16
 8001588:	0c3f      	lsrs	r7, r7, #16
 800158a:	003b      	movs	r3, r7
 800158c:	4343      	muls	r3, r0
 800158e:	4699      	mov	r9, r3
 8001590:	4663      	mov	r3, ip
 8001592:	4343      	muls	r3, r0
 8001594:	469a      	mov	sl, r3
 8001596:	464b      	mov	r3, r9
 8001598:	4660      	mov	r0, ip
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	469b      	mov	fp, r3
 800159e:	4348      	muls	r0, r1
 80015a0:	4379      	muls	r1, r7
 80015a2:	4451      	add	r1, sl
 80015a4:	4459      	add	r1, fp
 80015a6:	458a      	cmp	sl, r1
 80015a8:	d903      	bls.n	80015b2 <__aeabi_dmul+0x252>
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	469a      	mov	sl, r3
 80015b0:	4450      	add	r0, sl
 80015b2:	0c0b      	lsrs	r3, r1, #16
 80015b4:	469a      	mov	sl, r3
 80015b6:	464b      	mov	r3, r9
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	4699      	mov	r9, r3
 80015be:	003b      	movs	r3, r7
 80015c0:	4363      	muls	r3, r4
 80015c2:	0409      	lsls	r1, r1, #16
 80015c4:	4645      	mov	r5, r8
 80015c6:	4449      	add	r1, r9
 80015c8:	4699      	mov	r9, r3
 80015ca:	4663      	mov	r3, ip
 80015cc:	435c      	muls	r4, r3
 80015ce:	436b      	muls	r3, r5
 80015d0:	469c      	mov	ip, r3
 80015d2:	464b      	mov	r3, r9
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	4698      	mov	r8, r3
 80015d8:	436f      	muls	r7, r5
 80015da:	193f      	adds	r7, r7, r4
 80015dc:	4447      	add	r7, r8
 80015de:	4450      	add	r0, sl
 80015e0:	42bc      	cmp	r4, r7
 80015e2:	d903      	bls.n	80015ec <__aeabi_dmul+0x28c>
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4698      	mov	r8, r3
 80015ea:	44c4      	add	ip, r8
 80015ec:	9b04      	ldr	r3, [sp, #16]
 80015ee:	9d00      	ldr	r5, [sp, #0]
 80015f0:	4698      	mov	r8, r3
 80015f2:	4445      	add	r5, r8
 80015f4:	42b5      	cmp	r5, r6
 80015f6:	41b6      	sbcs	r6, r6
 80015f8:	4273      	negs	r3, r6
 80015fa:	4698      	mov	r8, r3
 80015fc:	464b      	mov	r3, r9
 80015fe:	041e      	lsls	r6, r3, #16
 8001600:	9b05      	ldr	r3, [sp, #20]
 8001602:	043c      	lsls	r4, r7, #16
 8001604:	4699      	mov	r9, r3
 8001606:	0c36      	lsrs	r6, r6, #16
 8001608:	19a4      	adds	r4, r4, r6
 800160a:	444c      	add	r4, r9
 800160c:	46a1      	mov	r9, r4
 800160e:	4683      	mov	fp, r0
 8001610:	186e      	adds	r6, r5, r1
 8001612:	44c1      	add	r9, r8
 8001614:	428e      	cmp	r6, r1
 8001616:	4189      	sbcs	r1, r1
 8001618:	44cb      	add	fp, r9
 800161a:	465d      	mov	r5, fp
 800161c:	4249      	negs	r1, r1
 800161e:	186d      	adds	r5, r5, r1
 8001620:	429c      	cmp	r4, r3
 8001622:	41a4      	sbcs	r4, r4
 8001624:	45c1      	cmp	r9, r8
 8001626:	419b      	sbcs	r3, r3
 8001628:	4583      	cmp	fp, r0
 800162a:	4180      	sbcs	r0, r0
 800162c:	428d      	cmp	r5, r1
 800162e:	4189      	sbcs	r1, r1
 8001630:	425b      	negs	r3, r3
 8001632:	4264      	negs	r4, r4
 8001634:	431c      	orrs	r4, r3
 8001636:	4240      	negs	r0, r0
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	4249      	negs	r1, r1
 800163c:	4301      	orrs	r1, r0
 800163e:	0270      	lsls	r0, r6, #9
 8001640:	0c3f      	lsrs	r7, r7, #16
 8001642:	4318      	orrs	r0, r3
 8001644:	19e4      	adds	r4, r4, r7
 8001646:	1e47      	subs	r7, r0, #1
 8001648:	41b8      	sbcs	r0, r7
 800164a:	1864      	adds	r4, r4, r1
 800164c:	4464      	add	r4, ip
 800164e:	0df6      	lsrs	r6, r6, #23
 8001650:	0261      	lsls	r1, r4, #9
 8001652:	4330      	orrs	r0, r6
 8001654:	0dec      	lsrs	r4, r5, #23
 8001656:	026e      	lsls	r6, r5, #9
 8001658:	430c      	orrs	r4, r1
 800165a:	4330      	orrs	r0, r6
 800165c:	01c9      	lsls	r1, r1, #7
 800165e:	d400      	bmi.n	8001662 <__aeabi_dmul+0x302>
 8001660:	e0f1      	b.n	8001846 <__aeabi_dmul+0x4e6>
 8001662:	2101      	movs	r1, #1
 8001664:	0843      	lsrs	r3, r0, #1
 8001666:	4001      	ands	r1, r0
 8001668:	430b      	orrs	r3, r1
 800166a:	07e0      	lsls	r0, r4, #31
 800166c:	4318      	orrs	r0, r3
 800166e:	0864      	lsrs	r4, r4, #1
 8001670:	4915      	ldr	r1, [pc, #84]	; (80016c8 <__aeabi_dmul+0x368>)
 8001672:	9b02      	ldr	r3, [sp, #8]
 8001674:	468c      	mov	ip, r1
 8001676:	4463      	add	r3, ip
 8001678:	2b00      	cmp	r3, #0
 800167a:	dc00      	bgt.n	800167e <__aeabi_dmul+0x31e>
 800167c:	e097      	b.n	80017ae <__aeabi_dmul+0x44e>
 800167e:	0741      	lsls	r1, r0, #29
 8001680:	d009      	beq.n	8001696 <__aeabi_dmul+0x336>
 8001682:	210f      	movs	r1, #15
 8001684:	4001      	ands	r1, r0
 8001686:	2904      	cmp	r1, #4
 8001688:	d005      	beq.n	8001696 <__aeabi_dmul+0x336>
 800168a:	1d01      	adds	r1, r0, #4
 800168c:	4281      	cmp	r1, r0
 800168e:	4180      	sbcs	r0, r0
 8001690:	4240      	negs	r0, r0
 8001692:	1824      	adds	r4, r4, r0
 8001694:	0008      	movs	r0, r1
 8001696:	01e1      	lsls	r1, r4, #7
 8001698:	d506      	bpl.n	80016a8 <__aeabi_dmul+0x348>
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	00c9      	lsls	r1, r1, #3
 800169e:	468c      	mov	ip, r1
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <__aeabi_dmul+0x36c>)
 80016a2:	401c      	ands	r4, r3
 80016a4:	9b02      	ldr	r3, [sp, #8]
 80016a6:	4463      	add	r3, ip
 80016a8:	4909      	ldr	r1, [pc, #36]	; (80016d0 <__aeabi_dmul+0x370>)
 80016aa:	428b      	cmp	r3, r1
 80016ac:	dd00      	ble.n	80016b0 <__aeabi_dmul+0x350>
 80016ae:	e710      	b.n	80014d2 <__aeabi_dmul+0x172>
 80016b0:	0761      	lsls	r1, r4, #29
 80016b2:	08c5      	lsrs	r5, r0, #3
 80016b4:	0264      	lsls	r4, r4, #9
 80016b6:	055b      	lsls	r3, r3, #21
 80016b8:	430d      	orrs	r5, r1
 80016ba:	0b24      	lsrs	r4, r4, #12
 80016bc:	0d5b      	lsrs	r3, r3, #21
 80016be:	e6c1      	b.n	8001444 <__aeabi_dmul+0xe4>
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	fffffc01 	.word	0xfffffc01
 80016c8:	000003ff 	.word	0x000003ff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	000007fe 	.word	0x000007fe
 80016d4:	464b      	mov	r3, r9
 80016d6:	4323      	orrs	r3, r4
 80016d8:	d059      	beq.n	800178e <__aeabi_dmul+0x42e>
 80016da:	2c00      	cmp	r4, #0
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0x380>
 80016de:	e0a3      	b.n	8001828 <__aeabi_dmul+0x4c8>
 80016e0:	0020      	movs	r0, r4
 80016e2:	f000 fd2f 	bl	8002144 <__clzsi2>
 80016e6:	0001      	movs	r1, r0
 80016e8:	0003      	movs	r3, r0
 80016ea:	390b      	subs	r1, #11
 80016ec:	221d      	movs	r2, #29
 80016ee:	1a52      	subs	r2, r2, r1
 80016f0:	4649      	mov	r1, r9
 80016f2:	0018      	movs	r0, r3
 80016f4:	40d1      	lsrs	r1, r2
 80016f6:	464a      	mov	r2, r9
 80016f8:	3808      	subs	r0, #8
 80016fa:	4082      	lsls	r2, r0
 80016fc:	4084      	lsls	r4, r0
 80016fe:	0010      	movs	r0, r2
 8001700:	430c      	orrs	r4, r1
 8001702:	4a74      	ldr	r2, [pc, #464]	; (80018d4 <__aeabi_dmul+0x574>)
 8001704:	1aeb      	subs	r3, r5, r3
 8001706:	4694      	mov	ip, r2
 8001708:	4642      	mov	r2, r8
 800170a:	4463      	add	r3, ip
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	9b01      	ldr	r3, [sp, #4]
 8001710:	407a      	eors	r2, r7
 8001712:	3301      	adds	r3, #1
 8001714:	2100      	movs	r1, #0
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	2e0a      	cmp	r6, #10
 800171c:	dd00      	ble.n	8001720 <__aeabi_dmul+0x3c0>
 800171e:	e667      	b.n	80013f0 <__aeabi_dmul+0x90>
 8001720:	e683      	b.n	800142a <__aeabi_dmul+0xca>
 8001722:	465b      	mov	r3, fp
 8001724:	4303      	orrs	r3, r0
 8001726:	469a      	mov	sl, r3
 8001728:	d02a      	beq.n	8001780 <__aeabi_dmul+0x420>
 800172a:	465b      	mov	r3, fp
 800172c:	2b00      	cmp	r3, #0
 800172e:	d06d      	beq.n	800180c <__aeabi_dmul+0x4ac>
 8001730:	4658      	mov	r0, fp
 8001732:	f000 fd07 	bl	8002144 <__clzsi2>
 8001736:	0001      	movs	r1, r0
 8001738:	0003      	movs	r3, r0
 800173a:	390b      	subs	r1, #11
 800173c:	221d      	movs	r2, #29
 800173e:	1a52      	subs	r2, r2, r1
 8001740:	0021      	movs	r1, r4
 8001742:	0018      	movs	r0, r3
 8001744:	465d      	mov	r5, fp
 8001746:	40d1      	lsrs	r1, r2
 8001748:	3808      	subs	r0, #8
 800174a:	4085      	lsls	r5, r0
 800174c:	000a      	movs	r2, r1
 800174e:	4084      	lsls	r4, r0
 8001750:	432a      	orrs	r2, r5
 8001752:	4693      	mov	fp, r2
 8001754:	46a2      	mov	sl, r4
 8001756:	4d5f      	ldr	r5, [pc, #380]	; (80018d4 <__aeabi_dmul+0x574>)
 8001758:	2600      	movs	r6, #0
 800175a:	1aed      	subs	r5, r5, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	e625      	b.n	80013ae <__aeabi_dmul+0x4e>
 8001762:	465b      	mov	r3, fp
 8001764:	4303      	orrs	r3, r0
 8001766:	469a      	mov	sl, r3
 8001768:	d105      	bne.n	8001776 <__aeabi_dmul+0x416>
 800176a:	2300      	movs	r3, #0
 800176c:	469b      	mov	fp, r3
 800176e:	3302      	adds	r3, #2
 8001770:	2608      	movs	r6, #8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	e61b      	b.n	80013ae <__aeabi_dmul+0x4e>
 8001776:	2303      	movs	r3, #3
 8001778:	4682      	mov	sl, r0
 800177a:	260c      	movs	r6, #12
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	e616      	b.n	80013ae <__aeabi_dmul+0x4e>
 8001780:	2300      	movs	r3, #0
 8001782:	469b      	mov	fp, r3
 8001784:	3301      	adds	r3, #1
 8001786:	2604      	movs	r6, #4
 8001788:	2500      	movs	r5, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	e60f      	b.n	80013ae <__aeabi_dmul+0x4e>
 800178e:	4642      	mov	r2, r8
 8001790:	3301      	adds	r3, #1
 8001792:	9501      	str	r5, [sp, #4]
 8001794:	431e      	orrs	r6, r3
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	407a      	eors	r2, r7
 800179a:	3301      	adds	r3, #1
 800179c:	2400      	movs	r4, #0
 800179e:	2000      	movs	r0, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2e0a      	cmp	r6, #10
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dmul+0x44c>
 80017aa:	e621      	b.n	80013f0 <__aeabi_dmul+0x90>
 80017ac:	e63d      	b.n	800142a <__aeabi_dmul+0xca>
 80017ae:	2101      	movs	r1, #1
 80017b0:	1ac9      	subs	r1, r1, r3
 80017b2:	2938      	cmp	r1, #56	; 0x38
 80017b4:	dd00      	ble.n	80017b8 <__aeabi_dmul+0x458>
 80017b6:	e642      	b.n	800143e <__aeabi_dmul+0xde>
 80017b8:	291f      	cmp	r1, #31
 80017ba:	dd47      	ble.n	800184c <__aeabi_dmul+0x4ec>
 80017bc:	261f      	movs	r6, #31
 80017be:	0025      	movs	r5, r4
 80017c0:	4276      	negs	r6, r6
 80017c2:	1af3      	subs	r3, r6, r3
 80017c4:	40dd      	lsrs	r5, r3
 80017c6:	002b      	movs	r3, r5
 80017c8:	2920      	cmp	r1, #32
 80017ca:	d005      	beq.n	80017d8 <__aeabi_dmul+0x478>
 80017cc:	4942      	ldr	r1, [pc, #264]	; (80018d8 <__aeabi_dmul+0x578>)
 80017ce:	9d02      	ldr	r5, [sp, #8]
 80017d0:	468c      	mov	ip, r1
 80017d2:	4465      	add	r5, ip
 80017d4:	40ac      	lsls	r4, r5
 80017d6:	4320      	orrs	r0, r4
 80017d8:	1e41      	subs	r1, r0, #1
 80017da:	4188      	sbcs	r0, r1
 80017dc:	4318      	orrs	r0, r3
 80017de:	2307      	movs	r3, #7
 80017e0:	001d      	movs	r5, r3
 80017e2:	2400      	movs	r4, #0
 80017e4:	4005      	ands	r5, r0
 80017e6:	4203      	tst	r3, r0
 80017e8:	d04a      	beq.n	8001880 <__aeabi_dmul+0x520>
 80017ea:	230f      	movs	r3, #15
 80017ec:	2400      	movs	r4, #0
 80017ee:	4003      	ands	r3, r0
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d042      	beq.n	800187a <__aeabi_dmul+0x51a>
 80017f4:	1d03      	adds	r3, r0, #4
 80017f6:	4283      	cmp	r3, r0
 80017f8:	4180      	sbcs	r0, r0
 80017fa:	4240      	negs	r0, r0
 80017fc:	1824      	adds	r4, r4, r0
 80017fe:	0018      	movs	r0, r3
 8001800:	0223      	lsls	r3, r4, #8
 8001802:	d53a      	bpl.n	800187a <__aeabi_dmul+0x51a>
 8001804:	2301      	movs	r3, #1
 8001806:	2400      	movs	r4, #0
 8001808:	2500      	movs	r5, #0
 800180a:	e61b      	b.n	8001444 <__aeabi_dmul+0xe4>
 800180c:	f000 fc9a 	bl	8002144 <__clzsi2>
 8001810:	0001      	movs	r1, r0
 8001812:	0003      	movs	r3, r0
 8001814:	3115      	adds	r1, #21
 8001816:	3320      	adds	r3, #32
 8001818:	291c      	cmp	r1, #28
 800181a:	dd8f      	ble.n	800173c <__aeabi_dmul+0x3dc>
 800181c:	3808      	subs	r0, #8
 800181e:	2200      	movs	r2, #0
 8001820:	4084      	lsls	r4, r0
 8001822:	4692      	mov	sl, r2
 8001824:	46a3      	mov	fp, r4
 8001826:	e796      	b.n	8001756 <__aeabi_dmul+0x3f6>
 8001828:	f000 fc8c 	bl	8002144 <__clzsi2>
 800182c:	0001      	movs	r1, r0
 800182e:	0003      	movs	r3, r0
 8001830:	3115      	adds	r1, #21
 8001832:	3320      	adds	r3, #32
 8001834:	291c      	cmp	r1, #28
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x4da>
 8001838:	e758      	b.n	80016ec <__aeabi_dmul+0x38c>
 800183a:	0002      	movs	r2, r0
 800183c:	464c      	mov	r4, r9
 800183e:	3a08      	subs	r2, #8
 8001840:	2000      	movs	r0, #0
 8001842:	4094      	lsls	r4, r2
 8001844:	e75d      	b.n	8001702 <__aeabi_dmul+0x3a2>
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	e711      	b.n	8001670 <__aeabi_dmul+0x310>
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <__aeabi_dmul+0x57c>)
 800184e:	0026      	movs	r6, r4
 8001850:	469c      	mov	ip, r3
 8001852:	0003      	movs	r3, r0
 8001854:	9d02      	ldr	r5, [sp, #8]
 8001856:	40cb      	lsrs	r3, r1
 8001858:	4465      	add	r5, ip
 800185a:	40ae      	lsls	r6, r5
 800185c:	431e      	orrs	r6, r3
 800185e:	0003      	movs	r3, r0
 8001860:	40ab      	lsls	r3, r5
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	4183      	sbcs	r3, r0
 8001866:	0030      	movs	r0, r6
 8001868:	4318      	orrs	r0, r3
 800186a:	40cc      	lsrs	r4, r1
 800186c:	0743      	lsls	r3, r0, #29
 800186e:	d0c7      	beq.n	8001800 <__aeabi_dmul+0x4a0>
 8001870:	230f      	movs	r3, #15
 8001872:	4003      	ands	r3, r0
 8001874:	2b04      	cmp	r3, #4
 8001876:	d1bd      	bne.n	80017f4 <__aeabi_dmul+0x494>
 8001878:	e7c2      	b.n	8001800 <__aeabi_dmul+0x4a0>
 800187a:	0765      	lsls	r5, r4, #29
 800187c:	0264      	lsls	r4, r4, #9
 800187e:	0b24      	lsrs	r4, r4, #12
 8001880:	08c0      	lsrs	r0, r0, #3
 8001882:	2300      	movs	r3, #0
 8001884:	4305      	orrs	r5, r0
 8001886:	e5dd      	b.n	8001444 <__aeabi_dmul+0xe4>
 8001888:	2500      	movs	r5, #0
 800188a:	2302      	movs	r3, #2
 800188c:	2e0f      	cmp	r6, #15
 800188e:	d10c      	bne.n	80018aa <__aeabi_dmul+0x54a>
 8001890:	2480      	movs	r4, #128	; 0x80
 8001892:	465b      	mov	r3, fp
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	4223      	tst	r3, r4
 8001898:	d00e      	beq.n	80018b8 <__aeabi_dmul+0x558>
 800189a:	4221      	tst	r1, r4
 800189c:	d10c      	bne.n	80018b8 <__aeabi_dmul+0x558>
 800189e:	430c      	orrs	r4, r1
 80018a0:	0324      	lsls	r4, r4, #12
 80018a2:	003a      	movs	r2, r7
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <__aeabi_dmul+0x580>)
 80018a6:	0b24      	lsrs	r4, r4, #12
 80018a8:	e5cc      	b.n	8001444 <__aeabi_dmul+0xe4>
 80018aa:	2e0b      	cmp	r6, #11
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dmul+0x550>
 80018ae:	e5a2      	b.n	80013f6 <__aeabi_dmul+0x96>
 80018b0:	468b      	mov	fp, r1
 80018b2:	46aa      	mov	sl, r5
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	e5f7      	b.n	80014a8 <__aeabi_dmul+0x148>
 80018b8:	2480      	movs	r4, #128	; 0x80
 80018ba:	465b      	mov	r3, fp
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	4642      	mov	r2, r8
 80018c4:	4655      	mov	r5, sl
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <__aeabi_dmul+0x580>)
 80018c8:	0b24      	lsrs	r4, r4, #12
 80018ca:	e5bb      	b.n	8001444 <__aeabi_dmul+0xe4>
 80018cc:	464d      	mov	r5, r9
 80018ce:	0021      	movs	r1, r4
 80018d0:	2303      	movs	r3, #3
 80018d2:	e7db      	b.n	800188c <__aeabi_dmul+0x52c>
 80018d4:	fffffc0d 	.word	0xfffffc0d
 80018d8:	0000043e 	.word	0x0000043e
 80018dc:	0000041e 	.word	0x0000041e
 80018e0:	000007ff 	.word	0x000007ff

080018e4 <__aeabi_dsub>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	4657      	mov	r7, sl
 80018e8:	464e      	mov	r6, r9
 80018ea:	4645      	mov	r5, r8
 80018ec:	46de      	mov	lr, fp
 80018ee:	b5e0      	push	{r5, r6, r7, lr}
 80018f0:	000d      	movs	r5, r1
 80018f2:	0004      	movs	r4, r0
 80018f4:	0019      	movs	r1, r3
 80018f6:	0010      	movs	r0, r2
 80018f8:	032b      	lsls	r3, r5, #12
 80018fa:	0a5b      	lsrs	r3, r3, #9
 80018fc:	0f62      	lsrs	r2, r4, #29
 80018fe:	431a      	orrs	r2, r3
 8001900:	00e3      	lsls	r3, r4, #3
 8001902:	030c      	lsls	r4, r1, #12
 8001904:	0a64      	lsrs	r4, r4, #9
 8001906:	0f47      	lsrs	r7, r0, #29
 8001908:	4327      	orrs	r7, r4
 800190a:	4cd0      	ldr	r4, [pc, #832]	; (8001c4c <__aeabi_dsub+0x368>)
 800190c:	006e      	lsls	r6, r5, #1
 800190e:	4691      	mov	r9, r2
 8001910:	b083      	sub	sp, #12
 8001912:	004a      	lsls	r2, r1, #1
 8001914:	00c0      	lsls	r0, r0, #3
 8001916:	4698      	mov	r8, r3
 8001918:	46a2      	mov	sl, r4
 800191a:	0d76      	lsrs	r6, r6, #21
 800191c:	0fed      	lsrs	r5, r5, #31
 800191e:	0d52      	lsrs	r2, r2, #21
 8001920:	0fc9      	lsrs	r1, r1, #31
 8001922:	9001      	str	r0, [sp, #4]
 8001924:	42a2      	cmp	r2, r4
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x46>
 8001928:	e0b9      	b.n	8001a9e <__aeabi_dsub+0x1ba>
 800192a:	2401      	movs	r4, #1
 800192c:	4061      	eors	r1, r4
 800192e:	468b      	mov	fp, r1
 8001930:	428d      	cmp	r5, r1
 8001932:	d100      	bne.n	8001936 <__aeabi_dsub+0x52>
 8001934:	e08d      	b.n	8001a52 <__aeabi_dsub+0x16e>
 8001936:	1ab4      	subs	r4, r6, r2
 8001938:	46a4      	mov	ip, r4
 800193a:	2c00      	cmp	r4, #0
 800193c:	dc00      	bgt.n	8001940 <__aeabi_dsub+0x5c>
 800193e:	e0b7      	b.n	8001ab0 <__aeabi_dsub+0x1cc>
 8001940:	2a00      	cmp	r2, #0
 8001942:	d100      	bne.n	8001946 <__aeabi_dsub+0x62>
 8001944:	e0cb      	b.n	8001ade <__aeabi_dsub+0x1fa>
 8001946:	4ac1      	ldr	r2, [pc, #772]	; (8001c4c <__aeabi_dsub+0x368>)
 8001948:	4296      	cmp	r6, r2
 800194a:	d100      	bne.n	800194e <__aeabi_dsub+0x6a>
 800194c:	e186      	b.n	8001c5c <__aeabi_dsub+0x378>
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	0412      	lsls	r2, r2, #16
 8001952:	4317      	orrs	r7, r2
 8001954:	4662      	mov	r2, ip
 8001956:	2a38      	cmp	r2, #56	; 0x38
 8001958:	dd00      	ble.n	800195c <__aeabi_dsub+0x78>
 800195a:	e1a4      	b.n	8001ca6 <__aeabi_dsub+0x3c2>
 800195c:	2a1f      	cmp	r2, #31
 800195e:	dd00      	ble.n	8001962 <__aeabi_dsub+0x7e>
 8001960:	e21d      	b.n	8001d9e <__aeabi_dsub+0x4ba>
 8001962:	4661      	mov	r1, ip
 8001964:	2220      	movs	r2, #32
 8001966:	003c      	movs	r4, r7
 8001968:	1a52      	subs	r2, r2, r1
 800196a:	0001      	movs	r1, r0
 800196c:	4090      	lsls	r0, r2
 800196e:	4094      	lsls	r4, r2
 8001970:	1e42      	subs	r2, r0, #1
 8001972:	4190      	sbcs	r0, r2
 8001974:	4662      	mov	r2, ip
 8001976:	46a0      	mov	r8, r4
 8001978:	4664      	mov	r4, ip
 800197a:	40d7      	lsrs	r7, r2
 800197c:	464a      	mov	r2, r9
 800197e:	40e1      	lsrs	r1, r4
 8001980:	4644      	mov	r4, r8
 8001982:	1bd2      	subs	r2, r2, r7
 8001984:	4691      	mov	r9, r2
 8001986:	430c      	orrs	r4, r1
 8001988:	4304      	orrs	r4, r0
 800198a:	1b1c      	subs	r4, r3, r4
 800198c:	42a3      	cmp	r3, r4
 800198e:	4192      	sbcs	r2, r2
 8001990:	464b      	mov	r3, r9
 8001992:	4252      	negs	r2, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	469a      	mov	sl, r3
 8001998:	4653      	mov	r3, sl
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	d400      	bmi.n	80019a0 <__aeabi_dsub+0xbc>
 800199e:	e12b      	b.n	8001bf8 <__aeabi_dsub+0x314>
 80019a0:	4653      	mov	r3, sl
 80019a2:	025a      	lsls	r2, r3, #9
 80019a4:	0a53      	lsrs	r3, r2, #9
 80019a6:	469a      	mov	sl, r3
 80019a8:	4653      	mov	r3, sl
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0xcc>
 80019ae:	e166      	b.n	8001c7e <__aeabi_dsub+0x39a>
 80019b0:	4650      	mov	r0, sl
 80019b2:	f000 fbc7 	bl	8002144 <__clzsi2>
 80019b6:	0003      	movs	r3, r0
 80019b8:	3b08      	subs	r3, #8
 80019ba:	2220      	movs	r2, #32
 80019bc:	0020      	movs	r0, r4
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	4651      	mov	r1, sl
 80019c2:	40d0      	lsrs	r0, r2
 80019c4:	4099      	lsls	r1, r3
 80019c6:	0002      	movs	r2, r0
 80019c8:	409c      	lsls	r4, r3
 80019ca:	430a      	orrs	r2, r1
 80019cc:	429e      	cmp	r6, r3
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dsub+0xee>
 80019d0:	e164      	b.n	8001c9c <__aeabi_dsub+0x3b8>
 80019d2:	1b9b      	subs	r3, r3, r6
 80019d4:	1c59      	adds	r1, r3, #1
 80019d6:	291f      	cmp	r1, #31
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dsub+0xf8>
 80019da:	e0fe      	b.n	8001bda <__aeabi_dsub+0x2f6>
 80019dc:	2320      	movs	r3, #32
 80019de:	0010      	movs	r0, r2
 80019e0:	0026      	movs	r6, r4
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	409c      	lsls	r4, r3
 80019e6:	4098      	lsls	r0, r3
 80019e8:	40ce      	lsrs	r6, r1
 80019ea:	40ca      	lsrs	r2, r1
 80019ec:	1e63      	subs	r3, r4, #1
 80019ee:	419c      	sbcs	r4, r3
 80019f0:	4330      	orrs	r0, r6
 80019f2:	4692      	mov	sl, r2
 80019f4:	2600      	movs	r6, #0
 80019f6:	4304      	orrs	r4, r0
 80019f8:	0763      	lsls	r3, r4, #29
 80019fa:	d009      	beq.n	8001a10 <__aeabi_dsub+0x12c>
 80019fc:	230f      	movs	r3, #15
 80019fe:	4023      	ands	r3, r4
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d005      	beq.n	8001a10 <__aeabi_dsub+0x12c>
 8001a04:	1d23      	adds	r3, r4, #4
 8001a06:	42a3      	cmp	r3, r4
 8001a08:	41a4      	sbcs	r4, r4
 8001a0a:	4264      	negs	r4, r4
 8001a0c:	44a2      	add	sl, r4
 8001a0e:	001c      	movs	r4, r3
 8001a10:	4653      	mov	r3, sl
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	d400      	bmi.n	8001a18 <__aeabi_dsub+0x134>
 8001a16:	e0f2      	b.n	8001bfe <__aeabi_dsub+0x31a>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <__aeabi_dsub+0x368>)
 8001a1a:	3601      	adds	r6, #1
 8001a1c:	429e      	cmp	r6, r3
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x13e>
 8001a20:	e10f      	b.n	8001c42 <__aeabi_dsub+0x35e>
 8001a22:	4653      	mov	r3, sl
 8001a24:	498a      	ldr	r1, [pc, #552]	; (8001c50 <__aeabi_dsub+0x36c>)
 8001a26:	08e4      	lsrs	r4, r4, #3
 8001a28:	400b      	ands	r3, r1
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	0572      	lsls	r2, r6, #21
 8001a32:	024c      	lsls	r4, r1, #9
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	0d52      	lsrs	r2, r2, #21
 8001a38:	0512      	lsls	r2, r2, #20
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	07ed      	lsls	r5, r5, #31
 8001a3e:	432a      	orrs	r2, r5
 8001a40:	0018      	movs	r0, r3
 8001a42:	0011      	movs	r1, r2
 8001a44:	b003      	add	sp, #12
 8001a46:	bcf0      	pop	{r4, r5, r6, r7}
 8001a48:	46bb      	mov	fp, r7
 8001a4a:	46b2      	mov	sl, r6
 8001a4c:	46a9      	mov	r9, r5
 8001a4e:	46a0      	mov	r8, r4
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a52:	1ab4      	subs	r4, r6, r2
 8001a54:	46a4      	mov	ip, r4
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	dd59      	ble.n	8001b0e <__aeabi_dsub+0x22a>
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x17c>
 8001a5e:	e0b0      	b.n	8001bc2 <__aeabi_dsub+0x2de>
 8001a60:	4556      	cmp	r6, sl
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x182>
 8001a64:	e0fa      	b.n	8001c5c <__aeabi_dsub+0x378>
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0412      	lsls	r2, r2, #16
 8001a6a:	4317      	orrs	r7, r2
 8001a6c:	4662      	mov	r2, ip
 8001a6e:	2a38      	cmp	r2, #56	; 0x38
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dsub+0x190>
 8001a72:	e0d4      	b.n	8001c1e <__aeabi_dsub+0x33a>
 8001a74:	2a1f      	cmp	r2, #31
 8001a76:	dc00      	bgt.n	8001a7a <__aeabi_dsub+0x196>
 8001a78:	e1c0      	b.n	8001dfc <__aeabi_dsub+0x518>
 8001a7a:	0039      	movs	r1, r7
 8001a7c:	3a20      	subs	r2, #32
 8001a7e:	40d1      	lsrs	r1, r2
 8001a80:	4662      	mov	r2, ip
 8001a82:	2a20      	cmp	r2, #32
 8001a84:	d006      	beq.n	8001a94 <__aeabi_dsub+0x1b0>
 8001a86:	4664      	mov	r4, ip
 8001a88:	2240      	movs	r2, #64	; 0x40
 8001a8a:	1b12      	subs	r2, r2, r4
 8001a8c:	003c      	movs	r4, r7
 8001a8e:	4094      	lsls	r4, r2
 8001a90:	4304      	orrs	r4, r0
 8001a92:	9401      	str	r4, [sp, #4]
 8001a94:	9c01      	ldr	r4, [sp, #4]
 8001a96:	1e62      	subs	r2, r4, #1
 8001a98:	4194      	sbcs	r4, r2
 8001a9a:	430c      	orrs	r4, r1
 8001a9c:	e0c3      	b.n	8001c26 <__aeabi_dsub+0x342>
 8001a9e:	003c      	movs	r4, r7
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d02b      	beq.n	8001afc <__aeabi_dsub+0x218>
 8001aa4:	468b      	mov	fp, r1
 8001aa6:	428d      	cmp	r5, r1
 8001aa8:	d02e      	beq.n	8001b08 <__aeabi_dsub+0x224>
 8001aaa:	4c6a      	ldr	r4, [pc, #424]	; (8001c54 <__aeabi_dsub+0x370>)
 8001aac:	46a4      	mov	ip, r4
 8001aae:	44b4      	add	ip, r6
 8001ab0:	4664      	mov	r4, ip
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d05f      	beq.n	8001b76 <__aeabi_dsub+0x292>
 8001ab6:	1b94      	subs	r4, r2, r6
 8001ab8:	46a4      	mov	ip, r4
 8001aba:	2e00      	cmp	r6, #0
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dsub+0x1dc>
 8001abe:	e120      	b.n	8001d02 <__aeabi_dsub+0x41e>
 8001ac0:	464c      	mov	r4, r9
 8001ac2:	431c      	orrs	r4, r3
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x1e4>
 8001ac6:	e1c7      	b.n	8001e58 <__aeabi_dsub+0x574>
 8001ac8:	4661      	mov	r1, ip
 8001aca:	1e4c      	subs	r4, r1, #1
 8001acc:	2901      	cmp	r1, #1
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x1ee>
 8001ad0:	e223      	b.n	8001f1a <__aeabi_dsub+0x636>
 8001ad2:	4d5e      	ldr	r5, [pc, #376]	; (8001c4c <__aeabi_dsub+0x368>)
 8001ad4:	45ac      	cmp	ip, r5
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x1f6>
 8001ad8:	e1d8      	b.n	8001e8c <__aeabi_dsub+0x5a8>
 8001ada:	46a4      	mov	ip, r4
 8001adc:	e11a      	b.n	8001d14 <__aeabi_dsub+0x430>
 8001ade:	003a      	movs	r2, r7
 8001ae0:	4302      	orrs	r2, r0
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x202>
 8001ae4:	e0e4      	b.n	8001cb0 <__aeabi_dsub+0x3cc>
 8001ae6:	0022      	movs	r2, r4
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	2c01      	cmp	r4, #1
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x20c>
 8001aee:	e1c3      	b.n	8001e78 <__aeabi_dsub+0x594>
 8001af0:	4956      	ldr	r1, [pc, #344]	; (8001c4c <__aeabi_dsub+0x368>)
 8001af2:	428c      	cmp	r4, r1
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x214>
 8001af6:	e0b1      	b.n	8001c5c <__aeabi_dsub+0x378>
 8001af8:	4694      	mov	ip, r2
 8001afa:	e72b      	b.n	8001954 <__aeabi_dsub+0x70>
 8001afc:	2401      	movs	r4, #1
 8001afe:	4061      	eors	r1, r4
 8001b00:	468b      	mov	fp, r1
 8001b02:	428d      	cmp	r5, r1
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x224>
 8001b06:	e716      	b.n	8001936 <__aeabi_dsub+0x52>
 8001b08:	4952      	ldr	r1, [pc, #328]	; (8001c54 <__aeabi_dsub+0x370>)
 8001b0a:	468c      	mov	ip, r1
 8001b0c:	44b4      	add	ip, r6
 8001b0e:	4664      	mov	r4, ip
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x232>
 8001b14:	e0d3      	b.n	8001cbe <__aeabi_dsub+0x3da>
 8001b16:	1b91      	subs	r1, r2, r6
 8001b18:	468c      	mov	ip, r1
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x23c>
 8001b1e:	e15e      	b.n	8001dde <__aeabi_dsub+0x4fa>
 8001b20:	494a      	ldr	r1, [pc, #296]	; (8001c4c <__aeabi_dsub+0x368>)
 8001b22:	428a      	cmp	r2, r1
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x244>
 8001b26:	e1be      	b.n	8001ea6 <__aeabi_dsub+0x5c2>
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	464c      	mov	r4, r9
 8001b2c:	0409      	lsls	r1, r1, #16
 8001b2e:	430c      	orrs	r4, r1
 8001b30:	46a1      	mov	r9, r4
 8001b32:	4661      	mov	r1, ip
 8001b34:	2938      	cmp	r1, #56	; 0x38
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dsub+0x256>
 8001b38:	e1ba      	b.n	8001eb0 <__aeabi_dsub+0x5cc>
 8001b3a:	291f      	cmp	r1, #31
 8001b3c:	dd00      	ble.n	8001b40 <__aeabi_dsub+0x25c>
 8001b3e:	e227      	b.n	8001f90 <__aeabi_dsub+0x6ac>
 8001b40:	2420      	movs	r4, #32
 8001b42:	1a64      	subs	r4, r4, r1
 8001b44:	4649      	mov	r1, r9
 8001b46:	40a1      	lsls	r1, r4
 8001b48:	001e      	movs	r6, r3
 8001b4a:	4688      	mov	r8, r1
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	40a3      	lsls	r3, r4
 8001b50:	40ce      	lsrs	r6, r1
 8001b52:	4641      	mov	r1, r8
 8001b54:	1e5c      	subs	r4, r3, #1
 8001b56:	41a3      	sbcs	r3, r4
 8001b58:	4331      	orrs	r1, r6
 8001b5a:	4319      	orrs	r1, r3
 8001b5c:	000c      	movs	r4, r1
 8001b5e:	4663      	mov	r3, ip
 8001b60:	4649      	mov	r1, r9
 8001b62:	40d9      	lsrs	r1, r3
 8001b64:	187f      	adds	r7, r7, r1
 8001b66:	1824      	adds	r4, r4, r0
 8001b68:	4284      	cmp	r4, r0
 8001b6a:	419b      	sbcs	r3, r3
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	469a      	mov	sl, r3
 8001b70:	0016      	movs	r6, r2
 8001b72:	44ba      	add	sl, r7
 8001b74:	e05d      	b.n	8001c32 <__aeabi_dsub+0x34e>
 8001b76:	4c38      	ldr	r4, [pc, #224]	; (8001c58 <__aeabi_dsub+0x374>)
 8001b78:	1c72      	adds	r2, r6, #1
 8001b7a:	4222      	tst	r2, r4
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dsub+0x29c>
 8001b7e:	e0df      	b.n	8001d40 <__aeabi_dsub+0x45c>
 8001b80:	464a      	mov	r2, r9
 8001b82:	431a      	orrs	r2, r3
 8001b84:	2e00      	cmp	r6, #0
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x2a6>
 8001b88:	e15c      	b.n	8001e44 <__aeabi_dsub+0x560>
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2ac>
 8001b8e:	e1cf      	b.n	8001f30 <__aeabi_dsub+0x64c>
 8001b90:	003a      	movs	r2, r7
 8001b92:	4302      	orrs	r2, r0
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x2b4>
 8001b96:	e17f      	b.n	8001e98 <__aeabi_dsub+0x5b4>
 8001b98:	1a1c      	subs	r4, r3, r0
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	42a3      	cmp	r3, r4
 8001b9e:	4189      	sbcs	r1, r1
 8001ba0:	1bd2      	subs	r2, r2, r7
 8001ba2:	4249      	negs	r1, r1
 8001ba4:	1a52      	subs	r2, r2, r1
 8001ba6:	4692      	mov	sl, r2
 8001ba8:	0212      	lsls	r2, r2, #8
 8001baa:	d400      	bmi.n	8001bae <__aeabi_dsub+0x2ca>
 8001bac:	e20a      	b.n	8001fc4 <__aeabi_dsub+0x6e0>
 8001bae:	1ac4      	subs	r4, r0, r3
 8001bb0:	42a0      	cmp	r0, r4
 8001bb2:	4180      	sbcs	r0, r0
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	1aff      	subs	r7, r7, r3
 8001bba:	1a3b      	subs	r3, r7, r0
 8001bbc:	469a      	mov	sl, r3
 8001bbe:	465d      	mov	r5, fp
 8001bc0:	e71a      	b.n	80019f8 <__aeabi_dsub+0x114>
 8001bc2:	003a      	movs	r2, r7
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	d073      	beq.n	8001cb0 <__aeabi_dsub+0x3cc>
 8001bc8:	0022      	movs	r2, r4
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	2c01      	cmp	r4, #1
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x2ee>
 8001bd0:	e0cb      	b.n	8001d6a <__aeabi_dsub+0x486>
 8001bd2:	4554      	cmp	r4, sl
 8001bd4:	d042      	beq.n	8001c5c <__aeabi_dsub+0x378>
 8001bd6:	4694      	mov	ip, r2
 8001bd8:	e748      	b.n	8001a6c <__aeabi_dsub+0x188>
 8001bda:	0010      	movs	r0, r2
 8001bdc:	3b1f      	subs	r3, #31
 8001bde:	40d8      	lsrs	r0, r3
 8001be0:	2920      	cmp	r1, #32
 8001be2:	d003      	beq.n	8001bec <__aeabi_dsub+0x308>
 8001be4:	2340      	movs	r3, #64	; 0x40
 8001be6:	1a5b      	subs	r3, r3, r1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	4314      	orrs	r4, r2
 8001bec:	1e63      	subs	r3, r4, #1
 8001bee:	419c      	sbcs	r4, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	469a      	mov	sl, r3
 8001bf6:	4304      	orrs	r4, r0
 8001bf8:	0763      	lsls	r3, r4, #29
 8001bfa:	d000      	beq.n	8001bfe <__aeabi_dsub+0x31a>
 8001bfc:	e6fe      	b.n	80019fc <__aeabi_dsub+0x118>
 8001bfe:	4652      	mov	r2, sl
 8001c00:	08e3      	lsrs	r3, r4, #3
 8001c02:	0752      	lsls	r2, r2, #29
 8001c04:	4313      	orrs	r3, r2
 8001c06:	4652      	mov	r2, sl
 8001c08:	46b4      	mov	ip, r6
 8001c0a:	08d2      	lsrs	r2, r2, #3
 8001c0c:	490f      	ldr	r1, [pc, #60]	; (8001c4c <__aeabi_dsub+0x368>)
 8001c0e:	458c      	cmp	ip, r1
 8001c10:	d02a      	beq.n	8001c68 <__aeabi_dsub+0x384>
 8001c12:	0312      	lsls	r2, r2, #12
 8001c14:	0b14      	lsrs	r4, r2, #12
 8001c16:	4662      	mov	r2, ip
 8001c18:	0552      	lsls	r2, r2, #21
 8001c1a:	0d52      	lsrs	r2, r2, #21
 8001c1c:	e70c      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001c1e:	003c      	movs	r4, r7
 8001c20:	4304      	orrs	r4, r0
 8001c22:	1e62      	subs	r2, r4, #1
 8001c24:	4194      	sbcs	r4, r2
 8001c26:	18e4      	adds	r4, r4, r3
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	4192      	sbcs	r2, r2
 8001c2c:	4252      	negs	r2, r2
 8001c2e:	444a      	add	r2, r9
 8001c30:	4692      	mov	sl, r2
 8001c32:	4653      	mov	r3, sl
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	d5df      	bpl.n	8001bf8 <__aeabi_dsub+0x314>
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__aeabi_dsub+0x368>)
 8001c3a:	3601      	adds	r6, #1
 8001c3c:	429e      	cmp	r6, r3
 8001c3e:	d000      	beq.n	8001c42 <__aeabi_dsub+0x35e>
 8001c40:	e0a0      	b.n	8001d84 <__aeabi_dsub+0x4a0>
 8001c42:	0032      	movs	r2, r6
 8001c44:	2400      	movs	r4, #0
 8001c46:	2300      	movs	r3, #0
 8001c48:	e6f6      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	000007ff 	.word	0x000007ff
 8001c50:	ff7fffff 	.word	0xff7fffff
 8001c54:	fffff801 	.word	0xfffff801
 8001c58:	000007fe 	.word	0x000007fe
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	464a      	mov	r2, r9
 8001c60:	0752      	lsls	r2, r2, #29
 8001c62:	4313      	orrs	r3, r2
 8001c64:	464a      	mov	r2, r9
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	0019      	movs	r1, r3
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x38c>
 8001c6e:	e1b5      	b.n	8001fdc <__aeabi_dsub+0x6f8>
 8001c70:	2480      	movs	r4, #128	; 0x80
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4314      	orrs	r4, r2
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	4ad5      	ldr	r2, [pc, #852]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e6dc      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001c7e:	0020      	movs	r0, r4
 8001c80:	f000 fa60 	bl	8002144 <__clzsi2>
 8001c84:	0003      	movs	r3, r0
 8001c86:	3318      	adds	r3, #24
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	dc00      	bgt.n	8001c8e <__aeabi_dsub+0x3aa>
 8001c8c:	e695      	b.n	80019ba <__aeabi_dsub+0xd6>
 8001c8e:	0022      	movs	r2, r4
 8001c90:	3808      	subs	r0, #8
 8001c92:	4082      	lsls	r2, r0
 8001c94:	2400      	movs	r4, #0
 8001c96:	429e      	cmp	r6, r3
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x3b8>
 8001c9a:	e69a      	b.n	80019d2 <__aeabi_dsub+0xee>
 8001c9c:	1af6      	subs	r6, r6, r3
 8001c9e:	4bcd      	ldr	r3, [pc, #820]	; (8001fd4 <__aeabi_dsub+0x6f0>)
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	e6a8      	b.n	80019f8 <__aeabi_dsub+0x114>
 8001ca6:	003c      	movs	r4, r7
 8001ca8:	4304      	orrs	r4, r0
 8001caa:	1e62      	subs	r2, r4, #1
 8001cac:	4194      	sbcs	r4, r2
 8001cae:	e66c      	b.n	800198a <__aeabi_dsub+0xa6>
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	0752      	lsls	r2, r2, #29
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	464a      	mov	r2, r9
 8001cba:	08d2      	lsrs	r2, r2, #3
 8001cbc:	e7a6      	b.n	8001c0c <__aeabi_dsub+0x328>
 8001cbe:	4cc6      	ldr	r4, [pc, #792]	; (8001fd8 <__aeabi_dsub+0x6f4>)
 8001cc0:	1c72      	adds	r2, r6, #1
 8001cc2:	4222      	tst	r2, r4
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x3e4>
 8001cc6:	e0ac      	b.n	8001e22 <__aeabi_dsub+0x53e>
 8001cc8:	464a      	mov	r2, r9
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	2e00      	cmp	r6, #0
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dsub+0x3ee>
 8001cd0:	e105      	b.n	8001ede <__aeabi_dsub+0x5fa>
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x3f4>
 8001cd6:	e156      	b.n	8001f86 <__aeabi_dsub+0x6a2>
 8001cd8:	003a      	movs	r2, r7
 8001cda:	4302      	orrs	r2, r0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x3fc>
 8001cde:	e0db      	b.n	8001e98 <__aeabi_dsub+0x5b4>
 8001ce0:	181c      	adds	r4, r3, r0
 8001ce2:	429c      	cmp	r4, r3
 8001ce4:	419b      	sbcs	r3, r3
 8001ce6:	444f      	add	r7, r9
 8001ce8:	46ba      	mov	sl, r7
 8001cea:	425b      	negs	r3, r3
 8001cec:	449a      	add	sl, r3
 8001cee:	4653      	mov	r3, sl
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	d400      	bmi.n	8001cf6 <__aeabi_dsub+0x412>
 8001cf4:	e780      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	4bb6      	ldr	r3, [pc, #728]	; (8001fd4 <__aeabi_dsub+0x6f0>)
 8001cfa:	2601      	movs	r6, #1
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	4692      	mov	sl, r2
 8001d00:	e77a      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001d02:	4cb3      	ldr	r4, [pc, #716]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001d04:	42a2      	cmp	r2, r4
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x426>
 8001d08:	e0c0      	b.n	8001e8c <__aeabi_dsub+0x5a8>
 8001d0a:	2480      	movs	r4, #128	; 0x80
 8001d0c:	464d      	mov	r5, r9
 8001d0e:	0424      	lsls	r4, r4, #16
 8001d10:	4325      	orrs	r5, r4
 8001d12:	46a9      	mov	r9, r5
 8001d14:	4664      	mov	r4, ip
 8001d16:	2c38      	cmp	r4, #56	; 0x38
 8001d18:	dc53      	bgt.n	8001dc2 <__aeabi_dsub+0x4de>
 8001d1a:	4661      	mov	r1, ip
 8001d1c:	2c1f      	cmp	r4, #31
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_dsub+0x43e>
 8001d20:	e0cd      	b.n	8001ebe <__aeabi_dsub+0x5da>
 8001d22:	2520      	movs	r5, #32
 8001d24:	001e      	movs	r6, r3
 8001d26:	1b2d      	subs	r5, r5, r4
 8001d28:	464c      	mov	r4, r9
 8001d2a:	40ab      	lsls	r3, r5
 8001d2c:	40ac      	lsls	r4, r5
 8001d2e:	40ce      	lsrs	r6, r1
 8001d30:	1e5d      	subs	r5, r3, #1
 8001d32:	41ab      	sbcs	r3, r5
 8001d34:	4334      	orrs	r4, r6
 8001d36:	4323      	orrs	r3, r4
 8001d38:	464c      	mov	r4, r9
 8001d3a:	40cc      	lsrs	r4, r1
 8001d3c:	1b3f      	subs	r7, r7, r4
 8001d3e:	e045      	b.n	8001dcc <__aeabi_dsub+0x4e8>
 8001d40:	464a      	mov	r2, r9
 8001d42:	1a1c      	subs	r4, r3, r0
 8001d44:	1bd1      	subs	r1, r2, r7
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	4192      	sbcs	r2, r2
 8001d4a:	4252      	negs	r2, r2
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4651      	mov	r1, sl
 8001d52:	1a52      	subs	r2, r2, r1
 8001d54:	4692      	mov	sl, r2
 8001d56:	0212      	lsls	r2, r2, #8
 8001d58:	d500      	bpl.n	8001d5c <__aeabi_dsub+0x478>
 8001d5a:	e083      	b.n	8001e64 <__aeabi_dsub+0x580>
 8001d5c:	4653      	mov	r3, sl
 8001d5e:	4323      	orrs	r3, r4
 8001d60:	d000      	beq.n	8001d64 <__aeabi_dsub+0x480>
 8001d62:	e621      	b.n	80019a8 <__aeabi_dsub+0xc4>
 8001d64:	2200      	movs	r2, #0
 8001d66:	2500      	movs	r5, #0
 8001d68:	e753      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001d6a:	181c      	adds	r4, r3, r0
 8001d6c:	429c      	cmp	r4, r3
 8001d6e:	419b      	sbcs	r3, r3
 8001d70:	444f      	add	r7, r9
 8001d72:	46ba      	mov	sl, r7
 8001d74:	425b      	negs	r3, r3
 8001d76:	449a      	add	sl, r3
 8001d78:	4653      	mov	r3, sl
 8001d7a:	2601      	movs	r6, #1
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	d400      	bmi.n	8001d82 <__aeabi_dsub+0x49e>
 8001d80:	e73a      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001d82:	2602      	movs	r6, #2
 8001d84:	4652      	mov	r2, sl
 8001d86:	4b93      	ldr	r3, [pc, #588]	; (8001fd4 <__aeabi_dsub+0x6f0>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	4021      	ands	r1, r4
 8001d90:	0862      	lsrs	r2, r4, #1
 8001d92:	430a      	orrs	r2, r1
 8001d94:	07dc      	lsls	r4, r3, #31
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	469a      	mov	sl, r3
 8001d9a:	4314      	orrs	r4, r2
 8001d9c:	e62c      	b.n	80019f8 <__aeabi_dsub+0x114>
 8001d9e:	0039      	movs	r1, r7
 8001da0:	3a20      	subs	r2, #32
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4662      	mov	r2, ip
 8001da6:	2a20      	cmp	r2, #32
 8001da8:	d006      	beq.n	8001db8 <__aeabi_dsub+0x4d4>
 8001daa:	4664      	mov	r4, ip
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	1b12      	subs	r2, r2, r4
 8001db0:	003c      	movs	r4, r7
 8001db2:	4094      	lsls	r4, r2
 8001db4:	4304      	orrs	r4, r0
 8001db6:	9401      	str	r4, [sp, #4]
 8001db8:	9c01      	ldr	r4, [sp, #4]
 8001dba:	1e62      	subs	r2, r4, #1
 8001dbc:	4194      	sbcs	r4, r2
 8001dbe:	430c      	orrs	r4, r1
 8001dc0:	e5e3      	b.n	800198a <__aeabi_dsub+0xa6>
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	4319      	orrs	r1, r3
 8001dc6:	000b      	movs	r3, r1
 8001dc8:	1e5c      	subs	r4, r3, #1
 8001dca:	41a3      	sbcs	r3, r4
 8001dcc:	1ac4      	subs	r4, r0, r3
 8001dce:	42a0      	cmp	r0, r4
 8001dd0:	419b      	sbcs	r3, r3
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	1afb      	subs	r3, r7, r3
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	0016      	movs	r6, r2
 8001ddc:	e5dc      	b.n	8001998 <__aeabi_dsub+0xb4>
 8001dde:	4649      	mov	r1, r9
 8001de0:	4319      	orrs	r1, r3
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x502>
 8001de4:	e0ae      	b.n	8001f44 <__aeabi_dsub+0x660>
 8001de6:	4661      	mov	r1, ip
 8001de8:	4664      	mov	r4, ip
 8001dea:	3901      	subs	r1, #1
 8001dec:	2c01      	cmp	r4, #1
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x50e>
 8001df0:	e0e0      	b.n	8001fb4 <__aeabi_dsub+0x6d0>
 8001df2:	4c77      	ldr	r4, [pc, #476]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001df4:	45a4      	cmp	ip, r4
 8001df6:	d056      	beq.n	8001ea6 <__aeabi_dsub+0x5c2>
 8001df8:	468c      	mov	ip, r1
 8001dfa:	e69a      	b.n	8001b32 <__aeabi_dsub+0x24e>
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	2220      	movs	r2, #32
 8001e00:	003c      	movs	r4, r7
 8001e02:	1a52      	subs	r2, r2, r1
 8001e04:	4094      	lsls	r4, r2
 8001e06:	0001      	movs	r1, r0
 8001e08:	4090      	lsls	r0, r2
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	4664      	mov	r4, ip
 8001e0e:	1e42      	subs	r2, r0, #1
 8001e10:	4190      	sbcs	r0, r2
 8001e12:	4662      	mov	r2, ip
 8001e14:	40e1      	lsrs	r1, r4
 8001e16:	4644      	mov	r4, r8
 8001e18:	40d7      	lsrs	r7, r2
 8001e1a:	430c      	orrs	r4, r1
 8001e1c:	4304      	orrs	r4, r0
 8001e1e:	44b9      	add	r9, r7
 8001e20:	e701      	b.n	8001c26 <__aeabi_dsub+0x342>
 8001e22:	496b      	ldr	r1, [pc, #428]	; (8001fd0 <__aeabi_dsub+0x6ec>)
 8001e24:	428a      	cmp	r2, r1
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x546>
 8001e28:	e70c      	b.n	8001c44 <__aeabi_dsub+0x360>
 8001e2a:	1818      	adds	r0, r3, r0
 8001e2c:	4298      	cmp	r0, r3
 8001e2e:	419b      	sbcs	r3, r3
 8001e30:	444f      	add	r7, r9
 8001e32:	425b      	negs	r3, r3
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	07dc      	lsls	r4, r3, #31
 8001e38:	0840      	lsrs	r0, r0, #1
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	469a      	mov	sl, r3
 8001e3e:	0016      	movs	r6, r2
 8001e40:	4304      	orrs	r4, r0
 8001e42:	e6d9      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d000      	beq.n	8001e4a <__aeabi_dsub+0x566>
 8001e48:	e081      	b.n	8001f4e <__aeabi_dsub+0x66a>
 8001e4a:	003b      	movs	r3, r7
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	d11d      	bne.n	8001e8c <__aeabi_dsub+0x5a8>
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	2500      	movs	r5, #0
 8001e54:	0312      	lsls	r2, r2, #12
 8001e56:	e70b      	b.n	8001c70 <__aeabi_dsub+0x38c>
 8001e58:	08c0      	lsrs	r0, r0, #3
 8001e5a:	077b      	lsls	r3, r7, #29
 8001e5c:	465d      	mov	r5, fp
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	08fa      	lsrs	r2, r7, #3
 8001e62:	e6d3      	b.n	8001c0c <__aeabi_dsub+0x328>
 8001e64:	1ac4      	subs	r4, r0, r3
 8001e66:	42a0      	cmp	r0, r4
 8001e68:	4180      	sbcs	r0, r0
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	4240      	negs	r0, r0
 8001e6e:	1aff      	subs	r7, r7, r3
 8001e70:	1a3b      	subs	r3, r7, r0
 8001e72:	469a      	mov	sl, r3
 8001e74:	465d      	mov	r5, fp
 8001e76:	e597      	b.n	80019a8 <__aeabi_dsub+0xc4>
 8001e78:	1a1c      	subs	r4, r3, r0
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	419b      	sbcs	r3, r3
 8001e80:	1bd7      	subs	r7, r2, r7
 8001e82:	425b      	negs	r3, r3
 8001e84:	1afb      	subs	r3, r7, r3
 8001e86:	469a      	mov	sl, r3
 8001e88:	2601      	movs	r6, #1
 8001e8a:	e585      	b.n	8001998 <__aeabi_dsub+0xb4>
 8001e8c:	08c0      	lsrs	r0, r0, #3
 8001e8e:	077b      	lsls	r3, r7, #29
 8001e90:	465d      	mov	r5, fp
 8001e92:	4303      	orrs	r3, r0
 8001e94:	08fa      	lsrs	r2, r7, #3
 8001e96:	e6e7      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	0752      	lsls	r2, r2, #29
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	08d2      	lsrs	r2, r2, #3
 8001ea4:	e6b5      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001ea6:	08c0      	lsrs	r0, r0, #3
 8001ea8:	077b      	lsls	r3, r7, #29
 8001eaa:	4303      	orrs	r3, r0
 8001eac:	08fa      	lsrs	r2, r7, #3
 8001eae:	e6db      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	4319      	orrs	r1, r3
 8001eb4:	000b      	movs	r3, r1
 8001eb6:	1e59      	subs	r1, r3, #1
 8001eb8:	418b      	sbcs	r3, r1
 8001eba:	001c      	movs	r4, r3
 8001ebc:	e653      	b.n	8001b66 <__aeabi_dsub+0x282>
 8001ebe:	464d      	mov	r5, r9
 8001ec0:	3c20      	subs	r4, #32
 8001ec2:	40e5      	lsrs	r5, r4
 8001ec4:	2920      	cmp	r1, #32
 8001ec6:	d005      	beq.n	8001ed4 <__aeabi_dsub+0x5f0>
 8001ec8:	2440      	movs	r4, #64	; 0x40
 8001eca:	1a64      	subs	r4, r4, r1
 8001ecc:	4649      	mov	r1, r9
 8001ece:	40a1      	lsls	r1, r4
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	1e5c      	subs	r4, r3, #1
 8001ed8:	41a3      	sbcs	r3, r4
 8001eda:	432b      	orrs	r3, r5
 8001edc:	e776      	b.n	8001dcc <__aeabi_dsub+0x4e8>
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d0e1      	beq.n	8001ea6 <__aeabi_dsub+0x5c2>
 8001ee2:	003a      	movs	r2, r7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	4302      	orrs	r2, r0
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x608>
 8001eea:	e6b8      	b.n	8001c5e <__aeabi_dsub+0x37a>
 8001eec:	464a      	mov	r2, r9
 8001eee:	0752      	lsls	r2, r2, #29
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	0324      	lsls	r4, r4, #12
 8001ef8:	08d2      	lsrs	r2, r2, #3
 8001efa:	4222      	tst	r2, r4
 8001efc:	d007      	beq.n	8001f0e <__aeabi_dsub+0x62a>
 8001efe:	08fe      	lsrs	r6, r7, #3
 8001f00:	4226      	tst	r6, r4
 8001f02:	d104      	bne.n	8001f0e <__aeabi_dsub+0x62a>
 8001f04:	465d      	mov	r5, fp
 8001f06:	0032      	movs	r2, r6
 8001f08:	08c3      	lsrs	r3, r0, #3
 8001f0a:	077f      	lsls	r7, r7, #29
 8001f0c:	433b      	orrs	r3, r7
 8001f0e:	0f59      	lsrs	r1, r3, #29
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	0749      	lsls	r1, r1, #29
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	430b      	orrs	r3, r1
 8001f18:	e6a6      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001f1a:	1ac4      	subs	r4, r0, r3
 8001f1c:	42a0      	cmp	r0, r4
 8001f1e:	4180      	sbcs	r0, r0
 8001f20:	464b      	mov	r3, r9
 8001f22:	4240      	negs	r0, r0
 8001f24:	1aff      	subs	r7, r7, r3
 8001f26:	1a3b      	subs	r3, r7, r0
 8001f28:	469a      	mov	sl, r3
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	2601      	movs	r6, #1
 8001f2e:	e533      	b.n	8001998 <__aeabi_dsub+0xb4>
 8001f30:	003b      	movs	r3, r7
 8001f32:	4303      	orrs	r3, r0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x654>
 8001f36:	e715      	b.n	8001d64 <__aeabi_dsub+0x480>
 8001f38:	08c0      	lsrs	r0, r0, #3
 8001f3a:	077b      	lsls	r3, r7, #29
 8001f3c:	465d      	mov	r5, fp
 8001f3e:	4303      	orrs	r3, r0
 8001f40:	08fa      	lsrs	r2, r7, #3
 8001f42:	e666      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001f44:	08c0      	lsrs	r0, r0, #3
 8001f46:	077b      	lsls	r3, r7, #29
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	08fa      	lsrs	r2, r7, #3
 8001f4c:	e65e      	b.n	8001c0c <__aeabi_dsub+0x328>
 8001f4e:	003a      	movs	r2, r7
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	4302      	orrs	r2, r0
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x674>
 8001f56:	e682      	b.n	8001c5e <__aeabi_dsub+0x37a>
 8001f58:	464a      	mov	r2, r9
 8001f5a:	0752      	lsls	r2, r2, #29
 8001f5c:	2480      	movs	r4, #128	; 0x80
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	464a      	mov	r2, r9
 8001f62:	0324      	lsls	r4, r4, #12
 8001f64:	08d2      	lsrs	r2, r2, #3
 8001f66:	4222      	tst	r2, r4
 8001f68:	d007      	beq.n	8001f7a <__aeabi_dsub+0x696>
 8001f6a:	08fe      	lsrs	r6, r7, #3
 8001f6c:	4226      	tst	r6, r4
 8001f6e:	d104      	bne.n	8001f7a <__aeabi_dsub+0x696>
 8001f70:	465d      	mov	r5, fp
 8001f72:	0032      	movs	r2, r6
 8001f74:	08c3      	lsrs	r3, r0, #3
 8001f76:	077f      	lsls	r7, r7, #29
 8001f78:	433b      	orrs	r3, r7
 8001f7a:	0f59      	lsrs	r1, r3, #29
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	0749      	lsls	r1, r1, #29
 8001f82:	430b      	orrs	r3, r1
 8001f84:	e670      	b.n	8001c68 <__aeabi_dsub+0x384>
 8001f86:	08c0      	lsrs	r0, r0, #3
 8001f88:	077b      	lsls	r3, r7, #29
 8001f8a:	4303      	orrs	r3, r0
 8001f8c:	08fa      	lsrs	r2, r7, #3
 8001f8e:	e640      	b.n	8001c12 <__aeabi_dsub+0x32e>
 8001f90:	464c      	mov	r4, r9
 8001f92:	3920      	subs	r1, #32
 8001f94:	40cc      	lsrs	r4, r1
 8001f96:	4661      	mov	r1, ip
 8001f98:	2920      	cmp	r1, #32
 8001f9a:	d006      	beq.n	8001faa <__aeabi_dsub+0x6c6>
 8001f9c:	4666      	mov	r6, ip
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	1b89      	subs	r1, r1, r6
 8001fa2:	464e      	mov	r6, r9
 8001fa4:	408e      	lsls	r6, r1
 8001fa6:	4333      	orrs	r3, r6
 8001fa8:	4698      	mov	r8, r3
 8001faa:	4643      	mov	r3, r8
 8001fac:	1e59      	subs	r1, r3, #1
 8001fae:	418b      	sbcs	r3, r1
 8001fb0:	431c      	orrs	r4, r3
 8001fb2:	e5d8      	b.n	8001b66 <__aeabi_dsub+0x282>
 8001fb4:	181c      	adds	r4, r3, r0
 8001fb6:	4284      	cmp	r4, r0
 8001fb8:	4180      	sbcs	r0, r0
 8001fba:	444f      	add	r7, r9
 8001fbc:	46ba      	mov	sl, r7
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	4482      	add	sl, r0
 8001fc2:	e6d9      	b.n	8001d78 <__aeabi_dsub+0x494>
 8001fc4:	4653      	mov	r3, sl
 8001fc6:	4323      	orrs	r3, r4
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x6e8>
 8001fca:	e6cb      	b.n	8001d64 <__aeabi_dsub+0x480>
 8001fcc:	e614      	b.n	8001bf8 <__aeabi_dsub+0x314>
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	000007ff 	.word	0x000007ff
 8001fd4:	ff7fffff 	.word	0xff7fffff
 8001fd8:	000007fe 	.word	0x000007fe
 8001fdc:	2300      	movs	r3, #0
 8001fde:	4a01      	ldr	r2, [pc, #4]	; (8001fe4 <__aeabi_dsub+0x700>)
 8001fe0:	001c      	movs	r4, r3
 8001fe2:	e529      	b.n	8001a38 <__aeabi_dsub+0x154>
 8001fe4:	000007ff 	.word	0x000007ff

08001fe8 <__aeabi_d2iz>:
 8001fe8:	000a      	movs	r2, r1
 8001fea:	b530      	push	{r4, r5, lr}
 8001fec:	4c13      	ldr	r4, [pc, #76]	; (800203c <__aeabi_d2iz+0x54>)
 8001fee:	0053      	lsls	r3, r2, #1
 8001ff0:	0309      	lsls	r1, r1, #12
 8001ff2:	0005      	movs	r5, r0
 8001ff4:	0b09      	lsrs	r1, r1, #12
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	0d5b      	lsrs	r3, r3, #21
 8001ffa:	0fd2      	lsrs	r2, r2, #31
 8001ffc:	42a3      	cmp	r3, r4
 8001ffe:	dd04      	ble.n	800200a <__aeabi_d2iz+0x22>
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <__aeabi_d2iz+0x58>)
 8002002:	4283      	cmp	r3, r0
 8002004:	dd02      	ble.n	800200c <__aeabi_d2iz+0x24>
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <__aeabi_d2iz+0x5c>)
 8002008:	18d0      	adds	r0, r2, r3
 800200a:	bd30      	pop	{r4, r5, pc}
 800200c:	2080      	movs	r0, #128	; 0x80
 800200e:	0340      	lsls	r0, r0, #13
 8002010:	4301      	orrs	r1, r0
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <__aeabi_d2iz+0x60>)
 8002014:	1ac0      	subs	r0, r0, r3
 8002016:	281f      	cmp	r0, #31
 8002018:	dd08      	ble.n	800202c <__aeabi_d2iz+0x44>
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <__aeabi_d2iz+0x64>)
 800201c:	1ac3      	subs	r3, r0, r3
 800201e:	40d9      	lsrs	r1, r3
 8002020:	000b      	movs	r3, r1
 8002022:	4258      	negs	r0, r3
 8002024:	2a00      	cmp	r2, #0
 8002026:	d1f0      	bne.n	800200a <__aeabi_d2iz+0x22>
 8002028:	0018      	movs	r0, r3
 800202a:	e7ee      	b.n	800200a <__aeabi_d2iz+0x22>
 800202c:	4c08      	ldr	r4, [pc, #32]	; (8002050 <__aeabi_d2iz+0x68>)
 800202e:	40c5      	lsrs	r5, r0
 8002030:	46a4      	mov	ip, r4
 8002032:	4463      	add	r3, ip
 8002034:	4099      	lsls	r1, r3
 8002036:	000b      	movs	r3, r1
 8002038:	432b      	orrs	r3, r5
 800203a:	e7f2      	b.n	8002022 <__aeabi_d2iz+0x3a>
 800203c:	000003fe 	.word	0x000003fe
 8002040:	0000041d 	.word	0x0000041d
 8002044:	7fffffff 	.word	0x7fffffff
 8002048:	00000433 	.word	0x00000433
 800204c:	00000413 	.word	0x00000413
 8002050:	fffffbed 	.word	0xfffffbed

08002054 <__aeabi_i2d>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	2800      	cmp	r0, #0
 8002058:	d016      	beq.n	8002088 <__aeabi_i2d+0x34>
 800205a:	17c3      	asrs	r3, r0, #31
 800205c:	18c5      	adds	r5, r0, r3
 800205e:	405d      	eors	r5, r3
 8002060:	0fc4      	lsrs	r4, r0, #31
 8002062:	0028      	movs	r0, r5
 8002064:	f000 f86e 	bl	8002144 <__clzsi2>
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <__aeabi_i2d+0x5c>)
 800206a:	1a1b      	subs	r3, r3, r0
 800206c:	280a      	cmp	r0, #10
 800206e:	dc16      	bgt.n	800209e <__aeabi_i2d+0x4a>
 8002070:	0002      	movs	r2, r0
 8002072:	002e      	movs	r6, r5
 8002074:	3215      	adds	r2, #21
 8002076:	4096      	lsls	r6, r2
 8002078:	220b      	movs	r2, #11
 800207a:	1a12      	subs	r2, r2, r0
 800207c:	40d5      	lsrs	r5, r2
 800207e:	055b      	lsls	r3, r3, #21
 8002080:	032d      	lsls	r5, r5, #12
 8002082:	0b2d      	lsrs	r5, r5, #12
 8002084:	0d5b      	lsrs	r3, r3, #21
 8002086:	e003      	b.n	8002090 <__aeabi_i2d+0x3c>
 8002088:	2400      	movs	r4, #0
 800208a:	2300      	movs	r3, #0
 800208c:	2500      	movs	r5, #0
 800208e:	2600      	movs	r6, #0
 8002090:	051b      	lsls	r3, r3, #20
 8002092:	432b      	orrs	r3, r5
 8002094:	07e4      	lsls	r4, r4, #31
 8002096:	4323      	orrs	r3, r4
 8002098:	0030      	movs	r0, r6
 800209a:	0019      	movs	r1, r3
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	380b      	subs	r0, #11
 80020a0:	4085      	lsls	r5, r0
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	032d      	lsls	r5, r5, #12
 80020a6:	2600      	movs	r6, #0
 80020a8:	0b2d      	lsrs	r5, r5, #12
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	e7f0      	b.n	8002090 <__aeabi_i2d+0x3c>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	0000041e 	.word	0x0000041e

080020b4 <__aeabi_f2d>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	0242      	lsls	r2, r0, #9
 80020b8:	0043      	lsls	r3, r0, #1
 80020ba:	0fc4      	lsrs	r4, r0, #31
 80020bc:	20fe      	movs	r0, #254	; 0xfe
 80020be:	0e1b      	lsrs	r3, r3, #24
 80020c0:	1c59      	adds	r1, r3, #1
 80020c2:	0a55      	lsrs	r5, r2, #9
 80020c4:	4208      	tst	r0, r1
 80020c6:	d00c      	beq.n	80020e2 <__aeabi_f2d+0x2e>
 80020c8:	21e0      	movs	r1, #224	; 0xe0
 80020ca:	0089      	lsls	r1, r1, #2
 80020cc:	468c      	mov	ip, r1
 80020ce:	076d      	lsls	r5, r5, #29
 80020d0:	0b12      	lsrs	r2, r2, #12
 80020d2:	4463      	add	r3, ip
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	4313      	orrs	r3, r2
 80020d8:	07e4      	lsls	r4, r4, #31
 80020da:	4323      	orrs	r3, r4
 80020dc:	0028      	movs	r0, r5
 80020de:	0019      	movs	r1, r3
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d114      	bne.n	8002110 <__aeabi_f2d+0x5c>
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	d01b      	beq.n	8002122 <__aeabi_f2d+0x6e>
 80020ea:	0028      	movs	r0, r5
 80020ec:	f000 f82a 	bl	8002144 <__clzsi2>
 80020f0:	280a      	cmp	r0, #10
 80020f2:	dc1c      	bgt.n	800212e <__aeabi_f2d+0x7a>
 80020f4:	230b      	movs	r3, #11
 80020f6:	002a      	movs	r2, r5
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	0003      	movs	r3, r0
 80020fe:	3315      	adds	r3, #21
 8002100:	409d      	lsls	r5, r3
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <__aeabi_f2d+0x88>)
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	1a1b      	subs	r3, r3, r0
 8002108:	055b      	lsls	r3, r3, #21
 800210a:	0b12      	lsrs	r2, r2, #12
 800210c:	0d5b      	lsrs	r3, r3, #21
 800210e:	e7e1      	b.n	80020d4 <__aeabi_f2d+0x20>
 8002110:	2d00      	cmp	r5, #0
 8002112:	d009      	beq.n	8002128 <__aeabi_f2d+0x74>
 8002114:	0b13      	lsrs	r3, r2, #12
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	0312      	lsls	r2, r2, #12
 800211a:	431a      	orrs	r2, r3
 800211c:	076d      	lsls	r5, r5, #29
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <__aeabi_f2d+0x8c>)
 8002120:	e7d8      	b.n	80020d4 <__aeabi_f2d+0x20>
 8002122:	2300      	movs	r3, #0
 8002124:	2200      	movs	r2, #0
 8002126:	e7d5      	b.n	80020d4 <__aeabi_f2d+0x20>
 8002128:	2200      	movs	r2, #0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <__aeabi_f2d+0x8c>)
 800212c:	e7d2      	b.n	80020d4 <__aeabi_f2d+0x20>
 800212e:	0003      	movs	r3, r0
 8002130:	002a      	movs	r2, r5
 8002132:	3b0b      	subs	r3, #11
 8002134:	409a      	lsls	r2, r3
 8002136:	2500      	movs	r5, #0
 8002138:	e7e3      	b.n	8002102 <__aeabi_f2d+0x4e>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	00000389 	.word	0x00000389
 8002140:	000007ff 	.word	0x000007ff

08002144 <__clzsi2>:
 8002144:	211c      	movs	r1, #28
 8002146:	2301      	movs	r3, #1
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	4298      	cmp	r0, r3
 800214c:	d301      	bcc.n	8002152 <__clzsi2+0xe>
 800214e:	0c00      	lsrs	r0, r0, #16
 8002150:	3910      	subs	r1, #16
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	4298      	cmp	r0, r3
 8002156:	d301      	bcc.n	800215c <__clzsi2+0x18>
 8002158:	0a00      	lsrs	r0, r0, #8
 800215a:	3908      	subs	r1, #8
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	4298      	cmp	r0, r3
 8002160:	d301      	bcc.n	8002166 <__clzsi2+0x22>
 8002162:	0900      	lsrs	r0, r0, #4
 8002164:	3904      	subs	r1, #4
 8002166:	a202      	add	r2, pc, #8	; (adr r2, 8002170 <__clzsi2+0x2c>)
 8002168:	5c10      	ldrb	r0, [r2, r0]
 800216a:	1840      	adds	r0, r0, r1
 800216c:	4770      	bx	lr
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	02020304 	.word	0x02020304
 8002174:	01010101 	.word	0x01010101
	...

08002180 <linkThrottle>:
volatile uint16_t throttledPWMWidth=0;



// Initialization functions
static void linkThrottle(Throttle *throttle) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    throttle->reading = 0; // Initialize with default value
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}

08002196 <linkHallSensor>:

static void linkHallSensor(HallSensor *sensor) {
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    sensor->sector = 0; // Initialize with default value
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
    sensor->pins = HALL_SENSOR_PINS;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	22e0      	movs	r2, #224	; 0xe0
 80021a8:	705a      	strb	r2, [r3, #1]
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <linkComm>:

static void linkComm(Comm *comm) {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
    comm->ch = 0; // Initialize with default value
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <linkMotor>:

static void linkMotor(Motor *motor) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    motor->type = 0; // Initialize with default value
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
    motor->speed = 0; // Initialize with default value
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	805a      	strh	r2, [r3, #2]
    motor->spin_direction = PMSM_CW; // Initialize with default value
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	711a      	strb	r2, [r3, #4]
    motor->running_state = false; // Initialize with default value
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	715a      	strb	r2, [r3, #5]
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <linkDriveTimer>:

static void linkDriveTimer(DriveTimer *timer) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    // Initialize with default values if any
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <initController>:

void initController() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
    linkThrottle(&controller_t.throttle_t);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <initController+0x34>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff ffba 	bl	8002180 <linkThrottle>
    linkHallSensor(&controller_t.hall_sensor_t);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <initController+0x38>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7ff ffc1 	bl	8002196 <linkHallSensor>
    linkComm(&controller_t.uart_t);
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <initController+0x3c>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff ffcb 	bl	80021b2 <linkComm>
    linkMotor(&controller_t.motor_t);
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <initController+0x40>)
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ffd2 	bl	80021c8 <linkMotor>
    linkDriveTimer(&controller_t.drive_timer_t);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <initController+0x44>)
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ffe2 	bl	80021f0 <linkDriveTimer>
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20000028 	.word	0x20000028
 8002238:	2000002c 	.word	0x2000002c
 800223c:	2000002e 	.word	0x2000002e
 8002240:	20000030 	.word	0x20000030
 8002244:	20000036 	.word	0x20000036

08002248 <PMSM_Init>:
}

//defining functions

// Initialize of all needed peripheral
void PMSM_Init(void) {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	PMSM_MotorStop();
 800224c:	f000 f8cc 	bl	80023e8 <PMSM_MotorStop>
	PMSM_startPWMToYGB();
 8002250:	f000 f83a 	bl	80022c8 <PMSM_startPWMToYGB>
	PMSM_generateLookUpTable();
 8002254:	f000 f9a8 	bl	80025a8 <PMSM_generateLookUpTable>
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <getThrottleStartValue>:

uint16_t getThrottleStartValue(){
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
	return PMSM_ADC_START;
 8002262:	23c8      	movs	r3, #200	; 0xc8
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <getRotorSector>:

uint8_t getRotorSector(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	return (uint8_t)((GPIOB->IDR) & (HALL_SENSOR_PINS))>>5;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <getRotorSector+0x1c>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	115b      	asrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2207      	movs	r2, #7
 800227c:	4013      	ands	r3, r2
 800227e:	b2db      	uxtb	r3, r3
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	48000400 	.word	0x48000400

0800228c <PMSM_setPWMFreq>:
void sendToUART(char *st){
	HAL_UART_Transmit(&huart1,(uint8_t *)st,strlen(st),HAL_MAX_DELAY);
}
#endif

void PMSM_setPWMFreq(uint16_t sfreq){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	0002      	movs	r2, r0
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCounter(&htim1,sfreq);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <PMSM_setPWMFreq+0x20>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	1dba      	adds	r2, r7, #6
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	200004d4 	.word	0x200004d4

080022b0 <PMSM_getPWMFreq>:

uint16_t PMSM_getPWMFreq(uint16_t gfreq){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	0002      	movs	r2, r0
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	801a      	strh	r2, [r3, #0]
	//in futur, frequency calculation can be performed here 
	return gfreq;
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	881b      	ldrh	r3, [r3, #0]
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <PMSM_startPWMToYGB>:

void PMSM_startPWMToYGB(void){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	//setting frequency of PWM signal to the Motor
	PMSM_setPWMFreq(PMSM_getPWMFreq(PWM_PERIOD));
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <PMSM_startPWMToYGB+0x4c>)
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff ffee 	bl	80022b0 <PMSM_getPWMFreq>
 80022d4:	0003      	movs	r3, r0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7ff ffd8 	bl	800228c <PMSM_setPWMFreq>
	
	//putting all the phases in starting condition.
	TIM1->CCR1 = 0;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <PMSM_startPWMToYGB+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <PMSM_startPWMToYGB+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <PMSM_startPWMToYGB+0x50>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c
	
	//starting the PWM channels
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <PMSM_startPWMToYGB+0x54>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f002 f96a 	bl	80045cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <PMSM_startPWMToYGB+0x54>)
 80022fa:	2104      	movs	r1, #4
 80022fc:	0018      	movs	r0, r3
 80022fe:	f002 f965 	bl	80045cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <PMSM_startPWMToYGB+0x54>)
 8002304:	2108      	movs	r1, #8
 8002306:	0018      	movs	r0, r3
 8002308:	f002 f960 	bl	80045cc <HAL_TIM_PWM_Start>
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	00000b44 	.word	0x00000b44
 8002318:	40012c00 	.word	0x40012c00
 800231c:	200004d4 	.word	0x200004d4

08002320 <PMSM_ADCToPWM>:

// Transform ADC value to value for writing to the timer register
uint16_t PMSM_ADCToPWM(uint16_t ADC_VALUE) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	0002      	movs	r2, r0
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	801a      	strh	r2, [r3, #0]
	uint32_t tmp;

	if (ADC_VALUE < PMSM_ADC_STOP) {
 800232c:	2232      	movs	r2, #50	; 0x32
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	4293      	cmp	r3, r2
 8002334:	d201      	bcs.n	800233a <PMSM_ADCToPWM+0x1a>
		return 0;
 8002336:	2300      	movs	r3, #0
 8002338:	e01c      	b.n	8002374 <PMSM_ADCToPWM+0x54>
	} else {
		if (ADC_VALUE > PMSM_ADC_MAX) {
 800233a:	23fa      	movs	r3, #250	; 0xfa
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1dba      	adds	r2, r7, #6
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d903      	bls.n	800234e <PMSM_ADCToPWM+0x2e>
			return PWM_PERIOD+1;
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <PMSM_ADCToPWM+0x5c>)
 8002348:	3301      	adds	r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	e012      	b.n	8002374 <PMSM_ADCToPWM+0x54>
		}
		else {
			tmp = (uint32_t)(ADC_VALUE-PMSM_ADC_STOP) * (uint32_t)PWM_PERIOD / (uint32_t)(PMSM_ADC_MAX - PMSM_ADC_START);
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <PMSM_ADCToPWM+0x5c>)
 8002358:	4353      	muls	r3, r2
 800235a:	22fa      	movs	r2, #250	; 0xfa
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	0011      	movs	r1, r2
 8002360:	22c8      	movs	r2, #200	; 0xc8
 8002362:	1a8a      	subs	r2, r1, r2
 8002364:	0011      	movs	r1, r2
 8002366:	0018      	movs	r0, r3
 8002368:	f7fd fece 	bl	8000108 <__udivsi3>
 800236c:	0003      	movs	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]
			return (uint16_t) tmp;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	b29b      	uxth	r3, r3
		}
	}
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	00000b44 	.word	0x00000b44

08002380 <setMotorSpinDirection>:

void setMotorSpinDirection(uint8_t spin_direction) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	0002      	movs	r2, r0
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	701a      	strb	r2, [r3, #0]
	controller_t.motor_t.spin_direction = spin_direction;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <setMotorSpinDirection+0x1c>)
 800238e:	1dfa      	adds	r2, r7, #7
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	731a      	strb	r2, [r3, #12]
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000028 	.word	0x20000028

080023a0 <getMotorSpinDirection>:
uint8_t getMotorSpinDirection() {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	return controller_t.motor_t.spin_direction;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <getMotorSpinDirection+0x10>)
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000028 	.word	0x20000028

080023b4 <setMotorRunningState>:
void setMotorRunningState(bool running_state){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	0002      	movs	r2, r0
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	701a      	strb	r2, [r3, #0]
	controller_t.motor_t.running_state = running_state;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <setMotorRunningState+0x1c>)
 80023c2:	1dfa      	adds	r2, r7, #7
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	735a      	strb	r2, [r3, #13]
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000028 	.word	0x20000028

080023d4 <isMotorRunning>:
bool isMotorRunning(void){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	return (controller_t.motor_t.running_state == true);
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <isMotorRunning+0x10>)
 80023da:	7b5b      	ldrb	r3, [r3, #13]
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	20000028 	.word	0x20000028

080023e8 <PMSM_MotorStop>:
uint16_t PMSM_GetSpeed(void) {
	return PMSM_Speed;
}

// Stop a motor
void PMSM_MotorStop(void){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	
	//lower swithes
	//lower switches are already off right after the power in ON
	
	//stopping the timer
	__HAL_TIM_DISABLE(&htim14);
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <PMSM_MotorStop+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a0e      	ldr	r2, [pc, #56]	; (800242c <PMSM_MotorStop+0x44>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	d10d      	bne.n	8002414 <PMSM_MotorStop+0x2c>
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <PMSM_MotorStop+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <PMSM_MotorStop+0x48>)
 8002400:	4013      	ands	r3, r2
 8002402:	d107      	bne.n	8002414 <PMSM_MotorStop+0x2c>
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <PMSM_MotorStop+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <PMSM_MotorStop+0x40>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

	PMSM_Speed = 0;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <PMSM_MotorStop+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]
	setMotorRunningState(false);
 800241a:	2000      	movs	r0, #0
 800241c:	f7ff ffca 	bl	80023b4 <setMotorRunningState>
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	2000051c 	.word	0x2000051c
 800242c:	00001111 	.word	0x00001111
 8002430:	00000444 	.word	0x00000444
 8002434:	2000003e 	.word	0x2000003e

08002438 <BLDC_MotorCommutation>:

void BLDC_MotorCommutation(uint16_t hallpos){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	0002      	movs	r2, r0
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	801a      	strh	r2, [r3, #0]
	
	if (getMotorSpinDirection() == PMSM_CW) {
 8002444:	f7ff ffac 	bl	80023a0 <getMotorSpinDirection>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d10f      	bne.n	800246c <BLDC_MotorCommutation+0x34>
		memcpy(PMSM_STATE, PMSM_BRIDGE_STATE_FORWARD[hallpos], sizeof(PMSM_STATE));
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	0013      	movs	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	189b      	adds	r3, r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4a4d      	ldr	r2, [pc, #308]	; (8002590 <BLDC_MotorCommutation+0x158>)
 800245a:	189b      	adds	r3, r3, r2
 800245c:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800245e:	0010      	movs	r0, r2
 8002460:	0019      	movs	r1, r3
 8002462:	2306      	movs	r3, #6
 8002464:	001a      	movs	r2, r3
 8002466:	f003 fa91 	bl	800598c <memcpy>
 800246a:	e013      	b.n	8002494 <BLDC_MotorCommutation+0x5c>
	}else if(getMotorSpinDirection() == PMSM_CCW){
 800246c:	f7ff ff98 	bl	80023a0 <getMotorSpinDirection>
 8002470:	0003      	movs	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10e      	bne.n	8002494 <BLDC_MotorCommutation+0x5c>
		memcpy(PMSM_STATE, PMSM_BRIDGE_STATE_BACKWARD[hallpos], sizeof(PMSM_STATE));
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	0013      	movs	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	189b      	adds	r3, r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4a45      	ldr	r2, [pc, #276]	; (8002598 <BLDC_MotorCommutation+0x160>)
 8002484:	189b      	adds	r3, r3, r2
 8002486:	4a43      	ldr	r2, [pc, #268]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002488:	0010      	movs	r0, r2
 800248a:	0019      	movs	r1, r3
 800248c:	2306      	movs	r3, #6
 800248e:	001a      	movs	r2, r3
 8002490:	f003 fa7c 	bl	800598c <memcpy>
	}

	// Disable if need
	if (!PMSM_STATE[UH]) TIM1->CCR3=0;
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <BLDC_MotorCommutation+0x6a>
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <BLDC_MotorCommutation+0x164>)
 800249e:	2200      	movs	r2, #0
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
	if (!PMSM_STATE[UL]) GPIOB->BSRR = 0x0002;//Y
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <BLDC_MotorCommutation+0x78>
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 80024ac:	2202      	movs	r2, #2
 80024ae:	619a      	str	r2, [r3, #24]
	if (!PMSM_STATE[VH]) TIM1->CCR2=0;
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <BLDC_MotorCommutation+0x86>
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <BLDC_MotorCommutation+0x164>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
	if (!PMSM_STATE[VL]) GPIOB->BSRR = 0x0001;//G
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024c0:	78db      	ldrb	r3, [r3, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <BLDC_MotorCommutation+0x94>
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	619a      	str	r2, [r3, #24]
	if (!PMSM_STATE[WH]) TIM1->CCR1=0;
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <BLDC_MotorCommutation+0xa2>
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <BLDC_MotorCommutation+0x164>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	635a      	str	r2, [r3, #52]	; 0x34
	if (!PMSM_STATE[WL]) GPIOA->BSRR = 0x0080;//B
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024dc:	795b      	ldrb	r3, [r3, #5]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <BLDC_MotorCommutation+0xb2>
 80024e2:	2390      	movs	r3, #144	; 0x90
 80024e4:	05db      	lsls	r3, r3, #23
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	619a      	str	r2, [r3, #24]

	// Enable if need. If previous state is Enabled then not enable again. Else output do flip-flop.
	if (PMSM_STATE[UH] & !PMSM_STATE[UL]) { toUpdate = CH3; }
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	001a      	movs	r2, r3
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	4259      	negs	r1, r3
 80024f6:	414b      	adcs	r3, r1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d002      	beq.n	8002504 <BLDC_MotorCommutation+0xcc>
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <BLDC_MotorCommutation+0x16c>)
 8002500:	2203      	movs	r2, #3
 8002502:	801a      	strh	r2, [r3, #0]
	if (PMSM_STATE[UL] & !PMSM_STATE[UH]) GPIOB->BRR = 0x0002;//Y
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002506:	785b      	ldrb	r3, [r3, #1]
 8002508:	001a      	movs	r2, r3
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4259      	negs	r1, r3
 8002510:	414b      	adcs	r3, r1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4013      	ands	r3, r2
 8002516:	d002      	beq.n	800251e <BLDC_MotorCommutation+0xe6>
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 800251a:	2202      	movs	r2, #2
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
	if (PMSM_STATE[VH] & !PMSM_STATE[VL]) {	toUpdate = CH2; }
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002520:	789b      	ldrb	r3, [r3, #2]
 8002522:	001a      	movs	r2, r3
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002526:	78db      	ldrb	r3, [r3, #3]
 8002528:	4259      	negs	r1, r3
 800252a:	414b      	adcs	r3, r1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4013      	ands	r3, r2
 8002530:	d002      	beq.n	8002538 <BLDC_MotorCommutation+0x100>
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <BLDC_MotorCommutation+0x16c>)
 8002534:	2202      	movs	r2, #2
 8002536:	801a      	strh	r2, [r3, #0]
	if (PMSM_STATE[VL] & !PMSM_STATE[VH]) GPIOB->BRR = 0x0001;//G
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	001a      	movs	r2, r3
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002540:	789b      	ldrb	r3, [r3, #2]
 8002542:	4259      	negs	r1, r3
 8002544:	414b      	adcs	r3, r1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4013      	ands	r3, r2
 800254a:	d002      	beq.n	8002552 <BLDC_MotorCommutation+0x11a>
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <BLDC_MotorCommutation+0x168>)
 800254e:	2201      	movs	r2, #1
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
	if (PMSM_STATE[WH] & !PMSM_STATE[WL]) {	toUpdate = CH1; }
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	001a      	movs	r2, r3
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800255a:	795b      	ldrb	r3, [r3, #5]
 800255c:	4259      	negs	r1, r3
 800255e:	414b      	adcs	r3, r1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4013      	ands	r3, r2
 8002564:	d002      	beq.n	800256c <BLDC_MotorCommutation+0x134>
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <BLDC_MotorCommutation+0x16c>)
 8002568:	2201      	movs	r2, #1
 800256a:	801a      	strh	r2, [r3, #0]
	if (PMSM_STATE[WL] & !PMSM_STATE[WH]) GPIOA->BRR = 0x0080;//B
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 800256e:	795b      	ldrb	r3, [r3, #5]
 8002570:	001a      	movs	r2, r3
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <BLDC_MotorCommutation+0x15c>)
 8002574:	791b      	ldrb	r3, [r3, #4]
 8002576:	4259      	negs	r1, r3
 8002578:	414b      	adcs	r3, r1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <BLDC_MotorCommutation+0x150>
 8002580:	2390      	movs	r3, #144	; 0x90
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	08006a08 	.word	0x08006a08
 8002594:	20000038 	.word	0x20000038
 8002598:	08006a38 	.word	0x08006a38
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	48000400 	.word	0x48000400
 80025a4:	20000042 	.word	0x20000042

080025a8 <PMSM_generateLookUpTable>:

void PMSM_generateLookUpTable(void){
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
	double temp;
	for(uint16_t i=0;i<LOOKUP_ENTRIES;i++){
 80025ae:	230e      	movs	r3, #14
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	e04e      	b.n	8002656 <PMSM_generateLookUpTable+0xae>
		temp = sin((i*M_PI)/LOOKUP_ENTRIES)*PWM_PERIOD*SPEEDING_FACTOR;
 80025b8:	260e      	movs	r6, #14
 80025ba:	19bb      	adds	r3, r7, r6
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff fd48 	bl	8002054 <__aeabi_i2d>
 80025c4:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <PMSM_generateLookUpTable+0xc8>)
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <PMSM_generateLookUpTable+0xcc>)
 80025c8:	f7fe feca 	bl	8001360 <__aeabi_dmul>
 80025cc:	0002      	movs	r2, r0
 80025ce:	000b      	movs	r3, r1
 80025d0:	0010      	movs	r0, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	2381      	movs	r3, #129	; 0x81
 80025d8:	05db      	lsls	r3, r3, #23
 80025da:	f7fe fac7 	bl	8000b6c <__aeabi_ddiv>
 80025de:	0002      	movs	r2, r0
 80025e0:	000b      	movs	r3, r1
 80025e2:	0010      	movs	r0, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	f003 f9db 	bl	80059a0 <sin>
 80025ea:	0004      	movs	r4, r0
 80025ec:	000d      	movs	r5, r1
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <PMSM_generateLookUpTable+0xd0>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fd2f 	bl	8002054 <__aeabi_i2d>
 80025f6:	0002      	movs	r2, r0
 80025f8:	000b      	movs	r3, r1
 80025fa:	0020      	movs	r0, r4
 80025fc:	0029      	movs	r1, r5
 80025fe:	f7fe feaf 	bl	8001360 <__aeabi_dmul>
 8002602:	0002      	movs	r2, r0
 8002604:	000b      	movs	r3, r1
 8002606:	0014      	movs	r4, r2
 8002608:	001d      	movs	r5, r3
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <PMSM_generateLookUpTable+0xd4>)
 800260c:	1c18      	adds	r0, r3, #0
 800260e:	f7ff fd51 	bl	80020b4 <__aeabi_f2d>
 8002612:	0002      	movs	r2, r0
 8002614:	000b      	movs	r3, r1
 8002616:	0020      	movs	r0, r4
 8002618:	0029      	movs	r1, r5
 800261a:	f7fe fea1 	bl	8001360 <__aeabi_dmul>
 800261e:	0002      	movs	r2, r0
 8002620:	000b      	movs	r3, r1
 8002622:	603a      	str	r2, [r7, #0]
 8002624:	607b      	str	r3, [r7, #4]
		lookUP[i] = (uint16_t)(temp+0.5);
 8002626:	2200      	movs	r2, #0
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <PMSM_generateLookUpTable+0xd8>)
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	f7fd ff3d 	bl	80004ac <__aeabi_dadd>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	19b9      	adds	r1, r7, r6
 8002638:	880c      	ldrh	r4, [r1, #0]
 800263a:	0010      	movs	r0, r2
 800263c:	0019      	movs	r1, r3
 800263e:	f7fd ff17 	bl	8000470 <__aeabi_d2uiz>
 8002642:	0003      	movs	r3, r0
 8002644:	b299      	uxth	r1, r3
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <PMSM_generateLookUpTable+0xdc>)
 8002648:	0062      	lsls	r2, r4, #1
 800264a:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i=0;i<LOOKUP_ENTRIES;i++){
 800264c:	19bb      	adds	r3, r7, r6
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	19bb      	adds	r3, r7, r6
 8002652:	3201      	adds	r2, #1
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	230e      	movs	r3, #14
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d3a9      	bcc.n	80025b8 <PMSM_generateLookUpTable+0x10>
		//snprintf(stringToUARTF,100,"lookUp[%d] = %d\r\n",i,lookUP[i]);
		//sendToUART(stringToUARTF);
	}
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b005      	add	sp, #20
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	54442d18 	.word	0x54442d18
 8002674:	400921fb 	.word	0x400921fb
 8002678:	00000b44 	.word	0x00000b44
 800267c:	3f4ccccd 	.word	0x3f4ccccd
 8002680:	3fe00000 	.word	0x3fe00000
 8002684:	20000044 	.word	0x20000044

08002688 <PMSM_SetPWMWidthToYGB>:
	if(toUpdatePrev == 0) return 0;
	if(toUpdatePrev == toUpdate) return (LOOKUP_ENTRIES/2);
	return 0;
}
  
void PMSM_SetPWMWidthToYGB(uint8_t val){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	0002      	movs	r2, r0
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	701a      	strb	r2, [r3, #0]
		if(toUpdate == CH1) TIM1->CCR1=val;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <PMSM_SetPWMWidthToYGB+0x50>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d104      	bne.n	80026a8 <PMSM_SetPWMWidthToYGB+0x20>
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <PMSM_SetPWMWidthToYGB+0x54>)
 80026a0:	1dfa      	adds	r2, r7, #7
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
		else if(toUpdate == CH2) TIM1->CCR2=val;
		else if(toUpdate == CH3) TIM1->CCR3=val;
}
 80026a6:	e012      	b.n	80026ce <PMSM_SetPWMWidthToYGB+0x46>
		else if(toUpdate == CH2) TIM1->CCR2=val;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <PMSM_SetPWMWidthToYGB+0x50>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d104      	bne.n	80026bc <PMSM_SetPWMWidthToYGB+0x34>
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <PMSM_SetPWMWidthToYGB+0x54>)
 80026b4:	1dfa      	adds	r2, r7, #7
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026ba:	e008      	b.n	80026ce <PMSM_SetPWMWidthToYGB+0x46>
		else if(toUpdate == CH3) TIM1->CCR3=val;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <PMSM_SetPWMWidthToYGB+0x50>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d103      	bne.n	80026ce <PMSM_SetPWMWidthToYGB+0x46>
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <PMSM_SetPWMWidthToYGB+0x54>)
 80026c8:	1dfa      	adds	r2, r7, #7
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	20000042 	.word	0x20000042
 80026dc:	40012c00 	.word	0x40012c00

080026e0 <PMSM_updatePMSMPWMVariable>:

void PMSM_updatePMSMPWMVariable(uint16_t PWM){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	0002      	movs	r2, r0
 80026e8:	1dbb      	adds	r3, r7, #6
 80026ea:	801a      	strh	r2, [r3, #0]
	PMSM_PWM=PWM;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <PMSM_updatePMSMPWMVariable+0x1c>)
 80026ee:	1dba      	adds	r2, r7, #6
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	801a      	strh	r2, [r3, #0]
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000040 	.word	0x20000040

08002700 <isReverseButtonPressed>:


bool isReverseButtonPressed(void){
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	return (GPIO_READ_PIN(GPIOA, GPIO_PIN_15) == 0U);
 8002704:	2390      	movs	r3, #144	; 0x90
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	4013      	ands	r3, r2
 8002710:	425a      	negs	r2, r3
 8002712:	4153      	adcs	r3, r2
 8002714:	b2db      	uxtb	r3, r3
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	0018      	movs	r0, r3
 8002726:	230c      	movs	r3, #12
 8002728:	001a      	movs	r2, r3
 800272a:	2100      	movs	r1, #0
 800272c:	f003 f902 	bl	8005934 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <MX_ADC_Init+0x130>)
 8002732:	4a47      	ldr	r2, [pc, #284]	; (8002850 <MX_ADC_Init+0x134>)
 8002734:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <MX_ADC_Init+0x130>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	0612      	lsls	r2, r2, #24
 800273c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <MX_ADC_Init+0x130>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <MX_ADC_Init+0x130>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <MX_ADC_Init+0x130>)
 800274c:	2201      	movs	r2, #1
 800274e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002750:	4b3e      	ldr	r3, [pc, #248]	; (800284c <MX_ADC_Init+0x130>)
 8002752:	2208      	movs	r2, #8
 8002754:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <MX_ADC_Init+0x130>)
 8002758:	2200      	movs	r2, #0
 800275a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <MX_ADC_Init+0x130>)
 800275e:	2200      	movs	r2, #0
 8002760:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002762:	4b3a      	ldr	r3, [pc, #232]	; (800284c <MX_ADC_Init+0x130>)
 8002764:	2201      	movs	r2, #1
 8002766:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <MX_ADC_Init+0x130>)
 800276a:	2200      	movs	r2, #0
 800276c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <MX_ADC_Init+0x130>)
 8002770:	22c2      	movs	r2, #194	; 0xc2
 8002772:	32ff      	adds	r2, #255	; 0xff
 8002774:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <MX_ADC_Init+0x130>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800277c:	4b33      	ldr	r3, [pc, #204]	; (800284c <MX_ADC_Init+0x130>)
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <MX_ADC_Init+0x130>)
 8002786:	2201      	movs	r2, #1
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <MX_ADC_Init+0x130>)
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fd99 	bl	80032c4 <HAL_ADC_Init>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002796:	f000 faa7 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0152      	lsls	r2, r2, #5
 80027a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2202      	movs	r2, #2
 80027ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027ae:	1d3a      	adds	r2, r7, #4
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <MX_ADC_Init+0x130>)
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 ff5f 	bl	8003678 <HAL_ADC_ConfigChannel>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80027be:	f000 fa93 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027c8:	1d3a      	adds	r2, r7, #4
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <MX_ADC_Init+0x130>)
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 ff52 	bl	8003678 <HAL_ADC_ConfigChannel>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d001      	beq.n	80027dc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80027d8:	f000 fa86 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2204      	movs	r2, #4
 80027e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027e2:	1d3a      	adds	r2, r7, #4
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <MX_ADC_Init+0x130>)
 80027e6:	0011      	movs	r1, r2
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 ff45 	bl	8003678 <HAL_ADC_ConfigChannel>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d001      	beq.n	80027f6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80027f2:	f000 fa79 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2205      	movs	r2, #5
 80027fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027fc:	1d3a      	adds	r2, r7, #4
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <MX_ADC_Init+0x130>)
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f000 ff38 	bl	8003678 <HAL_ADC_ConfigChannel>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800280c:	f000 fa6c 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2210      	movs	r2, #16
 8002814:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002816:	1d3a      	adds	r2, r7, #4
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_ADC_Init+0x130>)
 800281a:	0011      	movs	r1, r2
 800281c:	0018      	movs	r0, r3
 800281e:	f000 ff2b 	bl	8003678 <HAL_ADC_ConfigChannel>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8002826:	f000 fa5f 	bl	8002ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2211      	movs	r2, #17
 800282e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002830:	1d3a      	adds	r2, r7, #4
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_ADC_Init+0x130>)
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f000 ff1e 	bl	8003678 <HAL_ADC_ConfigChannel>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8002840:	f000 fa52 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b004      	add	sp, #16
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000444 	.word	0x20000444
 8002850:	40012400 	.word	0x40012400

08002854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b08b      	sub	sp, #44	; 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	2414      	movs	r4, #20
 800285e:	193b      	adds	r3, r7, r4
 8002860:	0018      	movs	r0, r3
 8002862:	2314      	movs	r3, #20
 8002864:	001a      	movs	r2, r3
 8002866:	2100      	movs	r1, #0
 8002868:	f003 f864 	bl	8005934 <memset>
  if(adcHandle->Instance==ADC1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_ADC_MspInit+0xd4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d153      	bne.n	800291e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_ADC_MspInit+0xd8>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0089      	lsls	r1, r1, #2
 8002880:	430a      	orrs	r2, r1
 8002882:	619a      	str	r2, [r3, #24]
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0289      	lsls	r1, r1, #10
 800289c:	430a      	orrs	r2, r1
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_ADC_MspInit+0xd8>)
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	2233      	movs	r2, #51	; 0x33
 80028b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2203      	movs	r2, #3
 80028b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	193a      	adds	r2, r7, r4
 80028c2:	2390      	movs	r3, #144	; 0x90
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f001 fbf1 	bl	80040b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028d2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0052      	lsls	r2, r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	00d2      	lsls	r2, r2, #3
 80028f4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028f8:	2220      	movs	r2, #32
 80028fa:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 8002904:	0018      	movs	r0, r3
 8002906:	f001 fa3b 	bl	8003d80 <HAL_DMA_Init>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800290e:	f000 f9eb 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b00b      	add	sp, #44	; 0x2c
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40012400 	.word	0x40012400
 800292c:	40021000 	.word	0x40021000
 8002930:	20000484 	.word	0x20000484
 8002934:	40020008 	.word	0x40020008

08002938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_DMA_Init+0x38>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_DMA_Init+0x38>)
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_DMA_Init+0x38>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2009      	movs	r0, #9
 800295c:	f001 f9de 	bl	8003d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002960:	2009      	movs	r0, #9
 8002962:	f001 f9f0 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000

08002974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	0002      	movs	r2, r0
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b7f      	cmp	r3, #127	; 0x7f
 8002986:	d809      	bhi.n	800299c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	001a      	movs	r2, r3
 800298e:	231f      	movs	r3, #31
 8002990:	401a      	ands	r2, r3
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_EnableIRQ+0x30>)
 8002994:	2101      	movs	r1, #1
 8002996:	4091      	lsls	r1, r2
 8002998:	000a      	movs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
  }
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <initGPIO>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 2 */
void initGPIO(void){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	//1. Enable Periph clock
	RCC->AHBENR |= (RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN);
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <initGPIO+0x154>)
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	4b52      	ldr	r3, [pc, #328]	; (8002afc <initGPIO+0x154>)
 80029b2:	21c0      	movs	r1, #192	; 0xc0
 80029b4:	02c9      	lsls	r1, r1, #11
 80029b6:	430a      	orrs	r2, r1
 80029b8:	615a      	str	r2, [r3, #20]

	//********************************************************LEDs***************************
	//2. Configure GPIOA-pin and GPIOB-pin default output level
	GPIO_CLEAR_PIN(GPIOA, GPIO_PIN_12);
 80029ba:	2390      	movs	r3, #144	; 0x90
 80029bc:	05db      	lsls	r3, r3, #23
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	0552      	lsls	r2, r2, #21
 80029c2:	619a      	str	r2, [r3, #24]
	GPIO_CLEAR_PIN(GPIOB, GPIO_PIN_3);
 80029c4:	4b4e      	ldr	r3, [pc, #312]	; (8002b00 <initGPIO+0x158>)
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	0312      	lsls	r2, r2, #12
 80029ca:	619a      	str	r2, [r3, #24]
	GPIO_CLEAR_PIN(GPIOB, GPIO_PIN_4);
 80029cc:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <initGPIO+0x158>)
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	0352      	lsls	r2, r2, #13
 80029d2:	619a      	str	r2, [r3, #24]

	//3. Configure mode for A12 pins, PB3,PB4
	//(00: Input, 01: General purpose output mode, 10: Alternate function mode, 11: Analog mode)
	GPIOA->MODER &= ~GPIO_MODER_MODER12; //reset first
 80029d4:	2390      	movs	r3, #144	; 0x90
 80029d6:	05db      	lsls	r3, r3, #23
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2390      	movs	r3, #144	; 0x90
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	4949      	ldr	r1, [pc, #292]	; (8002b04 <initGPIO+0x15c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER12_0;
 80029e4:	2390      	movs	r3, #144	; 0x90
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2390      	movs	r3, #144	; 0x90
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	0449      	lsls	r1, r1, #17
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

	GPIOB->MODER &= ~(GPIO_MODER_MODER3 | GPIO_MODER_MODER4);
 80029f6:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <initGPIO+0x158>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <initGPIO+0x158>)
 80029fc:	4942      	ldr	r1, [pc, #264]	; (8002b08 <initGPIO+0x160>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0);
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <initGPIO+0x158>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <initGPIO+0x158>)
 8002a08:	21a0      	movs	r1, #160	; 0xa0
 8002a0a:	0049      	lsls	r1, r1, #1
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

	//4. Set output type to push-pull (0: Output push-pull, 1: Output open-drain)
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_12;
 8002a10:	2390      	movs	r3, #144	; 0x90
 8002a12:	05db      	lsls	r3, r3, #23
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	2390      	movs	r3, #144	; 0x90
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	493c      	ldr	r1, [pc, #240]	; (8002b0c <initGPIO+0x164>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_3 | GPIO_OTYPER_OT_4);
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <initGPIO+0x158>)
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <initGPIO+0x158>)
 8002a26:	2118      	movs	r1, #24
 8002a28:	438a      	bics	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]

	//5. Set pin speed to low (00: Low speed, 01: Medium speed, 10: High speed, 11: Very high speed)
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR12;
 8002a2c:	2390      	movs	r3, #144	; 0x90
 8002a2e:	05db      	lsls	r3, r3, #23
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	2390      	movs	r3, #144	; 0x90
 8002a34:	05db      	lsls	r3, r3, #23
 8002a36:	4933      	ldr	r1, [pc, #204]	; (8002b04 <initGPIO+0x15c>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12_0;
 8002a3c:	2390      	movs	r3, #144	; 0x90
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	2390      	movs	r3, #144	; 0x90
 8002a44:	05db      	lsls	r3, r3, #23
 8002a46:	2180      	movs	r1, #128	; 0x80
 8002a48:	0449      	lsls	r1, r1, #17
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]

	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3 | GPIO_OSPEEDER_OSPEEDR4);
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <initGPIO+0x158>)
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <initGPIO+0x158>)
 8002a54:	492c      	ldr	r1, [pc, #176]	; (8002b08 <initGPIO+0x160>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_0 | GPIO_OSPEEDER_OSPEEDR4_0);
 8002a5a:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <initGPIO+0x158>)
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <initGPIO+0x158>)
 8002a60:	21a0      	movs	r1, #160	; 0xa0
 8002a62:	0049      	lsls	r1, r1, #1
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]

	//6. Set no pull-up/pull-down (00: No pull-up, pull-down, 01: Pull-up, 10: Pull-down, 11: Reserved)
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR12;
 8002a68:	2390      	movs	r3, #144	; 0x90
 8002a6a:	05db      	lsls	r3, r3, #23
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	2390      	movs	r3, #144	; 0x90
 8002a70:	05db      	lsls	r3, r3, #23
 8002a72:	4924      	ldr	r1, [pc, #144]	; (8002b04 <initGPIO+0x15c>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR12 | GPIO_PUPDR_PUPDR12);
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <initGPIO+0x158>)
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <initGPIO+0x158>)
 8002a7e:	4921      	ldr	r1, [pc, #132]	; (8002b04 <initGPIO+0x15c>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]
	//    Configure the EXTI trigger (rising/falling edge, or both).
	//    Configure the EXTI lines in the SYSCFG controller.
	//    Enable the interrupt in the NVIC (Nested Vectored Interrupt Controller).

	//1. Enable Periph clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <initGPIO+0x154>)
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <initGPIO+0x154>)
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	619a      	str	r2, [r3, #24]

	//3. Configure mode for PB5,PB6,PB7
	//(00: Input, 01: General purpose output mode, 10: Alternate function mode, 11: Analog mode)
	GPIOB->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7); //reset first
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <initGPIO+0x158>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <initGPIO+0x158>)
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <initGPIO+0x168>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

	//6. Set no pull-up/pull-down (00: No pull-up, pull-down, 01: Pull-up, 10: Pull-down, 11: Reserved)
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR5 | GPIO_PUPDR_PUPDR6 | GPIO_PUPDR_PUPDR7);
 8002a9c:	2390      	movs	r3, #144	; 0x90
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	2390      	movs	r3, #144	; 0x90
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	491a      	ldr	r1, [pc, #104]	; (8002b10 <initGPIO+0x168>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR7_0);
 8002aac:	2390      	movs	r3, #144	; 0x90
 8002aae:	05db      	lsls	r3, r3, #23
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	2390      	movs	r3, #144	; 0x90
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	21a8      	movs	r1, #168	; 0xa8
 8002ab8:	01c9      	lsls	r1, r1, #7
 8002aba:	430a      	orrs	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]

	// Enable EXTI lines interrupt at rising edge for PB5, PB6, and PB7
	EXTI->IMR |= (EXTI_IMR_IM5 | EXTI_IMR_IM6 | EXTI_IMR_IM7);
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <initGPIO+0x16c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <initGPIO+0x16c>)
 8002ac4:	21e0      	movs	r1, #224	; 0xe0
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= (EXTI_RTSR_RT5 | EXTI_RTSR_RT6 | EXTI_RTSR_RT7);
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <initGPIO+0x16c>)
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <initGPIO+0x16c>)
 8002ad0:	21e0      	movs	r1, #224	; 0xe0
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]

	SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR2_EXTI5 | SYSCFG_EXTICR2_EXTI6 | SYSCFG_EXTICR2_EXTI7);
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <initGPIO+0x170>)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <initGPIO+0x170>)
 8002adc:	490f      	ldr	r1, [pc, #60]	; (8002b1c <initGPIO+0x174>)
 8002ade:	400a      	ands	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]
	SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB | SYSCFG_EXTICR2_EXTI6_PB | SYSCFG_EXTICR2_EXTI7_PB);
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <initGPIO+0x170>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <initGPIO+0x170>)
 8002ae8:	490d      	ldr	r1, [pc, #52]	; (8002b20 <initGPIO+0x178>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	60da      	str	r2, [r3, #12]

	// Enable EXTI interrupt in NVIC
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002aee:	2007      	movs	r0, #7
 8002af0:	f7ff ff40 	bl	8002974 <__NVIC_EnableIRQ>

}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48000400 	.word	0x48000400
 8002b04:	fcffffff 	.word	0xfcffffff
 8002b08:	fffffc3f 	.word	0xfffffc3f
 8002b0c:	ffffefff 	.word	0xffffefff
 8002b10:	ffff03ff 	.word	0xffff03ff
 8002b14:	40010400 	.word	0x40010400
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	ffff000f 	.word	0xffff000f
 8002b20:	00001110 	.word	0x00001110

08002b24 <EXTI4_15_IRQHandler>:
// This function will be called at every hall sensor trigger.
void EXTI4_15_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
    // Check which EXTI line triggered the interrupt and clear the flag
    if (EXTI->PR & (1 << 5)) {
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <EXTI4_15_IRQHandler+0x48>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d002      	beq.n	8002b38 <EXTI4_15_IRQHandler+0x14>
        EXTI->PR = (1 << 5); // Clear interrupt pending bit for PB5
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <EXTI4_15_IRQHandler+0x48>)
 8002b34:	2220      	movs	r2, #32
 8002b36:	615a      	str	r2, [r3, #20]
        // Handle interrupt for PB5
    }
    if (EXTI->PR & (1 << 6)) {
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <EXTI4_15_IRQHandler+0x48>)
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2240      	movs	r2, #64	; 0x40
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d002      	beq.n	8002b48 <EXTI4_15_IRQHandler+0x24>
        EXTI->PR = (1 << 6); // Clear interrupt pending bit for PB6
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <EXTI4_15_IRQHandler+0x48>)
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	615a      	str	r2, [r3, #20]
        // Handle interrupt for PB6
    }
    if (EXTI->PR & (1 << 7)) {
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <EXTI4_15_IRQHandler+0x48>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d002      	beq.n	8002b58 <EXTI4_15_IRQHandler+0x34>
        EXTI->PR = (1 << 7); // Clear interrupt pending bit for PB7
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <EXTI4_15_IRQHandler+0x48>)
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	615a      	str	r2, [r3, #20]
        // Handle interrupt for PB7
    }
    GPIO_TOGGLE_PIN(GPIOB, YELLOW_LED);
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <EXTI4_15_IRQHandler+0x4c>)
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <EXTI4_15_IRQHandler+0x4c>)
 8002b5e:	2108      	movs	r1, #8
 8002b60:	404a      	eors	r2, r1
 8002b62:	615a      	str	r2, [r3, #20]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	40010400 	.word	0x40010400
 8002b70:	48000400 	.word	0x48000400

08002b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b78:	f000 fb40 	bl	80031fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b7c:	f000 f874 	bl	8002c68 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_DMA_Init();
 8002b80:	f7ff feda 	bl	8002938 <MX_DMA_Init>
  MX_ADC_Init();
 8002b84:	f7ff fdca 	bl	800271c <MX_ADC_Init>
  MX_TIM1_Init();
 8002b88:	f000 f902 	bl	8002d90 <MX_TIM1_Init>
  MX_TIM14_Init();
 8002b8c:	f000 f9ca 	bl	8002f24 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8002b90:	f000 fa8e 	bl	80030b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initGPIO();
 8002b94:	f7ff ff08 	bl	80029a8 <initGPIO>
	HAL_ADCEx_Calibration_Start(&hadc);
 8002b98:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <main+0xe0>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 ff6a 	bl	8003a74 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc,(uint32_t*)&ADCBuffer,6);
 8002ba0:	492d      	ldr	r1, [pc, #180]	; (8002c58 <main+0xe4>)
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <main+0xe0>)
 8002ba4:	2206      	movs	r2, #6
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fccc 	bl	8003544 <HAL_ADC_Start_DMA>

	PMSM_Init();
 8002bac:	f7ff fb4c 	bl	8002248 <PMSM_Init>
	initController();
 8002bb0:	f7ff fb26 	bl	8002200 <initController>

	  //sendToUART("HELLO\r\n");
	  //snprintf(stringToUART,100,"ADCBuffer=%d\r\n",ADCBuffer[0]);
	  //sendToUART(stringToUART);

	  if ((ADCBuffer[0] & 0xFFF0) > getThrottleStartValue()) {
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <main+0xe4>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	001a      	movs	r2, r3
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <main+0xe8>)
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	0014      	movs	r4, r2
 8002bc0:	f7ff fb4d 	bl	800225e <getThrottleStartValue>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	429c      	cmp	r4, r3
 8002bc8:	dd35      	ble.n	8002c36 <main+0xc2>
		  // If Motor Is not running
		  if (!isMotorRunning()) {
 8002bca:	f7ff fc03 	bl	80023d4 <isMotorRunning>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4053      	eors	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d014      	beq.n	8002c06 <main+0x92>
			  // Start motor
			  // Check Reverse button
			  if (isReverseButtonPressed()) {
 8002bdc:	f7ff fd90 	bl	8002700 <isReverseButtonPressed>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d003      	beq.n	8002bec <main+0x78>
				  // Reverse
				  setMotorSpinDirection(PMSM_CCW);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f7ff fbcb 	bl	8002380 <setMotorSpinDirection>
 8002bea:	e002      	b.n	8002bf2 <main+0x7e>
			  } else {
				  // Forward
				  setMotorSpinDirection(PMSM_CW);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff fbc7 	bl	8002380 <setMotorSpinDirection>
			  }
			  BLDC_MotorCommutation(getRotorSector());
 8002bf2:	f7ff fb3b 	bl	800226c <getRotorSector>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff fc1c 	bl	8002438 <BLDC_MotorCommutation>
			  setMotorRunningState(true);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7ff fbd7 	bl	80023b4 <setMotorRunningState>
		  }

		  PMSM_updatePMSMPWMVariable(PMSM_ADCToPWM(ADCBuffer[0] & 0xFFF0));
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <main+0xe4>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fb85 	bl	8002320 <PMSM_ADCToPWM>
 8002c16:	0003      	movs	r3, r0
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff fd61 	bl	80026e0 <PMSM_updatePMSMPWMVariable>
		  __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);//start timer 1 interrupt
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <main+0xec>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <main+0xec>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
#ifdef ENABLE_UART_DEBUG
		  snprintf(stringToUART,100,"PMSM_PWM=%d\r\n",PMSM_ADCToPWM(ADCBuffer[0] & 0xFFF8));
		  //snprintf(stringToUART,100,"GT=%d CNT=%d\r\n",globalTime,counter);
		  sendToUART(stringToUART);
#endif
		  GPIO_SET_PIN(GPIOB, GREEN_LED);//set green LED
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <main+0xf0>)
 8002c30:	2210      	movs	r2, #16
 8002c32:	619a      	str	r2, [r3, #24]
 8002c34:	e7be      	b.n	8002bb4 <main+0x40>
	  }else {
		  __HAL_TIM_DISABLE_IT(&htim1,TIM_IT_UPDATE);//stop timer 1 interrupt
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <main+0xec>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <main+0xec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	438a      	bics	r2, r1
 8002c44:	60da      	str	r2, [r3, #12]
		  PMSM_SetPWMWidthToYGB(0);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7ff fd1e 	bl	8002688 <PMSM_SetPWMWidthToYGB>
		  GPIO_SET_PIN(GPIOB, GREEN_LED);//reset green LED
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <main+0xf0>)
 8002c4e:	2210      	movs	r2, #16
 8002c50:	619a      	str	r2, [r3, #24]
	  if ((ADCBuffer[0] & 0xFFF0) > getThrottleStartValue()) {
 8002c52:	e7af      	b.n	8002bb4 <main+0x40>
 8002c54:	20000444 	.word	0x20000444
 8002c58:	200004c8 	.word	0x200004c8
 8002c5c:	0000fff0 	.word	0x0000fff0
 8002c60:	200004d4 	.word	0x200004d4
 8002c64:	48000400 	.word	0x48000400

08002c68 <SystemClock_Config>:
//}

/* USER CODE BEGIN 4 */
//*********************************************handling system clk***************//
void SystemClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  // Enable HSI (High Speed Internal) clock
  RCC->CR |= RCC_CR_HSION;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  // Wait till HSI is ready
  while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0fa      	beq.n	8002c7a <SystemClock_Config+0x12>

  // Configure the Flash latency and enable prefetch buffer
  FLASH->ACR |= FLASH_ACR_LATENCY | FLASH_ACR_PRFTBE;
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <SystemClock_Config+0x7c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <SystemClock_Config+0x7c>)
 8002c8a:	2111      	movs	r1, #17
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  // Configure the AHB and APB bus clocks
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // HCLK = SYSCLK
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c94:	6852      	ldr	r2, [r2, #4]
 8002c96:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_PPRE_DIV1;  // PCLK1 = HCLK
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <SystemClock_Config+0x78>)
 8002c9c:	6852      	ldr	r2, [r2, #4]
 8002c9e:	605a      	str	r2, [r3, #4]

  // Select HSI as the system clock source
  RCC->CFGR &= ~RCC_CFGR_SW;          // Clear SW bits
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <SystemClock_Config+0x78>)
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <SystemClock_Config+0x78>)
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	438a      	bics	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SW_HSI;       // Set HSI as system clock
 8002cac:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cb0:	6852      	ldr	r2, [r2, #4]
 8002cb2:	605a      	str	r2, [r3, #4]

  // Wait till HSI is used as the system clock source
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	220c      	movs	r2, #12
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d1fa      	bne.n	8002cb6 <SystemClock_Config+0x4e>

  // Configure the USART1 clock source to PCLK1
  RCC->CIR &= ~RCC_CFGR3_USART1SW;  // Clear USART1 clock source selection bits
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	438a      	bics	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
  RCC->CIR |= RCC_CFGR3_USART1SW_0; // Set PCLK1 as USART1 clock source
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <SystemClock_Config+0x78>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
}
 8002cee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <Error_Handler+0x8>
	...

08002cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_MspInit+0x44>)
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_MspInit+0x44>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	430a      	orrs	r2, r1
 8002d04:	619a      	str	r2, [r3, #24]
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_MspInit+0x44>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_MspInit+0x44>)
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_MspInit+0x44>)
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	0549      	lsls	r1, r1, #21
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_MspInit+0x44>)
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	055b      	lsls	r3, r3, #21
 8002d28:	4013      	ands	r3, r2
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	40021000 	.word	0x40021000

08002d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <NMI_Handler+0x4>

08002d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d60:	f000 fa94 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <DMA1_Channel1_IRQHandler+0x14>)
 8002d72:	0018      	movs	r0, r3
 8002d74:	f001 f8b2 	bl	8003edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	20000484 	.word	0x20000484

08002d84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b096      	sub	sp, #88	; 0x58
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d96:	2348      	movs	r3, #72	; 0x48
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	001a      	movs	r2, r3
 8002da0:	2100      	movs	r1, #0
 8002da2:	f002 fdc7 	bl	8005934 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	0018      	movs	r0, r3
 8002dac:	2308      	movs	r3, #8
 8002dae:	001a      	movs	r2, r3
 8002db0:	2100      	movs	r1, #0
 8002db2:	f002 fdbf 	bl	8005934 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db6:	2324      	movs	r3, #36	; 0x24
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	0018      	movs	r0, r3
 8002dbc:	231c      	movs	r3, #28
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f002 fdb7 	bl	8005934 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	0018      	movs	r0, r3
 8002dca:	2320      	movs	r3, #32
 8002dcc:	001a      	movs	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f002 fdb0 	bl	8005934 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dd4:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002dd6:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <MX_TIM1_Init+0x190>)
 8002dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de0:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df8:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f001 fb3b 	bl	800447c <HAL_TIM_Base_Init>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002e0a:	f7ff ff6d 	bl	8002ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0e:	2148      	movs	r1, #72	; 0x48
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0152      	lsls	r2, r2, #5
 8002e16:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e18:	187a      	adds	r2, r7, r1
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f001 fd40 	bl	80048a4 <HAL_TIM_ConfigClockSource>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002e28:	f7ff ff5e 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f001 fb74 	bl	800451c <HAL_TIM_PWM_Init>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002e38:	f7ff ff56 	bl	8002ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e4a:	187a      	adds	r2, r7, r1
 8002e4c:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f002 f913 	bl	800507c <HAL_TIMEx_MasterConfigSynchronization>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002e5a:	f7ff ff45 	bl	8002ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5e:	2124      	movs	r1, #36	; 0x24
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	2260      	movs	r2, #96	; 0x60
 8002e64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8a:	1879      	adds	r1, r7, r1
 8002e8c:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f001 fc41 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002e9a:	f7ff ff25 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e9e:	2324      	movs	r3, #36	; 0x24
 8002ea0:	18f9      	adds	r1, r7, r3
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f001 fc36 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002eb0:	f7ff ff1a 	bl	8002ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002eb4:	2324      	movs	r3, #36	; 0x24
 8002eb6:	18f9      	adds	r1, r7, r3
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002eba:	2208      	movs	r2, #8
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f001 fc2b 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002ec6:	f7ff ff0f 	bl	8002ce8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0152      	lsls	r2, r2, #5
 8002ee8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	01d2      	lsls	r2, r2, #7
 8002ef6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ef8:	1d3a      	adds	r2, r7, #4
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f002 f90e 	bl	8005120 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8002f08:	f7ff feee 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <MX_TIM1_Init+0x18c>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 f88e 	bl	8003030 <HAL_TIM_MspPostInit>

}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b016      	add	sp, #88	; 0x58
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200004d4 	.word	0x200004d4
 8002f20:	40012c00 	.word	0x40012c00

08002f24 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f2a:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <MX_TIM14_Init+0x44>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <MX_TIM14_Init+0x40>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fa94 	bl	800447c <HAL_TIM_Base_Init>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002f58:	f7ff fec6 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	2000051c 	.word	0x2000051c
 8002f68:	40002000 	.word	0x40002000

08002f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b08b      	sub	sp, #44	; 0x2c
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	2414      	movs	r4, #20
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	0018      	movs	r0, r3
 8002f7a:	2314      	movs	r3, #20
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f002 fcd8 	bl	8005934 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <HAL_TIM_Base_MspInit+0xb8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d133      	bne.n	8002ff6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	0109      	lsls	r1, r1, #4
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	4b22      	ldr	r3, [pc, #136]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0289      	lsls	r1, r1, #10
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	615a      	str	r2, [r3, #20]
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fc6:	0021      	movs	r1, r4
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	187a      	adds	r2, r7, r1
 8002fe8:	2390      	movs	r3, #144	; 0x90
 8002fea:	05db      	lsls	r3, r3, #23
 8002fec:	0011      	movs	r1, r2
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f001 f85e 	bl	80040b0 <HAL_GPIO_Init>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002ff4:	e012      	b.n	800301c <HAL_TIM_Base_MspInit+0xb0>
  else if(tim_baseHandle->Instance==TIM14)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_TIM_Base_MspInit+0xc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	0049      	lsls	r1, r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	61da      	str	r2, [r3, #28]
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_TIM_Base_MspInit+0xbc>)
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4013      	ands	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b00b      	add	sp, #44	; 0x2c
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40021000 	.word	0x40021000
 800302c:	40002000 	.word	0x40002000

08003030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	240c      	movs	r4, #12
 800303a:	193b      	adds	r3, r7, r4
 800303c:	0018      	movs	r0, r3
 800303e:	2314      	movs	r3, #20
 8003040:	001a      	movs	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	f002 fc76 	bl	8005934 <memset>
  if(timHandle->Instance==TIM1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_TIM_MspPostInit+0x78>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d125      	bne.n	800309e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_TIM_MspPostInit+0x7c>)
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_TIM_MspPostInit+0x7c>)
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	0289      	lsls	r1, r1, #10
 800305c:	430a      	orrs	r2, r1
 800305e:	615a      	str	r2, [r3, #20]
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_TIM_MspPostInit+0x7c>)
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800306e:	193b      	adds	r3, r7, r4
 8003070:	22e0      	movs	r2, #224	; 0xe0
 8003072:	00d2      	lsls	r2, r2, #3
 8003074:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	0021      	movs	r1, r4
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2202      	movs	r2, #2
 800307c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2203      	movs	r2, #3
 8003088:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800308a:	187b      	adds	r3, r7, r1
 800308c:	2202      	movs	r2, #2
 800308e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003090:	187a      	adds	r2, r7, r1
 8003092:	2390      	movs	r3, #144	; 0x90
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	0011      	movs	r1, r2
 8003098:	0018      	movs	r0, r3
 800309a:	f001 f809 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b009      	add	sp, #36	; 0x24
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40021000 	.word	0x40021000

080030b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <MX_USART1_UART_Init+0x5c>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030bc:	22e1      	movs	r2, #225	; 0xe1
 80030be:	0252      	lsls	r2, r2, #9
 80030c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <MX_USART1_UART_Init+0x58>)
 80030f4:	0018      	movs	r0, r3
 80030f6:	f002 f871 	bl	80051dc <HAL_UART_Init>
 80030fa:	1e03      	subs	r3, r0, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80030fe:	f7ff fdf3 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000564 	.word	0x20000564
 800310c:	40013800 	.word	0x40013800

08003110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08b      	sub	sp, #44	; 0x2c
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	2414      	movs	r4, #20
 800311a:	193b      	adds	r3, r7, r4
 800311c:	0018      	movs	r0, r3
 800311e:	2314      	movs	r3, #20
 8003120:	001a      	movs	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f002 fc06 	bl	8005934 <memset>
  if(uartHandle->Instance==USART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_UART_MspInit+0x90>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d132      	bne.n	8003198 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_UART_MspInit+0x94>)
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_UART_MspInit+0x94>)
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	01c9      	lsls	r1, r1, #7
 800313c:	430a      	orrs	r2, r1
 800313e:	619a      	str	r2, [r3, #24]
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_UART_MspInit+0x94>)
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	01db      	lsls	r3, r3, #7
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_UART_MspInit+0x94>)
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_UART_MspInit+0x94>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0289      	lsls	r1, r1, #10
 8003158:	430a      	orrs	r2, r1
 800315a:	615a      	str	r2, [r3, #20]
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_UART_MspInit+0x94>)
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	029b      	lsls	r3, r3, #10
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800316a:	0021      	movs	r1, r4
 800316c:	187b      	adds	r3, r7, r1
 800316e:	220c      	movs	r2, #12
 8003170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2202      	movs	r2, #2
 8003176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2203      	movs	r2, #3
 8003182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2201      	movs	r2, #1
 8003188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	187a      	adds	r2, r7, r1
 800318c:	2390      	movs	r3, #144	; 0x90
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	0011      	movs	r1, r2
 8003192:	0018      	movs	r0, r3
 8003194:	f000 ff8c 	bl	80040b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b00b      	add	sp, #44	; 0x2c
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000

080031a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031ac:	f7ff fdea 	bl	8002d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031b2:	490d      	ldr	r1, [pc, #52]	; (80031e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <LoopForever+0xe>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031c8:	4c0a      	ldr	r4, [pc, #40]	; (80031f4 <LoopForever+0x16>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031d6:	f002 fbb5 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031da:	f7ff fccb 	bl	8002b74 <main>

080031de <LoopForever>:

LoopForever:
    b LoopForever
 80031de:	e7fe      	b.n	80031de <LoopForever>
  ldr   r0, =_estack
 80031e0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80031ec:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 80031f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80031f4:	200005f0 	.word	0x200005f0

080031f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC1_IRQHandler>
	...

080031fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003200:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_Init+0x24>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_Init+0x24>)
 8003206:	2110      	movs	r1, #16
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800320c:	2003      	movs	r0, #3
 800320e:	f000 f809 	bl	8003224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003212:	f7ff fd6f 	bl	8002cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	40022000 	.word	0x40022000

08003224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_InitTick+0x5c>)
 800322e:	681c      	ldr	r4, [r3, #0]
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_InitTick+0x60>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	0019      	movs	r1, r3
 8003236:	23fa      	movs	r3, #250	; 0xfa
 8003238:	0098      	lsls	r0, r3, #2
 800323a:	f7fc ff65 	bl	8000108 <__udivsi3>
 800323e:	0003      	movs	r3, r0
 8003240:	0019      	movs	r1, r3
 8003242:	0020      	movs	r0, r4
 8003244:	f7fc ff60 	bl	8000108 <__udivsi3>
 8003248:	0003      	movs	r3, r0
 800324a:	0018      	movs	r0, r3
 800324c:	f000 fd8b 	bl	8003d66 <HAL_SYSTICK_Config>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d001      	beq.n	8003258 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e00f      	b.n	8003278 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d80b      	bhi.n	8003276 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	2301      	movs	r3, #1
 8003262:	425b      	negs	r3, r3
 8003264:	2200      	movs	r2, #0
 8003266:	0018      	movs	r0, r3
 8003268:	f000 fd58 	bl	8003d1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_InitTick+0x64>)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b003      	add	sp, #12
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	20000000 	.word	0x20000000
 8003284:	20000008 	.word	0x20000008
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_IncTick+0x1c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	001a      	movs	r2, r3
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x20>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	18d2      	adds	r2, r2, r3
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_IncTick+0x20>)
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000008 	.word	0x20000008
 80032ac:	200005ec 	.word	0x200005ec

080032b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <HAL_GetTick+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	200005ec 	.word	0x200005ec

080032c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032cc:	230f      	movs	r3, #15
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e125      	b.n	800352e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2234      	movs	r2, #52	; 0x34
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7ff faaa 	bl	8002854 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	2210      	movs	r2, #16
 8003306:	4013      	ands	r3, r2
 8003308:	d000      	beq.n	800330c <HAL_ADC_Init+0x48>
 800330a:	e103      	b.n	8003514 <HAL_ADC_Init+0x250>
 800330c:	230f      	movs	r3, #15
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d000      	beq.n	8003318 <HAL_ADC_Init+0x54>
 8003316:	e0fd      	b.n	8003514 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003322:	d000      	beq.n	8003326 <HAL_ADC_Init+0x62>
 8003324:	e0f6      	b.n	8003514 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	4a83      	ldr	r2, [pc, #524]	; (8003538 <HAL_ADC_Init+0x274>)
 800332c:	4013      	ands	r3, r2
 800332e:	2202      	movs	r2, #2
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2203      	movs	r2, #3
 800333e:	4013      	ands	r3, r2
 8003340:	2b01      	cmp	r3, #1
 8003342:	d112      	bne.n	800336a <HAL_ADC_Init+0xa6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4013      	ands	r3, r2
 800334e:	2b01      	cmp	r3, #1
 8003350:	d009      	beq.n	8003366 <HAL_ADC_Init+0xa2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	401a      	ands	r2, r3
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	429a      	cmp	r2, r3
 8003364:	d101      	bne.n	800336a <HAL_ADC_Init+0xa6>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_ADC_Init+0xa8>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d116      	bne.n	800339e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2218      	movs	r2, #24
 8003378:	4393      	bics	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	0899      	lsrs	r1, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4964      	ldr	r1, [pc, #400]	; (800353c <HAL_ADC_Init+0x278>)
 80033aa:	400a      	ands	r2, r1
 80033ac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7e1b      	ldrb	r3, [r3, #24]
 80033b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e5b      	ldrb	r3, [r3, #25]
 80033b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7e9b      	ldrb	r3, [r3, #26]
 80033c0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80033c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d002      	beq.n	80033d2 <HAL_ADC_Init+0x10e>
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	015b      	lsls	r3, r3, #5
 80033d0:	e000      	b.n	80033d4 <HAL_ADC_Init+0x110>
 80033d2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80033da:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_Init+0x124>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e000      	b.n	80033ea <HAL_ADC_Init+0x126>
 80033e8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80033ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2124      	movs	r1, #36	; 0x24
 80033f0:	5c5b      	ldrb	r3, [r3, r1]
 80033f2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7edb      	ldrb	r3, [r3, #27]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7e9b      	ldrb	r3, [r3, #26]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0252      	lsls	r2, r2, #9
 8003412:	4313      	orrs	r3, r2
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	e00b      	b.n	8003430 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	2220      	movs	r2, #32
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	2201      	movs	r2, #1
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	23c2      	movs	r3, #194	; 0xc2
 8003436:	33ff      	adds	r3, #255	; 0xff
 8003438:	429a      	cmp	r2, r3
 800343a:	d007      	beq.n	800344c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003444:	4313      	orrs	r3, r2
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	055b      	lsls	r3, r3, #21
 8003464:	429a      	cmp	r2, r3
 8003466:	d01b      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d017      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	2b02      	cmp	r3, #2
 8003476:	d013      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2b03      	cmp	r3, #3
 800347e:	d00f      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	2b04      	cmp	r3, #4
 8003486:	d00b      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	2b05      	cmp	r3, #5
 800348e:	d007      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2b06      	cmp	r3, #6
 8003496:	d003      	beq.n	80034a0 <HAL_ADC_Init+0x1dc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	2b07      	cmp	r3, #7
 800349e:	d112      	bne.n	80034c6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2107      	movs	r1, #7
 80034ac:	438a      	bics	r2, r1
 80034ae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6959      	ldr	r1, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	2207      	movs	r2, #7
 80034bc:	401a      	ands	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <HAL_ADC_Init+0x27c>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d10b      	bne.n	80034ee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	2203      	movs	r2, #3
 80034e2:	4393      	bics	r3, r2
 80034e4:	2201      	movs	r2, #1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034ec:	e01c      	b.n	8003528 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	2212      	movs	r2, #18
 80034f4:	4393      	bics	r3, r2
 80034f6:	2210      	movs	r2, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	2201      	movs	r2, #1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800350a:	230f      	movs	r3, #15
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003512:	e009      	b.n	8003528 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	2210      	movs	r2, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003520:	230f      	movs	r3, #15
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003528:	230f      	movs	r3, #15
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	781b      	ldrb	r3, [r3, #0]
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	fffffefd 	.word	0xfffffefd
 800353c:	fffe0219 	.word	0xfffe0219
 8003540:	833fffe7 	.word	0x833fffe7

08003544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003550:	2317      	movs	r3, #23
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2204      	movs	r2, #4
 8003560:	4013      	ands	r3, r2
 8003562:	d15e      	bne.n	8003622 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2234      	movs	r2, #52	; 0x34
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Start_DMA+0x2e>
 800356e:	2302      	movs	r3, #2
 8003570:	e05e      	b.n	8003630 <HAL_ADC_Start_DMA+0xec>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2234      	movs	r2, #52	; 0x34
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	7e5b      	ldrb	r3, [r3, #25]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003582:	2317      	movs	r3, #23
 8003584:	18fc      	adds	r4, r7, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 f96b 	bl	8003864 <ADC_Enable>
 800358e:	0003      	movs	r3, r0
 8003590:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003592:	2317      	movs	r3, #23
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d146      	bne.n	800362a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <HAL_ADC_Start_DMA+0xf4>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	0052      	lsls	r2, r2, #1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2234      	movs	r2, #52	; 0x34
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_ADC_Start_DMA+0xf8>)
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_ADC_Start_DMA+0xfc>)
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_ADC_Start_DMA+0x100>)
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	221c      	movs	r2, #28
 80035da:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2110      	movs	r1, #16
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	430a      	orrs	r2, r1
 80035fa:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	0019      	movs	r1, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f000 fc00 	bl	8003e10 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2104      	movs	r1, #4
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	e003      	b.n	800362a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800362a:	2317      	movs	r3, #23
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b007      	add	sp, #28
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	fffff0fe 	.word	0xfffff0fe
 800363c:	0800396d 	.word	0x0800396d
 8003640:	08003a21 	.word	0x08003a21
 8003644:	08003a3f 	.word	0x08003a3f

08003648 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003682:	230f      	movs	r3, #15
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	055b      	lsls	r3, r3, #21
 8003696:	429a      	cmp	r2, r3
 8003698:	d011      	beq.n	80036be <HAL_ADC_ConfigChannel+0x46>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d00d      	beq.n	80036be <HAL_ADC_ConfigChannel+0x46>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d009      	beq.n	80036be <HAL_ADC_ConfigChannel+0x46>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d005      	beq.n	80036be <HAL_ADC_ConfigChannel+0x46>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d001      	beq.n	80036be <HAL_ADC_ConfigChannel+0x46>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2234      	movs	r2, #52	; 0x34
 80036c2:	5c9b      	ldrb	r3, [r3, r2]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x54>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0bb      	b.n	8003844 <HAL_ADC_ConfigChannel+0x1cc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2234      	movs	r2, #52	; 0x34
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
 80036de:	d000      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x6a>
 80036e0:	e09f      	b.n	8003822 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a59      	ldr	r2, [pc, #356]	; (800384c <HAL_ADC_ConfigChannel+0x1d4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x76>
 80036ec:	e077      	b.n	80037de <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	055b      	lsls	r3, r3, #21
 800370c:	429a      	cmp	r2, r3
 800370e:	d037      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d033      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2b02      	cmp	r3, #2
 800371e:	d02f      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2b03      	cmp	r3, #3
 8003726:	d02b      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2b04      	cmp	r3, #4
 800372e:	d027      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	2b05      	cmp	r3, #5
 8003736:	d023      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2b06      	cmp	r3, #6
 800373e:	d01f      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b07      	cmp	r3, #7
 8003746:	d01b      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2107      	movs	r1, #7
 8003754:	400b      	ands	r3, r1
 8003756:	429a      	cmp	r2, r3
 8003758:	d012      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2107      	movs	r1, #7
 8003766:	438a      	bics	r2, r1
 8003768:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6959      	ldr	r1, [r3, #20]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2207      	movs	r2, #7
 8003776:	401a      	ands	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b10      	cmp	r3, #16
 8003786:	d003      	beq.n	8003790 <HAL_ADC_ConfigChannel+0x118>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b11      	cmp	r3, #17
 800378e:	d152      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003790:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_ADC_ConfigChannel+0x1d8>)
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b10      	cmp	r3, #16
 800379a:	d102      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x12a>
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	e001      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x12e>
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	03db      	lsls	r3, r3, #15
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <HAL_ADC_ConfigChannel+0x1d8>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d140      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_ADC_ConfigChannel+0x1dc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4927      	ldr	r1, [pc, #156]	; (8003858 <HAL_ADC_ConfigChannel+0x1e0>)
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fc fca4 	bl	8000108 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	001a      	movs	r2, r3
 80037c4:	0013      	movs	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037ce:	e002      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f9      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x158>
 80037dc:	e02b      	b.n	8003836 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	4099      	lsls	r1, r3
 80037ec:	000b      	movs	r3, r1
 80037ee:	43d9      	mvns	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	400a      	ands	r2, r1
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d003      	beq.n	8003808 <HAL_ADC_ConfigChannel+0x190>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b11      	cmp	r3, #17
 8003806:	d116      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_ADC_ConfigChannel+0x1d8>)
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b10      	cmp	r3, #16
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x1a0>
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <HAL_ADC_ConfigChannel+0x1e4>)
 8003816:	e000      	b.n	800381a <HAL_ADC_ConfigChannel+0x1a2>
 8003818:	4a11      	ldr	r2, [pc, #68]	; (8003860 <HAL_ADC_ConfigChannel+0x1e8>)
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <HAL_ADC_ConfigChannel+0x1d8>)
 800381c:	400a      	ands	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e009      	b.n	8003836 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	2220      	movs	r2, #32
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800382e:	230f      	movs	r3, #15
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2234      	movs	r2, #52	; 0x34
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b004      	add	sp, #16
 800384a:	bd80      	pop	{r7, pc}
 800384c:	00001001 	.word	0x00001001
 8003850:	40012708 	.word	0x40012708
 8003854:	20000000 	.word	0x20000000
 8003858:	000f4240 	.word	0x000f4240
 800385c:	ff7fffff 	.word	0xff7fffff
 8003860:	ffbfffff 	.word	0xffbfffff

08003864 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2203      	movs	r2, #3
 800387c:	4013      	ands	r3, r2
 800387e:	2b01      	cmp	r3, #1
 8003880:	d112      	bne.n	80038a8 <ADC_Enable+0x44>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	4013      	ands	r3, r2
 800388c:	2b01      	cmp	r3, #1
 800388e:	d009      	beq.n	80038a4 <ADC_Enable+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	401a      	ands	r2, r3
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d101      	bne.n	80038a8 <ADC_Enable+0x44>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <ADC_Enable+0x46>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d152      	bne.n	8003954 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <ADC_Enable+0xfc>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	d00d      	beq.n	80038d6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	2210      	movs	r2, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2201      	movs	r2, #1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e03f      	b.n	8003956 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <ADC_Enable+0x100>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	491f      	ldr	r1, [pc, #124]	; (8003968 <ADC_Enable+0x104>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7fc fc0b 	bl	8000108 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038f6:	e002      	b.n	80038fe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f9      	bne.n	80038f8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003904:	f7ff fcd4 	bl	80032b0 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800390c:	e01b      	b.n	8003946 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800390e:	f7ff fccf 	bl	80032b0 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d914      	bls.n	8003946 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2201      	movs	r2, #1
 8003924:	4013      	ands	r3, r2
 8003926:	2b01      	cmp	r3, #1
 8003928:	d00d      	beq.n	8003946 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	2210      	movs	r2, #16
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	2201      	movs	r2, #1
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e007      	b.n	8003956 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	2b01      	cmp	r3, #1
 8003952:	d1dc      	bne.n	800390e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	80000017 	.word	0x80000017
 8003964:	20000000 	.word	0x20000000
 8003968:	000f4240 	.word	0x000f4240

0800396c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	2250      	movs	r2, #80	; 0x50
 8003980:	4013      	ands	r3, r2
 8003982:	d140      	bne.n	8003a06 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	23c0      	movs	r3, #192	; 0xc0
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	4013      	ands	r3, r2
 800399e:	d12d      	bne.n	80039fc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d129      	bne.n	80039fc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2208      	movs	r2, #8
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d122      	bne.n	80039fc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2204      	movs	r2, #4
 80039be:	4013      	ands	r3, r2
 80039c0:	d110      	bne.n	80039e4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	210c      	movs	r1, #12
 80039ce:	438a      	bics	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <ADC_DMAConvCplt+0xb0>)
 80039d8:	4013      	ands	r3, r2
 80039da:	2201      	movs	r2, #1
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
 80039e2:	e00b      	b.n	80039fc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	2220      	movs	r2, #32
 80039ea:	431a      	orrs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	2201      	movs	r2, #1
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7ff fe22 	bl	8003648 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003a04:	e005      	b.n	8003a12 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	0010      	movs	r0, r2
 8003a10:	4798      	blx	r3
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	fffffefe 	.word	0xfffffefe

08003a20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7ff fe11 	bl	8003658 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	431a      	orrs	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff fdfe 	bl	8003668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b004      	add	sp, #16
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a7c:	2317      	movs	r3, #23
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2234      	movs	r2, #52	; 0x34
 8003a90:	5c9b      	ldrb	r3, [r3, r2]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_ADCEx_Calibration_Start+0x26>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e08d      	b.n	8003bb6 <HAL_ADCEx_Calibration_Start+0x142>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2234      	movs	r2, #52	; 0x34
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d112      	bne.n	8003ad6 <HAL_ADCEx_Calibration_Start+0x62>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d009      	beq.n	8003ad2 <HAL_ADCEx_Calibration_Start+0x5e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	401a      	ands	r2, r3
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADCEx_Calibration_Start+0x62>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_ADCEx_Calibration_Start+0x64>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d15b      	bne.n	8003b94 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2203      	movs	r2, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2103      	movs	r1, #3
 8003b04:	438a      	bics	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	0609      	lsls	r1, r1, #24
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003b1a:	f7ff fbc9 	bl	80032b0 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b22:	e01d      	b.n	8003b60 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b24:	f7ff fbc4 	bl	80032b0 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d916      	bls.n	8003b60 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	0fdb      	lsrs	r3, r3, #31
 8003b3a:	07da      	lsls	r2, r3, #31
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d10d      	bne.n	8003b60 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	2212      	movs	r2, #18
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2234      	movs	r2, #52	; 0x34
 8003b58:	2100      	movs	r1, #0
 8003b5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e02a      	b.n	8003bb6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0fdb      	lsrs	r3, r3, #31
 8003b68:	07da      	lsls	r2, r3, #31
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d0d8      	beq.n	8003b24 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68d9      	ldr	r1, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	2203      	movs	r2, #3
 8003b88:	4393      	bics	r3, r2
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
 8003b92:	e009      	b.n	8003ba8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2220      	movs	r2, #32
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ba0:	2317      	movs	r3, #23
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2234      	movs	r2, #52	; 0x34
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003bb0:	2317      	movs	r3, #23
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b006      	add	sp, #24
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	fffffefd 	.word	0xfffffefd

08003bc4 <__NVIC_EnableIRQ>:
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	0002      	movs	r2, r0
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	1dfb      	adds	r3, r7, #7
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd6:	d809      	bhi.n	8003bec <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd8:	1dfb      	adds	r3, r7, #7
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	001a      	movs	r2, r3
 8003bde:	231f      	movs	r3, #31
 8003be0:	401a      	ands	r2, r3
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <__NVIC_EnableIRQ+0x30>)
 8003be4:	2101      	movs	r1, #1
 8003be6:	4091      	lsls	r1, r2
 8003be8:	000a      	movs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	0002      	movs	r2, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	1dfb      	adds	r3, r7, #7
 8003c04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	1dfb      	adds	r3, r7, #7
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0c:	d828      	bhi.n	8003c60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c0e:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <__NVIC_SetPriority+0xd4>)
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	33c0      	adds	r3, #192	; 0xc0
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	589b      	ldr	r3, [r3, r2]
 8003c1e:	1dfa      	adds	r2, r7, #7
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	0011      	movs	r1, r2
 8003c24:	2203      	movs	r2, #3
 8003c26:	400a      	ands	r2, r1
 8003c28:	00d2      	lsls	r2, r2, #3
 8003c2a:	21ff      	movs	r1, #255	; 0xff
 8003c2c:	4091      	lsls	r1, r2
 8003c2e:	000a      	movs	r2, r1
 8003c30:	43d2      	mvns	r2, r2
 8003c32:	401a      	ands	r2, r3
 8003c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	1dfb      	adds	r3, r7, #7
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	0018      	movs	r0, r3
 8003c44:	2303      	movs	r3, #3
 8003c46:	4003      	ands	r3, r0
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c4c:	481f      	ldr	r0, [pc, #124]	; (8003ccc <__NVIC_SetPriority+0xd4>)
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	430a      	orrs	r2, r1
 8003c58:	33c0      	adds	r3, #192	; 0xc0
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c5e:	e031      	b.n	8003cc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c60:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <__NVIC_SetPriority+0xd8>)
 8003c62:	1dfb      	adds	r3, r7, #7
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	0019      	movs	r1, r3
 8003c68:	230f      	movs	r3, #15
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	3b08      	subs	r3, #8
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3306      	adds	r3, #6
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	18d3      	adds	r3, r2, r3
 8003c76:	3304      	adds	r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1dfa      	adds	r2, r7, #7
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	0011      	movs	r1, r2
 8003c80:	2203      	movs	r2, #3
 8003c82:	400a      	ands	r2, r1
 8003c84:	00d2      	lsls	r2, r2, #3
 8003c86:	21ff      	movs	r1, #255	; 0xff
 8003c88:	4091      	lsls	r1, r2
 8003c8a:	000a      	movs	r2, r1
 8003c8c:	43d2      	mvns	r2, r2
 8003c8e:	401a      	ands	r2, r3
 8003c90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	019b      	lsls	r3, r3, #6
 8003c96:	22ff      	movs	r2, #255	; 0xff
 8003c98:	401a      	ands	r2, r3
 8003c9a:	1dfb      	adds	r3, r7, #7
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	4003      	ands	r3, r0
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ca8:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <__NVIC_SetPriority+0xd8>)
 8003caa:	1dfb      	adds	r3, r7, #7
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	001c      	movs	r4, r3
 8003cb0:	230f      	movs	r3, #15
 8003cb2:	4023      	ands	r3, r4
 8003cb4:	3b08      	subs	r3, #8
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	3306      	adds	r3, #6
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	18c3      	adds	r3, r0, r3
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	601a      	str	r2, [r3, #0]
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b003      	add	sp, #12
 8003cca:	bd90      	pop	{r4, r7, pc}
 8003ccc:	e000e100 	.word	0xe000e100
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1e5a      	subs	r2, r3, #1
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	045b      	lsls	r3, r3, #17
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d301      	bcc.n	8003cec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e010      	b.n	8003d0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <SysTick_Config+0x44>)
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	425b      	negs	r3, r3
 8003cf8:	2103      	movs	r1, #3
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7ff ff7c 	bl	8003bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <SysTick_Config+0x44>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <SysTick_Config+0x44>)
 8003d08:	2207      	movs	r2, #7
 8003d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	e000e010 	.word	0xe000e010

08003d1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	210f      	movs	r1, #15
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	1c02      	adds	r2, r0, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	0011      	movs	r1, r2
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	1dfb      	adds	r3, r7, #7
 8003d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b25b      	sxtb	r3, r3
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff ff33 	bl	8003bc4 <__NVIC_EnableIRQ>
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b002      	add	sp, #8
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff ffaf 	bl	8003cd4 <SysTick_Config>
 8003d76:	0003      	movs	r3, r0
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e036      	b.n	8003e04 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_DMA_Init+0x8c>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f946 	bl	8004078 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2221      	movs	r2, #33	; 0x21
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b004      	add	sp, #16
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	ffffc00f 	.word	0xffffc00f

08003e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2317      	movs	r3, #23
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	5c9b      	ldrb	r3, [r3, r2]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_DMA_Start_IT+0x24>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e04f      	b.n	8003ed4 <HAL_DMA_Start_IT+0xc4>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	2101      	movs	r1, #1
 8003e3a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2221      	movs	r2, #33	; 0x21
 8003e40:	5c9b      	ldrb	r3, [r3, r2]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d13a      	bne.n	8003ebe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2221      	movs	r2, #33	; 0x21
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	438a      	bics	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f8d7 	bl	8004020 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	210e      	movs	r1, #14
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e00f      	b.n	8003eac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	210a      	movs	r1, #10
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e007      	b.n	8003ece <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ec6:	2317      	movs	r3, #23
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2202      	movs	r2, #2
 8003ecc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003ece:	2317      	movs	r3, #23
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b006      	add	sp, #24
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2204      	movs	r2, #4
 8003efa:	409a      	lsls	r2, r3
 8003efc:	0013      	movs	r3, r2
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	d024      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x72>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2204      	movs	r2, #4
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d020      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2220      	movs	r2, #32
 8003f14:	4013      	ands	r3, r2
 8003f16:	d107      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2104      	movs	r1, #4
 8003f24:	438a      	bics	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	2104      	movs	r1, #4
 8003f32:	4091      	lsls	r1, r2
 8003f34:	000a      	movs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d100      	bne.n	8003f42 <HAL_DMA_IRQHandler+0x66>
 8003f40:	e06a      	b.n	8004018 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	0010      	movs	r0, r2
 8003f4a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f4c:	e064      	b.n	8004018 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2202      	movs	r2, #2
 8003f54:	409a      	lsls	r2, r3
 8003f56:	0013      	movs	r3, r2
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xda>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2202      	movs	r2, #2
 8003f62:	4013      	ands	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d10b      	bne.n	8003f8a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	210a      	movs	r1, #10
 8003f7e:	438a      	bics	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2221      	movs	r2, #33	; 0x21
 8003f86:	2101      	movs	r1, #1
 8003f88:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	2102      	movs	r1, #2
 8003f94:	4091      	lsls	r1, r2
 8003f96:	000a      	movs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	0010      	movs	r0, r2
 8003fb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fb4:	e030      	b.n	8004018 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2208      	movs	r2, #8
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d028      	beq.n	8004018 <HAL_DMA_IRQHandler+0x13c>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d024      	beq.n	8004018 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	210e      	movs	r1, #14
 8003fda:	438a      	bics	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4091      	lsls	r1, r2
 8003fea:	000a      	movs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	0010      	movs	r0, r2
 8004014:	4798      	blx	r3
    }
  }
}
 8004016:	e7ff      	b.n	8004018 <HAL_DMA_IRQHandler+0x13c>
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b004      	add	sp, #16
 800401e:	bd80      	pop	{r7, pc}

08004020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2101      	movs	r1, #1
 8004038:	4091      	lsls	r1, r2
 800403a:	000a      	movs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b10      	cmp	r3, #16
 800404c:	d108      	bne.n	8004060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800405e:	e007      	b.n	8004070 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bd80      	pop	{r7, pc}

08004078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <DMA_CalcBaseAndBitshift+0x30>)
 8004086:	4694      	mov	ip, r2
 8004088:	4463      	add	r3, ip
 800408a:	2114      	movs	r1, #20
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc f83b 	bl	8000108 <__udivsi3>
 8004092:	0003      	movs	r3, r0
 8004094:	009a      	lsls	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a03      	ldr	r2, [pc, #12]	; (80040ac <DMA_CalcBaseAndBitshift+0x34>)
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	bffdfff8 	.word	0xbffdfff8
 80040ac:	40020000 	.word	0x40020000

080040b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040be:	e14f      	b.n	8004360 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2101      	movs	r1, #1
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4091      	lsls	r1, r2
 80040ca:	000a      	movs	r2, r1
 80040cc:	4013      	ands	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d100      	bne.n	80040d8 <HAL_GPIO_Init+0x28>
 80040d6:	e140      	b.n	800435a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d005      	beq.n	80040f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2203      	movs	r2, #3
 80040ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d130      	bne.n	8004152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	409a      	lsls	r2, r3
 80040fe:	0013      	movs	r3, r2
 8004100:	43da      	mvns	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	0013      	movs	r3, r2
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004126:	2201      	movs	r2, #1
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	409a      	lsls	r2, r3
 800412c:	0013      	movs	r3, r2
 800412e:	43da      	mvns	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	2201      	movs	r2, #1
 800413e:	401a      	ands	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2203      	movs	r2, #3
 8004158:	4013      	ands	r3, r2
 800415a:	2b03      	cmp	r3, #3
 800415c:	d017      	beq.n	800418e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	2203      	movs	r2, #3
 800416a:	409a      	lsls	r2, r3
 800416c:	0013      	movs	r3, r2
 800416e:	43da      	mvns	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	0013      	movs	r3, r2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2203      	movs	r2, #3
 8004194:	4013      	ands	r3, r2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d123      	bne.n	80041e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	08da      	lsrs	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3208      	adds	r2, #8
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	58d3      	ldr	r3, [r2, r3]
 80041a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2207      	movs	r2, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	43da      	mvns	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2107      	movs	r1, #7
 80041c6:	400b      	ands	r3, r1
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	409a      	lsls	r2, r3
 80041cc:	0013      	movs	r3, r2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	43da      	mvns	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2203      	movs	r2, #3
 8004200:	401a      	ands	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	23c0      	movs	r3, #192	; 0xc0
 800421c:	029b      	lsls	r3, r3, #10
 800421e:	4013      	ands	r3, r2
 8004220:	d100      	bne.n	8004224 <HAL_GPIO_Init+0x174>
 8004222:	e09a      	b.n	800435a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004224:	4b54      	ldr	r3, [pc, #336]	; (8004378 <HAL_GPIO_Init+0x2c8>)
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_GPIO_Init+0x2c8>)
 800422a:	2101      	movs	r1, #1
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
 8004230:	4b51      	ldr	r3, [pc, #324]	; (8004378 <HAL_GPIO_Init+0x2c8>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2201      	movs	r2, #1
 8004236:	4013      	ands	r3, r2
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800423c:	4a4f      	ldr	r2, [pc, #316]	; (800437c <HAL_GPIO_Init+0x2cc>)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	3302      	adds	r3, #2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	589b      	ldr	r3, [r3, r2]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2203      	movs	r2, #3
 800424e:	4013      	ands	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	220f      	movs	r2, #15
 8004254:	409a      	lsls	r2, r3
 8004256:	0013      	movs	r3, r2
 8004258:	43da      	mvns	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	2390      	movs	r3, #144	; 0x90
 8004264:	05db      	lsls	r3, r3, #23
 8004266:	429a      	cmp	r2, r3
 8004268:	d013      	beq.n	8004292 <HAL_GPIO_Init+0x1e2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a44      	ldr	r2, [pc, #272]	; (8004380 <HAL_GPIO_Init+0x2d0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00d      	beq.n	800428e <HAL_GPIO_Init+0x1de>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a43      	ldr	r2, [pc, #268]	; (8004384 <HAL_GPIO_Init+0x2d4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <HAL_GPIO_Init+0x1da>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <HAL_GPIO_Init+0x2d8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_GPIO_Init+0x1d6>
 8004282:	2303      	movs	r3, #3
 8004284:	e006      	b.n	8004294 <HAL_GPIO_Init+0x1e4>
 8004286:	2305      	movs	r3, #5
 8004288:	e004      	b.n	8004294 <HAL_GPIO_Init+0x1e4>
 800428a:	2302      	movs	r3, #2
 800428c:	e002      	b.n	8004294 <HAL_GPIO_Init+0x1e4>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x1e4>
 8004292:	2300      	movs	r3, #0
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	2103      	movs	r1, #3
 8004298:	400a      	ands	r2, r1
 800429a:	0092      	lsls	r2, r2, #2
 800429c:	4093      	lsls	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042a4:	4935      	ldr	r1, [pc, #212]	; (800437c <HAL_GPIO_Init+0x2cc>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	3302      	adds	r3, #2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_GPIO_Init+0x2dc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	43da      	mvns	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	035b      	lsls	r3, r3, #13
 80042ca:	4013      	ands	r3, r2
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042d6:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_GPIO_Init+0x2dc>)
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_GPIO_Init+0x2dc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	039b      	lsls	r3, r3, #14
 80042f4:	4013      	ands	r3, r2
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <HAL_GPIO_Init+0x2dc>)
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_GPIO_Init+0x2dc>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43da      	mvns	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	029b      	lsls	r3, r3, #10
 800431e:	4013      	ands	r3, r2
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_GPIO_Init+0x2dc>)
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004330:	4b16      	ldr	r3, [pc, #88]	; (800438c <HAL_GPIO_Init+0x2dc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43da      	mvns	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	025b      	lsls	r3, r3, #9
 8004348:	4013      	ands	r3, r2
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <HAL_GPIO_Init+0x2dc>)
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	40da      	lsrs	r2, r3
 8004368:	1e13      	subs	r3, r2, #0
 800436a:	d000      	beq.n	800436e <HAL_GPIO_Init+0x2be>
 800436c:	e6a8      	b.n	80040c0 <HAL_GPIO_Init+0x10>
  } 
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	40010000 	.word	0x40010000
 8004380:	48000400 	.word	0x48000400
 8004384:	48000800 	.word	0x48000800
 8004388:	48000c00 	.word	0x48000c00
 800438c:	40010400 	.word	0x40010400

08004390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	220c      	movs	r2, #12
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d002      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x36>
 80043be:	e02c      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043c2:	613b      	str	r3, [r7, #16]
      break;
 80043c4:	e02c      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	220f      	movs	r2, #15
 80043cc:	4013      	ands	r3, r2
 80043ce:	4a19      	ldr	r2, [pc, #100]	; (8004434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043d4:	4b15      	ldr	r3, [pc, #84]	; (800442c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	220f      	movs	r2, #15
 80043da:	4013      	ands	r3, r2
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_RCC_GetSysClockFreq+0xa8>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	025b      	lsls	r3, r3, #9
 80043e8:	4013      	ands	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4810      	ldr	r0, [pc, #64]	; (8004430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043f0:	f7fb fe8a 	bl	8000108 <__udivsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	001a      	movs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4353      	muls	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e009      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	000a      	movs	r2, r1
 8004404:	0152      	lsls	r2, r2, #5
 8004406:	1a52      	subs	r2, r2, r1
 8004408:	0193      	lsls	r3, r2, #6
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	185b      	adds	r3, r3, r1
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
      break;
 8004418:	e002      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetSysClockFreq+0xa0>)
 800441c:	613b      	str	r3, [r7, #16]
      break;
 800441e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004420:	693b      	ldr	r3, [r7, #16]
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b006      	add	sp, #24
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	40021000 	.word	0x40021000
 8004430:	007a1200 	.word	0x007a1200
 8004434:	08006a70 	.word	0x08006a70
 8004438:	08006a80 	.word	0x08006a80

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b02      	ldr	r3, [pc, #8]	; (800444c <HAL_RCC_GetHCLKFreq+0x10>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	20000000 	.word	0x20000000

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004454:	f7ff fff2 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004458:	0001      	movs	r1, r0
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	2207      	movs	r2, #7
 8004462:	4013      	ands	r3, r2
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	40d9      	lsrs	r1, r3
 800446a:	000b      	movs	r3, r1
}    
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40021000 	.word	0x40021000
 8004478:	08006a68 	.word	0x08006a68

0800447c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e042      	b.n	8004514 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223d      	movs	r2, #61	; 0x3d
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	223c      	movs	r2, #60	; 0x3c
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7fe fd61 	bl	8002f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223d      	movs	r2, #61	; 0x3d
 80044ae:	2102      	movs	r1, #2
 80044b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	0019      	movs	r1, r3
 80044bc:	0010      	movs	r0, r2
 80044be:	f000 fac5 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2246      	movs	r2, #70	; 0x46
 80044c6:	2101      	movs	r1, #1
 80044c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	223e      	movs	r2, #62	; 0x3e
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	223f      	movs	r2, #63	; 0x3f
 80044d6:	2101      	movs	r1, #1
 80044d8:	5499      	strb	r1, [r3, r2]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	2101      	movs	r1, #1
 80044e0:	5499      	strb	r1, [r3, r2]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2241      	movs	r2, #65	; 0x41
 80044e6:	2101      	movs	r1, #1
 80044e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2242      	movs	r2, #66	; 0x42
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2243      	movs	r2, #67	; 0x43
 80044f6:	2101      	movs	r1, #1
 80044f8:	5499      	strb	r1, [r3, r2]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2244      	movs	r2, #68	; 0x44
 80044fe:	2101      	movs	r1, #1
 8004500:	5499      	strb	r1, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2245      	movs	r2, #69	; 0x45
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	223d      	movs	r2, #61	; 0x3d
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e042      	b.n	80045b4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	223d      	movs	r2, #61	; 0x3d
 8004532:	5c9b      	ldrb	r3, [r3, r2]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d107      	bne.n	800454a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223c      	movs	r2, #60	; 0x3c
 800453e:	2100      	movs	r1, #0
 8004540:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f000 f839 	bl	80045bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	223d      	movs	r2, #61	; 0x3d
 800454e:	2102      	movs	r1, #2
 8004550:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	0019      	movs	r1, r3
 800455c:	0010      	movs	r0, r2
 800455e:	f000 fa75 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2246      	movs	r2, #70	; 0x46
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	223e      	movs	r2, #62	; 0x3e
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	223f      	movs	r2, #63	; 0x3f
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2240      	movs	r2, #64	; 0x40
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2241      	movs	r2, #65	; 0x41
 8004586:	2101      	movs	r1, #1
 8004588:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2242      	movs	r2, #66	; 0x42
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2243      	movs	r2, #67	; 0x43
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2244      	movs	r2, #68	; 0x44
 800459e:	2101      	movs	r1, #1
 80045a0:	5499      	strb	r1, [r3, r2]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2245      	movs	r2, #69	; 0x45
 80045a6:	2101      	movs	r1, #1
 80045a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	223d      	movs	r2, #61	; 0x3d
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <HAL_TIM_PWM_Start+0x22>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	223e      	movs	r2, #62	; 0x3e
 80045e0:	5c9b      	ldrb	r3, [r3, r2]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	1e5a      	subs	r2, r3, #1
 80045e8:	4193      	sbcs	r3, r2
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e01f      	b.n	800462e <HAL_TIM_PWM_Start+0x62>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d108      	bne.n	8004606 <HAL_TIM_PWM_Start+0x3a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	223f      	movs	r2, #63	; 0x3f
 80045f8:	5c9b      	ldrb	r3, [r3, r2]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	1e5a      	subs	r2, r3, #1
 8004600:	4193      	sbcs	r3, r2
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e013      	b.n	800462e <HAL_TIM_PWM_Start+0x62>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d108      	bne.n	800461e <HAL_TIM_PWM_Start+0x52>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	4193      	sbcs	r3, r2
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e007      	b.n	800462e <HAL_TIM_PWM_Start+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2241      	movs	r2, #65	; 0x41
 8004622:	5c9b      	ldrb	r3, [r3, r2]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	1e5a      	subs	r2, r3, #1
 800462a:	4193      	sbcs	r3, r2
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e064      	b.n	8004700 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Start+0x7a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	223e      	movs	r2, #62	; 0x3e
 8004640:	2102      	movs	r1, #2
 8004642:	5499      	strb	r1, [r3, r2]
 8004644:	e013      	b.n	800466e <HAL_TIM_PWM_Start+0xa2>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0x8a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	223f      	movs	r2, #63	; 0x3f
 8004650:	2102      	movs	r1, #2
 8004652:	5499      	strb	r1, [r3, r2]
 8004654:	e00b      	b.n	800466e <HAL_TIM_PWM_Start+0xa2>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d104      	bne.n	8004666 <HAL_TIM_PWM_Start+0x9a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	2102      	movs	r1, #2
 8004662:	5499      	strb	r1, [r3, r2]
 8004664:	e003      	b.n	800466e <HAL_TIM_PWM_Start+0xa2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2241      	movs	r2, #65	; 0x41
 800466a:	2102      	movs	r1, #2
 800466c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fcdc 	bl	8005034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <HAL_TIM_PWM_Start+0x13c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_TIM_PWM_Start+0xce>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a20      	ldr	r2, [pc, #128]	; (800470c <HAL_TIM_PWM_Start+0x140>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIM_PWM_Start+0xce>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <HAL_TIM_PWM_Start+0x144>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_TIM_PWM_Start+0xd2>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_TIM_PWM_Start+0xd4>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	0209      	lsls	r1, r1, #8
 80046b2:	430a      	orrs	r2, r1
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <HAL_TIM_PWM_Start+0x13c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIM_PWM_Start+0xfe>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a13      	ldr	r2, [pc, #76]	; (8004714 <HAL_TIM_PWM_Start+0x148>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2207      	movs	r2, #7
 80046d2:	4013      	ands	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d010      	beq.n	80046fe <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2101      	movs	r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	e007      	b.n	80046fe <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b004      	add	sp, #16
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800
 8004714:	40000400 	.word	0x40000400

08004718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2317      	movs	r3, #23
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	223c      	movs	r2, #60	; 0x3c
 8004730:	5c9b      	ldrb	r3, [r3, r2]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004736:	2302      	movs	r3, #2
 8004738:	e0ad      	b.n	8004896 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b0c      	cmp	r3, #12
 8004746:	d100      	bne.n	800474a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004748:	e076      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x120>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d900      	bls.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004750:	e095      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d04e      	beq.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b08      	cmp	r3, #8
 800475c:	d900      	bls.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x48>
 800475e:	e08e      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d021      	beq.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800476c:	e087      	b.n	800487e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	0011      	movs	r1, r2
 8004776:	0018      	movs	r0, r3
 8004778:	f000 f9e2 	bl	8004b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2108      	movs	r1, #8
 8004788:	430a      	orrs	r2, r1
 800478a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2104      	movs	r1, #4
 8004798:	438a      	bics	r2, r1
 800479a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6999      	ldr	r1, [r3, #24]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	619a      	str	r2, [r3, #24]
      break;
 80047ae:	e06b      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	0011      	movs	r1, r2
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 fa3f 	bl	8004c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	0109      	lsls	r1, r1, #4
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4931      	ldr	r1, [pc, #196]	; (80048a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80047dc:	400a      	ands	r2, r1
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6999      	ldr	r1, [r3, #24]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	021a      	lsls	r2, r3, #8
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	619a      	str	r2, [r3, #24]
      break;
 80047f4:	e048      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	0011      	movs	r1, r2
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 fa9a 	bl	8004d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2108      	movs	r1, #8
 8004810:	430a      	orrs	r2, r1
 8004812:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2104      	movs	r1, #4
 8004820:	438a      	bics	r2, r1
 8004822:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69d9      	ldr	r1, [r3, #28]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	61da      	str	r2, [r3, #28]
      break;
 8004836:	e027      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	0011      	movs	r1, r2
 8004840:	0018      	movs	r0, r3
 8004842:	f000 faf9 	bl	8004e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	0109      	lsls	r1, r1, #4
 8004854:	430a      	orrs	r2, r1
 8004856:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	490f      	ldr	r1, [pc, #60]	; (80048a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004864:	400a      	ands	r2, r1
 8004866:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69d9      	ldr	r1, [r3, #28]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	61da      	str	r2, [r3, #28]
      break;
 800487c:	e004      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800487e:	2317      	movs	r3, #23
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	223c      	movs	r2, #60	; 0x3c
 800488c:	2100      	movs	r1, #0
 800488e:	5499      	strb	r1, [r3, r2]

  return status;
 8004890:	2317      	movs	r3, #23
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	781b      	ldrb	r3, [r3, #0]
}
 8004896:	0018      	movs	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	b006      	add	sp, #24
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	fffffbff 	.word	0xfffffbff

080048a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	230f      	movs	r3, #15
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	223c      	movs	r2, #60	; 0x3c
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIM_ConfigClockSource+0x20>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0bc      	b.n	8004a3e <HAL_TIM_ConfigClockSource+0x19a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	223c      	movs	r2, #60	; 0x3c
 80048c8:	2101      	movs	r1, #1
 80048ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	223d      	movs	r2, #61	; 0x3d
 80048d0:	2102      	movs	r1, #2
 80048d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2277      	movs	r2, #119	; 0x77
 80048e0:	4393      	bics	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <HAL_TIM_ConfigClockSource+0x1a4>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2280      	movs	r2, #128	; 0x80
 80048fa:	0192      	lsls	r2, r2, #6
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xde>
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	0192      	lsls	r2, r2, #6
 8004904:	4293      	cmp	r3, r2
 8004906:	d900      	bls.n	800490a <HAL_TIM_ConfigClockSource+0x66>
 8004908:	e088      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	0152      	lsls	r2, r2, #5
 800490e:	4293      	cmp	r3, r2
 8004910:	d100      	bne.n	8004914 <HAL_TIM_ConfigClockSource+0x70>
 8004912:	e088      	b.n	8004a26 <HAL_TIM_ConfigClockSource+0x182>
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	0152      	lsls	r2, r2, #5
 8004918:	4293      	cmp	r3, r2
 800491a:	d900      	bls.n	800491e <HAL_TIM_ConfigClockSource+0x7a>
 800491c:	e07e      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 800491e:	2b70      	cmp	r3, #112	; 0x70
 8004920:	d018      	beq.n	8004954 <HAL_TIM_ConfigClockSource+0xb0>
 8004922:	d900      	bls.n	8004926 <HAL_TIM_ConfigClockSource+0x82>
 8004924:	e07a      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 8004926:	2b60      	cmp	r3, #96	; 0x60
 8004928:	d04f      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x126>
 800492a:	d900      	bls.n	800492e <HAL_TIM_ConfigClockSource+0x8a>
 800492c:	e076      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 800492e:	2b50      	cmp	r3, #80	; 0x50
 8004930:	d03b      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x106>
 8004932:	d900      	bls.n	8004936 <HAL_TIM_ConfigClockSource+0x92>
 8004934:	e072      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d057      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x146>
 800493a:	d900      	bls.n	800493e <HAL_TIM_ConfigClockSource+0x9a>
 800493c:	e06e      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 800493e:	2b30      	cmp	r3, #48	; 0x30
 8004940:	d063      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x166>
 8004942:	d86b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d060      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x166>
 8004948:	d868      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d05d      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x166>
 800494e:	2b10      	cmp	r3, #16
 8004950:	d05b      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x166>
 8004952:	e063      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004964:	f000 fb46 	bl	8004ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2277      	movs	r2, #119	; 0x77
 8004974:	4313      	orrs	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	609a      	str	r2, [r3, #8]
      break;
 8004980:	e052      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004992:	f000 fb2f 	bl	8004ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	01c9      	lsls	r1, r1, #7
 80049a4:	430a      	orrs	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e03e      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	001a      	movs	r2, r3
 80049b8:	f000 faa2 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2150      	movs	r1, #80	; 0x50
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 fafc 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 80049c8:	e02e      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d6:	001a      	movs	r2, r3
 80049d8:	f000 fac0 	bl	8004f5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2160      	movs	r1, #96	; 0x60
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 faec 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 80049e8:	e01e      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	001a      	movs	r2, r3
 80049f8:	f000 fa82 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 fadc 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004a08:	e00e      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	0019      	movs	r1, r3
 8004a14:	0010      	movs	r0, r2
 8004a16:	f000 fad3 	bl	8004fc0 <TIM_ITRx_SetConfig>
      break;
 8004a1a:	e005      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a1c:	230f      	movs	r3, #15
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
      break;
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	223d      	movs	r2, #61	; 0x3d
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	223c      	movs	r2, #60	; 0x3c
 8004a34:	2100      	movs	r1, #0
 8004a36:	5499      	strb	r1, [r3, r2]

  return status;
 8004a38:	230f      	movs	r3, #15
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	781b      	ldrb	r3, [r3, #0]
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b004      	add	sp, #16
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	ffff00ff 	.word	0xffff00ff

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <TIM_Base_SetConfig+0xdc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x20>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <TIM_Base_SetConfig+0xe0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2270      	movs	r2, #112	; 0x70
 8004a70:	4393      	bics	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <TIM_Base_SetConfig+0xdc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <TIM_Base_SetConfig+0x5a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <TIM_Base_SetConfig+0xe0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_Base_SetConfig+0x5a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <TIM_Base_SetConfig+0xe4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <TIM_Base_SetConfig+0x5a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <TIM_Base_SetConfig+0xe8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_Base_SetConfig+0x5a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <TIM_Base_SetConfig+0xec>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a24      	ldr	r2, [pc, #144]	; (8004b3c <TIM_Base_SetConfig+0xf0>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	4393      	bics	r3, r2
 8004abe:	001a      	movs	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <TIM_Base_SetConfig+0xdc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <TIM_Base_SetConfig+0xe8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a11      	ldr	r2, [pc, #68]	; (8004b38 <TIM_Base_SetConfig+0xec>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d103      	bne.n	8004afe <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d106      	bne.n	8004b1e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2201      	movs	r2, #1
 8004b16:	4393      	bics	r3, r2
 8004b18:	001a      	movs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]
  }
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b004      	add	sp, #16
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40002000 	.word	0x40002000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	fffffcff 	.word	0xfffffcff

08004b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	2201      	movs	r2, #1
 8004b56:	4393      	bics	r3, r2
 8004b58:	001a      	movs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2270      	movs	r2, #112	; 0x70
 8004b6e:	4393      	bics	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2203      	movs	r2, #3
 8004b76:	4393      	bics	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2202      	movs	r2, #2
 8004b88:	4393      	bics	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <TIM_OC1_SetConfig+0xe8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_OC1_SetConfig+0x6e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <TIM_OC1_SetConfig+0xec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC1_SetConfig+0x6e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_OC1_SetConfig+0xf0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10c      	bne.n	8004bc8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	4393      	bics	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <TIM_OC1_SetConfig+0xe8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC1_SetConfig+0xa0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <TIM_OC1_SetConfig+0xec>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC1_SetConfig+0xa0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <TIM_OC1_SetConfig+0xf0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d111      	bne.n	8004c04 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <TIM_OC1_SetConfig+0xf4>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <TIM_OC1_SetConfig+0xf8>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b006      	add	sp, #24
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800
 8004c34:	fffffeff 	.word	0xfffffeff
 8004c38:	fffffdff 	.word	0xfffffdff

08004c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	2210      	movs	r2, #16
 8004c52:	4393      	bics	r3, r2
 8004c54:	001a      	movs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <TIM_OC2_SetConfig+0xe0>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <TIM_OC2_SetConfig+0xe4>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2220      	movs	r2, #32
 8004c86:	4393      	bics	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a22      	ldr	r2, [pc, #136]	; (8004d24 <TIM_OC2_SetConfig+0xe8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10d      	bne.n	8004cba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	4393      	bics	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2240      	movs	r2, #64	; 0x40
 8004cb6:	4393      	bics	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <TIM_OC2_SetConfig+0xe8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_OC2_SetConfig+0x96>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <TIM_OC2_SetConfig+0xec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC2_SetConfig+0x96>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <TIM_OC2_SetConfig+0xf0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d113      	bne.n	8004cfa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <TIM_OC2_SetConfig+0xf4>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <TIM_OC2_SetConfig+0xf8>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b006      	add	sp, #24
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	ffff8fff 	.word	0xffff8fff
 8004d20:	fffffcff 	.word	0xfffffcff
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800
 8004d30:	fffffbff 	.word	0xfffffbff
 8004d34:	fffff7ff 	.word	0xfffff7ff

08004d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a31      	ldr	r2, [pc, #196]	; (8004e14 <TIM_OC3_SetConfig+0xdc>)
 8004d4e:	401a      	ands	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2270      	movs	r2, #112	; 0x70
 8004d64:	4393      	bics	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	4393      	bics	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10d      	bne.n	8004db2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <TIM_OC3_SetConfig+0xe8>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <TIM_OC3_SetConfig+0xec>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_OC3_SetConfig+0x92>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <TIM_OC3_SetConfig+0xf0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x92>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <TIM_OC3_SetConfig+0xf4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d113      	bne.n	8004df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <TIM_OC3_SetConfig+0xf8>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <TIM_OC3_SetConfig+0xfc>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b006      	add	sp, #24
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	fffffeff 	.word	0xfffffeff
 8004e18:	fffffdff 	.word	0xfffffdff
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	fffff7ff 	.word	0xfffff7ff
 8004e24:	fffffbff 	.word	0xfffffbff
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	ffffefff 	.word	0xffffefff
 8004e34:	ffffdfff 	.word	0xffffdfff

08004e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <TIM_OC4_SetConfig+0xa8>)
 8004e4e:	401a      	ands	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <TIM_OC4_SetConfig+0xac>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <TIM_OC4_SetConfig+0xb0>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <TIM_OC4_SetConfig+0xb4>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <TIM_OC4_SetConfig+0xb8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x70>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <TIM_OC4_SetConfig+0xbc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x70>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <TIM_OC4_SetConfig+0xc0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d109      	bne.n	8004ebc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4a14      	ldr	r2, [pc, #80]	; (8004efc <TIM_OC4_SetConfig+0xc4>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b006      	add	sp, #24
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	ffffefff 	.word	0xffffefff
 8004ee4:	ffff8fff 	.word	0xffff8fff
 8004ee8:	fffffcff 	.word	0xfffffcff
 8004eec:	ffffdfff 	.word	0xffffdfff
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800
 8004efc:	ffffbfff 	.word	0xffffbfff

08004f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	2201      	movs	r2, #1
 8004f18:	4393      	bics	r3, r2
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	22f0      	movs	r2, #240	; 0xf0
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	220a      	movs	r2, #10
 8004f3c:	4393      	bics	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b006      	add	sp, #24
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	2210      	movs	r2, #16
 8004f74:	4393      	bics	r3, r2
 8004f76:	001a      	movs	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <TIM_TI2_ConfigInputStage+0x60>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	22a0      	movs	r2, #160	; 0xa0
 8004f98:	4393      	bics	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b006      	add	sp, #24
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	ffff0fff 	.word	0xffff0fff

08004fc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2270      	movs	r2, #112	; 0x70
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	2207      	movs	r2, #7
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4a09      	ldr	r2, [pc, #36]	; (8005030 <TIM_ETR_SetConfig+0x3c>)
 800500c:	4013      	ands	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	431a      	orrs	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	46bd      	mov	sp, r7
 800502c:	b006      	add	sp, #24
 800502e:	bd80      	pop	{r7, pc}
 8005030:	ffff00ff 	.word	0xffff00ff

08005034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	221f      	movs	r2, #31
 8005044:	4013      	ands	r3, r2
 8005046:	2201      	movs	r2, #1
 8005048:	409a      	lsls	r2, r3
 800504a:	0013      	movs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	43d2      	mvns	r2, r2
 8005056:	401a      	ands	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	211f      	movs	r1, #31
 8005064:	400b      	ands	r3, r1
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4099      	lsls	r1, r3
 800506a:	000b      	movs	r3, r1
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	46bd      	mov	sp, r7
 8005076:	b006      	add	sp, #24
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	223c      	movs	r2, #60	; 0x3c
 800508a:	5c9b      	ldrb	r3, [r3, r2]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e03c      	b.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	223c      	movs	r2, #60	; 0x3c
 8005098:	2101      	movs	r1, #1
 800509a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	223d      	movs	r2, #61	; 0x3d
 80050a0:	2102      	movs	r1, #2
 80050a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2270      	movs	r2, #112	; 0x70
 80050b8:	4393      	bics	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0f      	ldr	r2, [pc, #60]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10c      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	4393      	bics	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	223d      	movs	r2, #61	; 0x3d
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	223c      	movs	r2, #60	; 0x3c
 8005108:	2100      	movs	r1, #0
 800510a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40000400 	.word	0x40000400

08005120 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	223c      	movs	r2, #60	; 0x3c
 8005132:	5c9b      	ldrb	r3, [r3, r2]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e03e      	b.n	80051ba <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	223c      	movs	r2, #60	; 0x3c
 8005140:	2101      	movs	r1, #1
 8005142:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	22ff      	movs	r2, #255	; 0xff
 8005148:	4393      	bics	r3, r2
 800514a:	001a      	movs	r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005158:	401a      	ands	r2, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005166:	401a      	ands	r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005174:	401a      	ands	r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005182:	401a      	ands	r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005190:	401a      	ands	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a0e      	ldr	r2, [pc, #56]	; (80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800519e:	401a      	ands	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	223c      	movs	r2, #60	; 0x3c
 80051b4:	2100      	movs	r1, #0
 80051b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b004      	add	sp, #16
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	fffffcff 	.word	0xfffffcff
 80051c8:	fffffbff 	.word	0xfffffbff
 80051cc:	fffff7ff 	.word	0xfffff7ff
 80051d0:	ffffefff 	.word	0xffffefff
 80051d4:	ffffdfff 	.word	0xffffdfff
 80051d8:	ffffbfff 	.word	0xffffbfff

080051dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e044      	b.n	8005278 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2278      	movs	r2, #120	; 0x78
 80051fa:	2100      	movs	r1, #0
 80051fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f7fd ff85 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2224      	movs	r2, #36	; 0x24
 800520a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	438a      	bics	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 f954 	bl	80054d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	0018      	movs	r0, r3
 8005230:	f000 f828 	bl	8005284 <UART_SetConfig>
 8005234:	0003      	movs	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e01c      	b.n	8005278 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	490d      	ldr	r1, [pc, #52]	; (8005280 <HAL_UART_Init+0xa4>)
 800524a:	400a      	ands	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2108      	movs	r1, #8
 800525a:	438a      	bics	r2, r1
 800525c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2101      	movs	r1, #1
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f9e3 	bl	800563c <UART_CheckIdleState>
 8005276:	0003      	movs	r3, r0
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}
 8005280:	fffff7ff 	.word	0xfffff7ff

08005284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800528c:	231e      	movs	r3, #30
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a83      	ldr	r2, [pc, #524]	; (80054c0 <UART_SetConfig+0x23c>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	0019      	movs	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a7e      	ldr	r2, [pc, #504]	; (80054c4 <UART_SetConfig+0x240>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a75      	ldr	r2, [pc, #468]	; (80054c8 <UART_SetConfig+0x244>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005300:	4b72      	ldr	r3, [pc, #456]	; (80054cc <UART_SetConfig+0x248>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2203      	movs	r2, #3
 8005306:	4013      	ands	r3, r2
 8005308:	2b03      	cmp	r3, #3
 800530a:	d00d      	beq.n	8005328 <UART_SetConfig+0xa4>
 800530c:	d81b      	bhi.n	8005346 <UART_SetConfig+0xc2>
 800530e:	2b02      	cmp	r3, #2
 8005310:	d014      	beq.n	800533c <UART_SetConfig+0xb8>
 8005312:	d818      	bhi.n	8005346 <UART_SetConfig+0xc2>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <UART_SetConfig+0x9a>
 8005318:	2b01      	cmp	r3, #1
 800531a:	d00a      	beq.n	8005332 <UART_SetConfig+0xae>
 800531c:	e013      	b.n	8005346 <UART_SetConfig+0xc2>
 800531e:	231f      	movs	r3, #31
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e012      	b.n	800534e <UART_SetConfig+0xca>
 8005328:	231f      	movs	r3, #31
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2202      	movs	r2, #2
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e00d      	b.n	800534e <UART_SetConfig+0xca>
 8005332:	231f      	movs	r3, #31
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	2204      	movs	r2, #4
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e008      	b.n	800534e <UART_SetConfig+0xca>
 800533c:	231f      	movs	r3, #31
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	2208      	movs	r2, #8
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e003      	b.n	800534e <UART_SetConfig+0xca>
 8005346:	231f      	movs	r3, #31
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	2210      	movs	r2, #16
 800534c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	429a      	cmp	r2, r3
 8005358:	d15c      	bne.n	8005414 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800535a:	231f      	movs	r3, #31
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d015      	beq.n	8005390 <UART_SetConfig+0x10c>
 8005364:	dc18      	bgt.n	8005398 <UART_SetConfig+0x114>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d00d      	beq.n	8005386 <UART_SetConfig+0x102>
 800536a:	dc15      	bgt.n	8005398 <UART_SetConfig+0x114>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <UART_SetConfig+0xf2>
 8005370:	2b02      	cmp	r3, #2
 8005372:	d005      	beq.n	8005380 <UART_SetConfig+0xfc>
 8005374:	e010      	b.n	8005398 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005376:	f7ff f86b 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 800537a:	0003      	movs	r3, r0
 800537c:	61bb      	str	r3, [r7, #24]
        break;
 800537e:	e012      	b.n	80053a6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005380:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <UART_SetConfig+0x24c>)
 8005382:	61bb      	str	r3, [r7, #24]
        break;
 8005384:	e00f      	b.n	80053a6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005386:	f7ff f803 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800538a:	0003      	movs	r3, r0
 800538c:	61bb      	str	r3, [r7, #24]
        break;
 800538e:	e00a      	b.n	80053a6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	61bb      	str	r3, [r7, #24]
        break;
 8005396:	e006      	b.n	80053a6 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800539c:	231e      	movs	r3, #30
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
        break;
 80053a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d100      	bne.n	80053ae <UART_SetConfig+0x12a>
 80053ac:	e07a      	b.n	80054a4 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	005a      	lsls	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	18d2      	adds	r2, r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	0019      	movs	r1, r3
 80053c0:	0010      	movs	r0, r2
 80053c2:	f7fa fea1 	bl	8000108 <__udivsi3>
 80053c6:	0003      	movs	r3, r0
 80053c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d91c      	bls.n	800540a <UART_SetConfig+0x186>
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	025b      	lsls	r3, r3, #9
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d217      	bcs.n	800540a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	b29a      	uxth	r2, r3
 80053de:	200e      	movs	r0, #14
 80053e0:	183b      	adds	r3, r7, r0
 80053e2:	210f      	movs	r1, #15
 80053e4:	438a      	bics	r2, r1
 80053e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2207      	movs	r2, #7
 80053f0:	4013      	ands	r3, r2
 80053f2:	b299      	uxth	r1, r3
 80053f4:	183b      	adds	r3, r7, r0
 80053f6:	183a      	adds	r2, r7, r0
 80053f8:	8812      	ldrh	r2, [r2, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	183a      	adds	r2, r7, r0
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	e04c      	b.n	80054a4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800540a:	231e      	movs	r3, #30
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e047      	b.n	80054a4 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005414:	231f      	movs	r3, #31
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d015      	beq.n	800544a <UART_SetConfig+0x1c6>
 800541e:	dc18      	bgt.n	8005452 <UART_SetConfig+0x1ce>
 8005420:	2b04      	cmp	r3, #4
 8005422:	d00d      	beq.n	8005440 <UART_SetConfig+0x1bc>
 8005424:	dc15      	bgt.n	8005452 <UART_SetConfig+0x1ce>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <UART_SetConfig+0x1ac>
 800542a:	2b02      	cmp	r3, #2
 800542c:	d005      	beq.n	800543a <UART_SetConfig+0x1b6>
 800542e:	e010      	b.n	8005452 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005430:	f7ff f80e 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8005434:	0003      	movs	r3, r0
 8005436:	61bb      	str	r3, [r7, #24]
        break;
 8005438:	e012      	b.n	8005460 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800543a:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <UART_SetConfig+0x24c>)
 800543c:	61bb      	str	r3, [r7, #24]
        break;
 800543e:	e00f      	b.n	8005460 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005440:	f7fe ffa6 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8005444:	0003      	movs	r3, r0
 8005446:	61bb      	str	r3, [r7, #24]
        break;
 8005448:	e00a      	b.n	8005460 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	61bb      	str	r3, [r7, #24]
        break;
 8005450:	e006      	b.n	8005460 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005456:	231e      	movs	r3, #30
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
        break;
 800545e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01e      	beq.n	80054a4 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	085a      	lsrs	r2, r3, #1
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	18d2      	adds	r2, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	0019      	movs	r1, r3
 8005476:	0010      	movs	r0, r2
 8005478:	f7fa fe46 	bl	8000108 <__udivsi3>
 800547c:	0003      	movs	r3, r0
 800547e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d90a      	bls.n	800549c <UART_SetConfig+0x218>
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	025b      	lsls	r3, r3, #9
 800548c:	429a      	cmp	r2, r3
 800548e:	d205      	bcs.n	800549c <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	e003      	b.n	80054a4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800549c:	231e      	movs	r3, #30
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054b0:	231e      	movs	r3, #30
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	781b      	ldrb	r3, [r3, #0]
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b008      	add	sp, #32
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	ffff69f3 	.word	0xffff69f3
 80054c4:	ffffcfff 	.word	0xffffcfff
 80054c8:	fffff4ff 	.word	0xfffff4ff
 80054cc:	40021000 	.word	0x40021000
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2208      	movs	r2, #8
 80054e2:	4013      	ands	r3, r2
 80054e4:	d00b      	beq.n	80054fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a4a      	ldr	r2, [pc, #296]	; (8005618 <UART_AdvFeatureConfig+0x144>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2201      	movs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d00b      	beq.n	8005520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a43      	ldr	r2, [pc, #268]	; (800561c <UART_AdvFeatureConfig+0x148>)
 8005510:	4013      	ands	r3, r2
 8005512:	0019      	movs	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2202      	movs	r2, #2
 8005526:	4013      	ands	r3, r2
 8005528:	d00b      	beq.n	8005542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <UART_AdvFeatureConfig+0x14c>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2204      	movs	r2, #4
 8005548:	4013      	ands	r3, r2
 800554a:	d00b      	beq.n	8005564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a34      	ldr	r2, [pc, #208]	; (8005624 <UART_AdvFeatureConfig+0x150>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2210      	movs	r2, #16
 800556a:	4013      	ands	r3, r2
 800556c:	d00b      	beq.n	8005586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <UART_AdvFeatureConfig+0x154>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2220      	movs	r2, #32
 800558c:	4013      	ands	r3, r2
 800558e:	d00b      	beq.n	80055a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	4a25      	ldr	r2, [pc, #148]	; (800562c <UART_AdvFeatureConfig+0x158>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	4013      	ands	r3, r2
 80055b0:	d01d      	beq.n	80055ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <UART_AdvFeatureConfig+0x15c>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	035b      	lsls	r3, r3, #13
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d10b      	bne.n	80055ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <UART_AdvFeatureConfig+0x160>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	4013      	ands	r3, r2
 80055f6:	d00b      	beq.n	8005610 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <UART_AdvFeatureConfig+0x164>)
 8005600:	4013      	ands	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  }
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}
 8005618:	ffff7fff 	.word	0xffff7fff
 800561c:	fffdffff 	.word	0xfffdffff
 8005620:	fffeffff 	.word	0xfffeffff
 8005624:	fffbffff 	.word	0xfffbffff
 8005628:	ffffefff 	.word	0xffffefff
 800562c:	ffffdfff 	.word	0xffffdfff
 8005630:	ffefffff 	.word	0xffefffff
 8005634:	ff9fffff 	.word	0xff9fffff
 8005638:	fff7ffff 	.word	0xfff7ffff

0800563c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b092      	sub	sp, #72	; 0x48
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2284      	movs	r2, #132	; 0x84
 8005648:	2100      	movs	r1, #0
 800564a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800564c:	f7fd fe30 	bl	80032b0 <HAL_GetTick>
 8005650:	0003      	movs	r3, r0
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2208      	movs	r2, #8
 800565c:	4013      	ands	r3, r2
 800565e:	2b08      	cmp	r3, #8
 8005660:	d12c      	bne.n	80056bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	2280      	movs	r2, #128	; 0x80
 8005666:	0391      	lsls	r1, r2, #14
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <UART_CheckIdleState+0x148>)
 800566c:	9200      	str	r2, [sp, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	f000 f88c 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 8005674:	1e03      	subs	r3, r0, #0
 8005676:	d021      	beq.n	80056bc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005680:	63bb      	str	r3, [r7, #56]	; 0x38
 8005682:	2301      	movs	r3, #1
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	438a      	bics	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2278      	movs	r2, #120	; 0x78
 80056b4:	2100      	movs	r1, #0
 80056b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e05f      	b.n	800577c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2204      	movs	r2, #4
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d146      	bne.n	8005758 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	2280      	movs	r2, #128	; 0x80
 80056ce:	03d1      	lsls	r1, r2, #15
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <UART_CheckIdleState+0x148>)
 80056d4:	9200      	str	r2, [sp, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f000 f858 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 80056dc:	1e03      	subs	r3, r0, #0
 80056de:	d03b      	beq.n	8005758 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e0:	f3ef 8310 	mrs	r3, PRIMASK
 80056e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80056e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	2301      	movs	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4921      	ldr	r1, [pc, #132]	; (8005788 <UART_CheckIdleState+0x14c>)
 8005702:	400a      	ands	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f383 8810 	msr	PRIMASK, r3
}
 8005710:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005712:	f3ef 8310 	mrs	r3, PRIMASK
 8005716:	61bb      	str	r3, [r7, #24]
  return(result);
 8005718:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	633b      	str	r3, [r7, #48]	; 0x30
 800571c:	2301      	movs	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f383 8810 	msr	PRIMASK, r3
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	438a      	bics	r2, r1
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	f383 8810 	msr	PRIMASK, r3
}
 8005742:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	2120      	movs	r1, #32
 800574a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2278      	movs	r2, #120	; 0x78
 8005750:	2100      	movs	r1, #0
 8005752:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e011      	b.n	800577c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	2120      	movs	r1, #32
 8005764:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2278      	movs	r2, #120	; 0x78
 8005776:	2100      	movs	r1, #0
 8005778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b010      	add	sp, #64	; 0x40
 8005782:	bd80      	pop	{r7, pc}
 8005784:	01ffffff 	.word	0x01ffffff
 8005788:	fffffedf 	.word	0xfffffedf

0800578c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	e051      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	3301      	adds	r3, #1
 80057a2:	d04e      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7fd fd84 	bl	80032b0 <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e051      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2204      	movs	r2, #4
 80057c6:	4013      	ands	r3, r2
 80057c8:	d03b      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb6>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d038      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb6>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d035      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	2208      	movs	r2, #8
 80057de:	4013      	ands	r3, r2
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d111      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2208      	movs	r2, #8
 80057ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f000 f83c 	bl	800586c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2284      	movs	r2, #132	; 0x84
 80057f8:	2108      	movs	r1, #8
 80057fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2278      	movs	r2, #120	; 0x78
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e02c      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	401a      	ands	r2, r3
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	429a      	cmp	r2, r3
 800581a:	d112      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2280      	movs	r2, #128	; 0x80
 8005822:	0112      	lsls	r2, r2, #4
 8005824:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	0018      	movs	r0, r3
 800582a:	f000 f81f 	bl	800586c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2284      	movs	r2, #132	; 0x84
 8005832:	2120      	movs	r1, #32
 8005834:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2278      	movs	r2, #120	; 0x78
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e00f      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	425a      	negs	r2, r3
 8005852:	4153      	adcs	r3, r2
 8005854:	b2db      	uxtb	r3, r3
 8005856:	001a      	movs	r2, r3
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d09e      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005874:	f3ef 8310 	mrs	r3, PRIMASK
 8005878:	617b      	str	r3, [r7, #20]
  return(result);
 800587a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	2301      	movs	r3, #1
 8005880:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f383 8810 	msr	PRIMASK, r3
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4926      	ldr	r1, [pc, #152]	; (8005930 <UART_EndRxTransfer+0xc4>)
 8005896:	400a      	ands	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f383 8810 	msr	PRIMASK, r3
}
 80058a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a6:	f3ef 8310 	mrs	r3, PRIMASK
 80058aa:	623b      	str	r3, [r7, #32]
  return(result);
 80058ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30
 80058b0:	2301      	movs	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f383 8810 	msr	PRIMASK, r3
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2101      	movs	r1, #1
 80058c8:	438a      	bics	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	f383 8810 	msr	PRIMASK, r3
}
 80058d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d118      	bne.n	8005912 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e0:	f3ef 8310 	mrs	r3, PRIMASK
 80058e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80058e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ea:	2301      	movs	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f383 8810 	msr	PRIMASK, r3
}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2110      	movs	r1, #16
 8005902:	438a      	bics	r2, r1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f383 8810 	msr	PRIMASK, r3
}
 8005910:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	2120      	movs	r1, #32
 8005918:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b00e      	add	sp, #56	; 0x38
 800592c:	bd80      	pop	{r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	fffffedf 	.word	0xfffffedf

08005934 <memset>:
 8005934:	0003      	movs	r3, r0
 8005936:	1882      	adds	r2, r0, r2
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	7019      	strb	r1, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	2600      	movs	r6, #0
 8005948:	4c0c      	ldr	r4, [pc, #48]	; (800597c <__libc_init_array+0x38>)
 800594a:	4d0d      	ldr	r5, [pc, #52]	; (8005980 <__libc_init_array+0x3c>)
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	2600      	movs	r6, #0
 8005956:	f001 f829 	bl	80069ac <_init>
 800595a:	4c0a      	ldr	r4, [pc, #40]	; (8005984 <__libc_init_array+0x40>)
 800595c:	4d0a      	ldr	r5, [pc, #40]	; (8005988 <__libc_init_array+0x44>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	00b3      	lsls	r3, r6, #2
 800596a:	58eb      	ldr	r3, [r5, r3]
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	00b3      	lsls	r3, r6, #2
 8005974:	58eb      	ldr	r3, [r5, r3]
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08006c68 	.word	0x08006c68
 8005980:	08006c68 	.word	0x08006c68
 8005984:	08006c6c 	.word	0x08006c6c
 8005988:	08006c68 	.word	0x08006c68

0800598c <memcpy>:
 800598c:	2300      	movs	r3, #0
 800598e:	b510      	push	{r4, lr}
 8005990:	429a      	cmp	r2, r3
 8005992:	d100      	bne.n	8005996 <memcpy+0xa>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	5ccc      	ldrb	r4, [r1, r3]
 8005998:	54c4      	strb	r4, [r0, r3]
 800599a:	3301      	adds	r3, #1
 800599c:	e7f8      	b.n	8005990 <memcpy+0x4>
	...

080059a0 <sin>:
 80059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <sin+0x80>)
 80059a4:	004b      	lsls	r3, r1, #1
 80059a6:	b087      	sub	sp, #28
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	4293      	cmp	r3, r2
 80059ac:	dc06      	bgt.n	80059bc <sin+0x1c>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2200      	movs	r2, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	f000 f8f7 	bl	8005ba8 <__kernel_sin>
 80059ba:	e006      	b.n	80059ca <sin+0x2a>
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <sin+0x84>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	dd05      	ble.n	80059ce <sin+0x2e>
 80059c2:	0002      	movs	r2, r0
 80059c4:	000b      	movs	r3, r1
 80059c6:	f7fb ff8d 	bl	80018e4 <__aeabi_dsub>
 80059ca:	b007      	add	sp, #28
 80059cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ce:	aa02      	add	r2, sp, #8
 80059d0:	f000 f996 	bl	8005d00 <__ieee754_rem_pio2>
 80059d4:	9c04      	ldr	r4, [sp, #16]
 80059d6:	9d05      	ldr	r5, [sp, #20]
 80059d8:	2303      	movs	r3, #3
 80059da:	4003      	ands	r3, r0
 80059dc:	9802      	ldr	r0, [sp, #8]
 80059de:	9903      	ldr	r1, [sp, #12]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d008      	beq.n	80059f6 <sin+0x56>
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d00b      	beq.n	8005a00 <sin+0x60>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d113      	bne.n	8005a14 <sin+0x74>
 80059ec:	3301      	adds	r3, #1
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	0022      	movs	r2, r4
 80059f2:	002b      	movs	r3, r5
 80059f4:	e7df      	b.n	80059b6 <sin+0x16>
 80059f6:	0022      	movs	r2, r4
 80059f8:	002b      	movs	r3, r5
 80059fa:	f000 f815 	bl	8005a28 <__kernel_cos>
 80059fe:	e7e4      	b.n	80059ca <sin+0x2a>
 8005a00:	2301      	movs	r3, #1
 8005a02:	0022      	movs	r2, r4
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	002b      	movs	r3, r5
 8005a08:	f000 f8ce 	bl	8005ba8 <__kernel_sin>
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	18c9      	adds	r1, r1, r3
 8005a12:	e7da      	b.n	80059ca <sin+0x2a>
 8005a14:	0022      	movs	r2, r4
 8005a16:	002b      	movs	r3, r5
 8005a18:	f000 f806 	bl	8005a28 <__kernel_cos>
 8005a1c:	e7f6      	b.n	8005a0c <sin+0x6c>
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	3fe921fb 	.word	0x3fe921fb
 8005a24:	7fefffff 	.word	0x7fefffff

08005a28 <__kernel_cos>:
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	9204      	str	r2, [sp, #16]
 8005a2e:	9305      	str	r3, [sp, #20]
 8005a30:	004b      	lsls	r3, r1, #1
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	23f9      	movs	r3, #249	; 0xf9
 8005a38:	9a00      	ldr	r2, [sp, #0]
 8005a3a:	0007      	movs	r7, r0
 8005a3c:	000e      	movs	r6, r1
 8005a3e:	059b      	lsls	r3, r3, #22
 8005a40:	429a      	cmp	r2, r3
 8005a42:	da04      	bge.n	8005a4e <__kernel_cos+0x26>
 8005a44:	f7fc fad0 	bl	8001fe8 <__aeabi_d2iz>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d100      	bne.n	8005a4e <__kernel_cos+0x26>
 8005a4c:	e084      	b.n	8005b58 <__kernel_cos+0x130>
 8005a4e:	003a      	movs	r2, r7
 8005a50:	0033      	movs	r3, r6
 8005a52:	0038      	movs	r0, r7
 8005a54:	0031      	movs	r1, r6
 8005a56:	f7fb fc83 	bl	8001360 <__aeabi_dmul>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <__kernel_cos+0x138>)
 8005a5e:	0004      	movs	r4, r0
 8005a60:	000d      	movs	r5, r1
 8005a62:	f7fb fc7d 	bl	8001360 <__aeabi_dmul>
 8005a66:	4a3f      	ldr	r2, [pc, #252]	; (8005b64 <__kernel_cos+0x13c>)
 8005a68:	9002      	str	r0, [sp, #8]
 8005a6a:	9103      	str	r1, [sp, #12]
 8005a6c:	4b3e      	ldr	r3, [pc, #248]	; (8005b68 <__kernel_cos+0x140>)
 8005a6e:	0020      	movs	r0, r4
 8005a70:	0029      	movs	r1, r5
 8005a72:	f7fb fc75 	bl	8001360 <__aeabi_dmul>
 8005a76:	4a3d      	ldr	r2, [pc, #244]	; (8005b6c <__kernel_cos+0x144>)
 8005a78:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <__kernel_cos+0x148>)
 8005a7a:	f7fa fd17 	bl	80004ac <__aeabi_dadd>
 8005a7e:	0022      	movs	r2, r4
 8005a80:	002b      	movs	r3, r5
 8005a82:	f7fb fc6d 	bl	8001360 <__aeabi_dmul>
 8005a86:	4a3b      	ldr	r2, [pc, #236]	; (8005b74 <__kernel_cos+0x14c>)
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <__kernel_cos+0x150>)
 8005a8a:	f7fb ff2b 	bl	80018e4 <__aeabi_dsub>
 8005a8e:	0022      	movs	r2, r4
 8005a90:	002b      	movs	r3, r5
 8005a92:	f7fb fc65 	bl	8001360 <__aeabi_dmul>
 8005a96:	4a39      	ldr	r2, [pc, #228]	; (8005b7c <__kernel_cos+0x154>)
 8005a98:	4b39      	ldr	r3, [pc, #228]	; (8005b80 <__kernel_cos+0x158>)
 8005a9a:	f7fa fd07 	bl	80004ac <__aeabi_dadd>
 8005a9e:	0022      	movs	r2, r4
 8005aa0:	002b      	movs	r3, r5
 8005aa2:	f7fb fc5d 	bl	8001360 <__aeabi_dmul>
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <__kernel_cos+0x15c>)
 8005aa8:	4b37      	ldr	r3, [pc, #220]	; (8005b88 <__kernel_cos+0x160>)
 8005aaa:	f7fb ff1b 	bl	80018e4 <__aeabi_dsub>
 8005aae:	0022      	movs	r2, r4
 8005ab0:	002b      	movs	r3, r5
 8005ab2:	f7fb fc55 	bl	8001360 <__aeabi_dmul>
 8005ab6:	4a35      	ldr	r2, [pc, #212]	; (8005b8c <__kernel_cos+0x164>)
 8005ab8:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <__kernel_cos+0x168>)
 8005aba:	f7fa fcf7 	bl	80004ac <__aeabi_dadd>
 8005abe:	0022      	movs	r2, r4
 8005ac0:	002b      	movs	r3, r5
 8005ac2:	f7fb fc4d 	bl	8001360 <__aeabi_dmul>
 8005ac6:	0022      	movs	r2, r4
 8005ac8:	002b      	movs	r3, r5
 8005aca:	f7fb fc49 	bl	8001360 <__aeabi_dmul>
 8005ace:	9a04      	ldr	r2, [sp, #16]
 8005ad0:	9b05      	ldr	r3, [sp, #20]
 8005ad2:	0004      	movs	r4, r0
 8005ad4:	000d      	movs	r5, r1
 8005ad6:	0038      	movs	r0, r7
 8005ad8:	0031      	movs	r1, r6
 8005ada:	f7fb fc41 	bl	8001360 <__aeabi_dmul>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	000b      	movs	r3, r1
 8005ae2:	0020      	movs	r0, r4
 8005ae4:	0029      	movs	r1, r5
 8005ae6:	f7fb fefd 	bl	80018e4 <__aeabi_dsub>
 8005aea:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <__kernel_cos+0x16c>)
 8005aec:	9a00      	ldr	r2, [sp, #0]
 8005aee:	0004      	movs	r4, r0
 8005af0:	000d      	movs	r5, r1
 8005af2:	429a      	cmp	r2, r3
 8005af4:	dc0d      	bgt.n	8005b12 <__kernel_cos+0xea>
 8005af6:	0002      	movs	r2, r0
 8005af8:	000b      	movs	r3, r1
 8005afa:	9802      	ldr	r0, [sp, #8]
 8005afc:	9903      	ldr	r1, [sp, #12]
 8005afe:	f7fb fef1 	bl	80018e4 <__aeabi_dsub>
 8005b02:	0002      	movs	r2, r0
 8005b04:	2000      	movs	r0, #0
 8005b06:	000b      	movs	r3, r1
 8005b08:	4923      	ldr	r1, [pc, #140]	; (8005b98 <__kernel_cos+0x170>)
 8005b0a:	f7fb feeb 	bl	80018e4 <__aeabi_dsub>
 8005b0e:	b007      	add	sp, #28
 8005b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b12:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <__kernel_cos+0x174>)
 8005b14:	9a00      	ldr	r2, [sp, #0]
 8005b16:	2600      	movs	r6, #0
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	dc1b      	bgt.n	8005b54 <__kernel_cos+0x12c>
 8005b1c:	0013      	movs	r3, r2
 8005b1e:	4a20      	ldr	r2, [pc, #128]	; (8005ba0 <__kernel_cos+0x178>)
 8005b20:	4694      	mov	ip, r2
 8005b22:	4463      	add	r3, ip
 8005b24:	001f      	movs	r7, r3
 8005b26:	0032      	movs	r2, r6
 8005b28:	003b      	movs	r3, r7
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	491a      	ldr	r1, [pc, #104]	; (8005b98 <__kernel_cos+0x170>)
 8005b2e:	f7fb fed9 	bl	80018e4 <__aeabi_dsub>
 8005b32:	0032      	movs	r2, r6
 8005b34:	003b      	movs	r3, r7
 8005b36:	9000      	str	r0, [sp, #0]
 8005b38:	9101      	str	r1, [sp, #4]
 8005b3a:	9802      	ldr	r0, [sp, #8]
 8005b3c:	9903      	ldr	r1, [sp, #12]
 8005b3e:	f7fb fed1 	bl	80018e4 <__aeabi_dsub>
 8005b42:	0022      	movs	r2, r4
 8005b44:	002b      	movs	r3, r5
 8005b46:	f7fb fecd 	bl	80018e4 <__aeabi_dsub>
 8005b4a:	0002      	movs	r2, r0
 8005b4c:	000b      	movs	r3, r1
 8005b4e:	9800      	ldr	r0, [sp, #0]
 8005b50:	9901      	ldr	r1, [sp, #4]
 8005b52:	e7da      	b.n	8005b0a <__kernel_cos+0xe2>
 8005b54:	4f13      	ldr	r7, [pc, #76]	; (8005ba4 <__kernel_cos+0x17c>)
 8005b56:	e7e6      	b.n	8005b26 <__kernel_cos+0xfe>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	490f      	ldr	r1, [pc, #60]	; (8005b98 <__kernel_cos+0x170>)
 8005b5c:	e7d7      	b.n	8005b0e <__kernel_cos+0xe6>
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	3fe00000 	.word	0x3fe00000
 8005b64:	be8838d4 	.word	0xbe8838d4
 8005b68:	bda8fae9 	.word	0xbda8fae9
 8005b6c:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b70:	3e21ee9e 	.word	0x3e21ee9e
 8005b74:	809c52ad 	.word	0x809c52ad
 8005b78:	3e927e4f 	.word	0x3e927e4f
 8005b7c:	19cb1590 	.word	0x19cb1590
 8005b80:	3efa01a0 	.word	0x3efa01a0
 8005b84:	16c15177 	.word	0x16c15177
 8005b88:	3f56c16c 	.word	0x3f56c16c
 8005b8c:	5555554c 	.word	0x5555554c
 8005b90:	3fa55555 	.word	0x3fa55555
 8005b94:	3fd33332 	.word	0x3fd33332
 8005b98:	3ff00000 	.word	0x3ff00000
 8005b9c:	3fe90000 	.word	0x3fe90000
 8005ba0:	ffe00000 	.word	0xffe00000
 8005ba4:	3fd20000 	.word	0x3fd20000

08005ba8 <__kernel_sin>:
 8005ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005baa:	b089      	sub	sp, #36	; 0x24
 8005bac:	9202      	str	r2, [sp, #8]
 8005bae:	9303      	str	r3, [sp, #12]
 8005bb0:	22f9      	movs	r2, #249	; 0xf9
 8005bb2:	004b      	lsls	r3, r1, #1
 8005bb4:	0007      	movs	r7, r0
 8005bb6:	000e      	movs	r6, r1
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	0592      	lsls	r2, r2, #22
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	da03      	bge.n	8005bc8 <__kernel_sin+0x20>
 8005bc0:	f7fc fa12 	bl	8001fe8 <__aeabi_d2iz>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d04c      	beq.n	8005c62 <__kernel_sin+0xba>
 8005bc8:	003a      	movs	r2, r7
 8005bca:	0033      	movs	r3, r6
 8005bcc:	0038      	movs	r0, r7
 8005bce:	0031      	movs	r1, r6
 8005bd0:	f7fb fbc6 	bl	8001360 <__aeabi_dmul>
 8005bd4:	0004      	movs	r4, r0
 8005bd6:	000d      	movs	r5, r1
 8005bd8:	0002      	movs	r2, r0
 8005bda:	000b      	movs	r3, r1
 8005bdc:	0038      	movs	r0, r7
 8005bde:	0031      	movs	r1, r6
 8005be0:	f7fb fbbe 	bl	8001360 <__aeabi_dmul>
 8005be4:	4a39      	ldr	r2, [pc, #228]	; (8005ccc <__kernel_sin+0x124>)
 8005be6:	9000      	str	r0, [sp, #0]
 8005be8:	9101      	str	r1, [sp, #4]
 8005bea:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <__kernel_sin+0x128>)
 8005bec:	0020      	movs	r0, r4
 8005bee:	0029      	movs	r1, r5
 8005bf0:	f7fb fbb6 	bl	8001360 <__aeabi_dmul>
 8005bf4:	4a37      	ldr	r2, [pc, #220]	; (8005cd4 <__kernel_sin+0x12c>)
 8005bf6:	4b38      	ldr	r3, [pc, #224]	; (8005cd8 <__kernel_sin+0x130>)
 8005bf8:	f7fb fe74 	bl	80018e4 <__aeabi_dsub>
 8005bfc:	0022      	movs	r2, r4
 8005bfe:	002b      	movs	r3, r5
 8005c00:	f7fb fbae 	bl	8001360 <__aeabi_dmul>
 8005c04:	4a35      	ldr	r2, [pc, #212]	; (8005cdc <__kernel_sin+0x134>)
 8005c06:	4b36      	ldr	r3, [pc, #216]	; (8005ce0 <__kernel_sin+0x138>)
 8005c08:	f7fa fc50 	bl	80004ac <__aeabi_dadd>
 8005c0c:	0022      	movs	r2, r4
 8005c0e:	002b      	movs	r3, r5
 8005c10:	f7fb fba6 	bl	8001360 <__aeabi_dmul>
 8005c14:	4a33      	ldr	r2, [pc, #204]	; (8005ce4 <__kernel_sin+0x13c>)
 8005c16:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <__kernel_sin+0x140>)
 8005c18:	f7fb fe64 	bl	80018e4 <__aeabi_dsub>
 8005c1c:	0022      	movs	r2, r4
 8005c1e:	002b      	movs	r3, r5
 8005c20:	f7fb fb9e 	bl	8001360 <__aeabi_dmul>
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <__kernel_sin+0x144>)
 8005c26:	4a32      	ldr	r2, [pc, #200]	; (8005cf0 <__kernel_sin+0x148>)
 8005c28:	f7fa fc40 	bl	80004ac <__aeabi_dadd>
 8005c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c2e:	9004      	str	r0, [sp, #16]
 8005c30:	9105      	str	r1, [sp, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d119      	bne.n	8005c6a <__kernel_sin+0xc2>
 8005c36:	0002      	movs	r2, r0
 8005c38:	000b      	movs	r3, r1
 8005c3a:	0020      	movs	r0, r4
 8005c3c:	0029      	movs	r1, r5
 8005c3e:	f7fb fb8f 	bl	8001360 <__aeabi_dmul>
 8005c42:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <__kernel_sin+0x14c>)
 8005c44:	4b2c      	ldr	r3, [pc, #176]	; (8005cf8 <__kernel_sin+0x150>)
 8005c46:	f7fb fe4d 	bl	80018e4 <__aeabi_dsub>
 8005c4a:	9a00      	ldr	r2, [sp, #0]
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	f7fb fb87 	bl	8001360 <__aeabi_dmul>
 8005c52:	0002      	movs	r2, r0
 8005c54:	000b      	movs	r3, r1
 8005c56:	0038      	movs	r0, r7
 8005c58:	0031      	movs	r1, r6
 8005c5a:	f7fa fc27 	bl	80004ac <__aeabi_dadd>
 8005c5e:	0007      	movs	r7, r0
 8005c60:	000e      	movs	r6, r1
 8005c62:	0038      	movs	r0, r7
 8005c64:	0031      	movs	r1, r6
 8005c66:	b009      	add	sp, #36	; 0x24
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	9802      	ldr	r0, [sp, #8]
 8005c6e:	9903      	ldr	r1, [sp, #12]
 8005c70:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <__kernel_sin+0x154>)
 8005c72:	f7fb fb75 	bl	8001360 <__aeabi_dmul>
 8005c76:	9a04      	ldr	r2, [sp, #16]
 8005c78:	9b05      	ldr	r3, [sp, #20]
 8005c7a:	9006      	str	r0, [sp, #24]
 8005c7c:	9107      	str	r1, [sp, #28]
 8005c7e:	9800      	ldr	r0, [sp, #0]
 8005c80:	9901      	ldr	r1, [sp, #4]
 8005c82:	f7fb fb6d 	bl	8001360 <__aeabi_dmul>
 8005c86:	0002      	movs	r2, r0
 8005c88:	000b      	movs	r3, r1
 8005c8a:	9806      	ldr	r0, [sp, #24]
 8005c8c:	9907      	ldr	r1, [sp, #28]
 8005c8e:	f7fb fe29 	bl	80018e4 <__aeabi_dsub>
 8005c92:	0022      	movs	r2, r4
 8005c94:	002b      	movs	r3, r5
 8005c96:	f7fb fb63 	bl	8001360 <__aeabi_dmul>
 8005c9a:	9a02      	ldr	r2, [sp, #8]
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	f7fb fe21 	bl	80018e4 <__aeabi_dsub>
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <__kernel_sin+0x14c>)
 8005ca4:	0004      	movs	r4, r0
 8005ca6:	000d      	movs	r5, r1
 8005ca8:	9800      	ldr	r0, [sp, #0]
 8005caa:	9901      	ldr	r1, [sp, #4]
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <__kernel_sin+0x150>)
 8005cae:	f7fb fb57 	bl	8001360 <__aeabi_dmul>
 8005cb2:	0002      	movs	r2, r0
 8005cb4:	000b      	movs	r3, r1
 8005cb6:	0020      	movs	r0, r4
 8005cb8:	0029      	movs	r1, r5
 8005cba:	f7fa fbf7 	bl	80004ac <__aeabi_dadd>
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	000b      	movs	r3, r1
 8005cc2:	0038      	movs	r0, r7
 8005cc4:	0031      	movs	r1, r6
 8005cc6:	f7fb fe0d 	bl	80018e4 <__aeabi_dsub>
 8005cca:	e7c8      	b.n	8005c5e <__kernel_sin+0xb6>
 8005ccc:	5acfd57c 	.word	0x5acfd57c
 8005cd0:	3de5d93a 	.word	0x3de5d93a
 8005cd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005cd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005cdc:	57b1fe7d 	.word	0x57b1fe7d
 8005ce0:	3ec71de3 	.word	0x3ec71de3
 8005ce4:	19c161d5 	.word	0x19c161d5
 8005ce8:	3f2a01a0 	.word	0x3f2a01a0
 8005cec:	3f811111 	.word	0x3f811111
 8005cf0:	1110f8a6 	.word	0x1110f8a6
 8005cf4:	55555549 	.word	0x55555549
 8005cf8:	3fc55555 	.word	0x3fc55555
 8005cfc:	3fe00000 	.word	0x3fe00000

08005d00 <__ieee754_rem_pio2>:
 8005d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d02:	004b      	lsls	r3, r1, #1
 8005d04:	b091      	sub	sp, #68	; 0x44
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	0017      	movs	r7, r2
 8005d0c:	4bb6      	ldr	r3, [pc, #728]	; (8005fe8 <__ieee754_rem_pio2+0x2e8>)
 8005d0e:	9a02      	ldr	r2, [sp, #8]
 8005d10:	0004      	movs	r4, r0
 8005d12:	000d      	movs	r5, r1
 8005d14:	9109      	str	r1, [sp, #36]	; 0x24
 8005d16:	429a      	cmp	r2, r3
 8005d18:	dc09      	bgt.n	8005d2e <__ieee754_rem_pio2+0x2e>
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	000b      	movs	r3, r1
 8005d1e:	603a      	str	r2, [r7, #0]
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2300      	movs	r3, #0
 8005d26:	60ba      	str	r2, [r7, #8]
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	e025      	b.n	8005d7a <__ieee754_rem_pio2+0x7a>
 8005d2e:	4baf      	ldr	r3, [pc, #700]	; (8005fec <__ieee754_rem_pio2+0x2ec>)
 8005d30:	9a02      	ldr	r2, [sp, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	dd00      	ble.n	8005d38 <__ieee754_rem_pio2+0x38>
 8005d36:	e06e      	b.n	8005e16 <__ieee754_rem_pio2+0x116>
 8005d38:	4ead      	ldr	r6, [pc, #692]	; (8005ff0 <__ieee754_rem_pio2+0x2f0>)
 8005d3a:	4aae      	ldr	r2, [pc, #696]	; (8005ff4 <__ieee754_rem_pio2+0x2f4>)
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	dd35      	ble.n	8005dac <__ieee754_rem_pio2+0xac>
 8005d40:	0020      	movs	r0, r4
 8005d42:	0029      	movs	r1, r5
 8005d44:	4baa      	ldr	r3, [pc, #680]	; (8005ff0 <__ieee754_rem_pio2+0x2f0>)
 8005d46:	f7fb fdcd 	bl	80018e4 <__aeabi_dsub>
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	0004      	movs	r4, r0
 8005d4e:	000d      	movs	r5, r1
 8005d50:	42b3      	cmp	r3, r6
 8005d52:	d015      	beq.n	8005d80 <__ieee754_rem_pio2+0x80>
 8005d54:	4aa8      	ldr	r2, [pc, #672]	; (8005ff8 <__ieee754_rem_pio2+0x2f8>)
 8005d56:	4ba9      	ldr	r3, [pc, #676]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005d58:	f7fb fdc4 	bl	80018e4 <__aeabi_dsub>
 8005d5c:	0002      	movs	r2, r0
 8005d5e:	000b      	movs	r3, r1
 8005d60:	0020      	movs	r0, r4
 8005d62:	603a      	str	r2, [r7, #0]
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	0029      	movs	r1, r5
 8005d68:	f7fb fdbc 	bl	80018e4 <__aeabi_dsub>
 8005d6c:	4aa2      	ldr	r2, [pc, #648]	; (8005ff8 <__ieee754_rem_pio2+0x2f8>)
 8005d6e:	4ba3      	ldr	r3, [pc, #652]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005d70:	f7fb fdb8 	bl	80018e4 <__aeabi_dsub>
 8005d74:	2601      	movs	r6, #1
 8005d76:	60b8      	str	r0, [r7, #8]
 8005d78:	60f9      	str	r1, [r7, #12]
 8005d7a:	0030      	movs	r0, r6
 8005d7c:	b011      	add	sp, #68	; 0x44
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d80:	22d3      	movs	r2, #211	; 0xd3
 8005d82:	4b9e      	ldr	r3, [pc, #632]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005d84:	0552      	lsls	r2, r2, #21
 8005d86:	f7fb fdad 	bl	80018e4 <__aeabi_dsub>
 8005d8a:	4a9d      	ldr	r2, [pc, #628]	; (8006000 <__ieee754_rem_pio2+0x300>)
 8005d8c:	4b9d      	ldr	r3, [pc, #628]	; (8006004 <__ieee754_rem_pio2+0x304>)
 8005d8e:	0004      	movs	r4, r0
 8005d90:	000d      	movs	r5, r1
 8005d92:	f7fb fda7 	bl	80018e4 <__aeabi_dsub>
 8005d96:	0002      	movs	r2, r0
 8005d98:	000b      	movs	r3, r1
 8005d9a:	0020      	movs	r0, r4
 8005d9c:	603a      	str	r2, [r7, #0]
 8005d9e:	607b      	str	r3, [r7, #4]
 8005da0:	0029      	movs	r1, r5
 8005da2:	f7fb fd9f 	bl	80018e4 <__aeabi_dsub>
 8005da6:	4a96      	ldr	r2, [pc, #600]	; (8006000 <__ieee754_rem_pio2+0x300>)
 8005da8:	4b96      	ldr	r3, [pc, #600]	; (8006004 <__ieee754_rem_pio2+0x304>)
 8005daa:	e7e1      	b.n	8005d70 <__ieee754_rem_pio2+0x70>
 8005dac:	0020      	movs	r0, r4
 8005dae:	0029      	movs	r1, r5
 8005db0:	4b8f      	ldr	r3, [pc, #572]	; (8005ff0 <__ieee754_rem_pio2+0x2f0>)
 8005db2:	f7fa fb7b 	bl	80004ac <__aeabi_dadd>
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	0004      	movs	r4, r0
 8005dba:	000d      	movs	r5, r1
 8005dbc:	42b3      	cmp	r3, r6
 8005dbe:	d014      	beq.n	8005dea <__ieee754_rem_pio2+0xea>
 8005dc0:	4a8d      	ldr	r2, [pc, #564]	; (8005ff8 <__ieee754_rem_pio2+0x2f8>)
 8005dc2:	4b8e      	ldr	r3, [pc, #568]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005dc4:	f7fa fb72 	bl	80004ac <__aeabi_dadd>
 8005dc8:	0002      	movs	r2, r0
 8005dca:	000b      	movs	r3, r1
 8005dcc:	0020      	movs	r0, r4
 8005dce:	603a      	str	r2, [r7, #0]
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	0029      	movs	r1, r5
 8005dd4:	f7fb fd86 	bl	80018e4 <__aeabi_dsub>
 8005dd8:	4a87      	ldr	r2, [pc, #540]	; (8005ff8 <__ieee754_rem_pio2+0x2f8>)
 8005dda:	4b88      	ldr	r3, [pc, #544]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005ddc:	f7fa fb66 	bl	80004ac <__aeabi_dadd>
 8005de0:	2601      	movs	r6, #1
 8005de2:	60b8      	str	r0, [r7, #8]
 8005de4:	60f9      	str	r1, [r7, #12]
 8005de6:	4276      	negs	r6, r6
 8005de8:	e7c7      	b.n	8005d7a <__ieee754_rem_pio2+0x7a>
 8005dea:	22d3      	movs	r2, #211	; 0xd3
 8005dec:	4b83      	ldr	r3, [pc, #524]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005dee:	0552      	lsls	r2, r2, #21
 8005df0:	f7fa fb5c 	bl	80004ac <__aeabi_dadd>
 8005df4:	4a82      	ldr	r2, [pc, #520]	; (8006000 <__ieee754_rem_pio2+0x300>)
 8005df6:	4b83      	ldr	r3, [pc, #524]	; (8006004 <__ieee754_rem_pio2+0x304>)
 8005df8:	0004      	movs	r4, r0
 8005dfa:	000d      	movs	r5, r1
 8005dfc:	f7fa fb56 	bl	80004ac <__aeabi_dadd>
 8005e00:	0002      	movs	r2, r0
 8005e02:	000b      	movs	r3, r1
 8005e04:	0020      	movs	r0, r4
 8005e06:	603a      	str	r2, [r7, #0]
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	0029      	movs	r1, r5
 8005e0c:	f7fb fd6a 	bl	80018e4 <__aeabi_dsub>
 8005e10:	4a7b      	ldr	r2, [pc, #492]	; (8006000 <__ieee754_rem_pio2+0x300>)
 8005e12:	4b7c      	ldr	r3, [pc, #496]	; (8006004 <__ieee754_rem_pio2+0x304>)
 8005e14:	e7e2      	b.n	8005ddc <__ieee754_rem_pio2+0xdc>
 8005e16:	4b7c      	ldr	r3, [pc, #496]	; (8006008 <__ieee754_rem_pio2+0x308>)
 8005e18:	9a02      	ldr	r2, [sp, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	dd00      	ble.n	8005e20 <__ieee754_rem_pio2+0x120>
 8005e1e:	e0d3      	b.n	8005fc8 <__ieee754_rem_pio2+0x2c8>
 8005e20:	0020      	movs	r0, r4
 8005e22:	0029      	movs	r1, r5
 8005e24:	f000 f95c 	bl	80060e0 <fabs>
 8005e28:	4a78      	ldr	r2, [pc, #480]	; (800600c <__ieee754_rem_pio2+0x30c>)
 8005e2a:	4b79      	ldr	r3, [pc, #484]	; (8006010 <__ieee754_rem_pio2+0x310>)
 8005e2c:	0004      	movs	r4, r0
 8005e2e:	000d      	movs	r5, r1
 8005e30:	f7fb fa96 	bl	8001360 <__aeabi_dmul>
 8005e34:	2200      	movs	r2, #0
 8005e36:	4b77      	ldr	r3, [pc, #476]	; (8006014 <__ieee754_rem_pio2+0x314>)
 8005e38:	f7fa fb38 	bl	80004ac <__aeabi_dadd>
 8005e3c:	f7fc f8d4 	bl	8001fe8 <__aeabi_d2iz>
 8005e40:	0006      	movs	r6, r0
 8005e42:	f7fc f907 	bl	8002054 <__aeabi_i2d>
 8005e46:	4a6b      	ldr	r2, [pc, #428]	; (8005ff4 <__ieee754_rem_pio2+0x2f4>)
 8005e48:	4b69      	ldr	r3, [pc, #420]	; (8005ff0 <__ieee754_rem_pio2+0x2f0>)
 8005e4a:	9006      	str	r0, [sp, #24]
 8005e4c:	9107      	str	r1, [sp, #28]
 8005e4e:	f7fb fa87 	bl	8001360 <__aeabi_dmul>
 8005e52:	0002      	movs	r2, r0
 8005e54:	000b      	movs	r3, r1
 8005e56:	0020      	movs	r0, r4
 8005e58:	0029      	movs	r1, r5
 8005e5a:	f7fb fd43 	bl	80018e4 <__aeabi_dsub>
 8005e5e:	4a66      	ldr	r2, [pc, #408]	; (8005ff8 <__ieee754_rem_pio2+0x2f8>)
 8005e60:	9004      	str	r0, [sp, #16]
 8005e62:	9105      	str	r1, [sp, #20]
 8005e64:	9806      	ldr	r0, [sp, #24]
 8005e66:	9907      	ldr	r1, [sp, #28]
 8005e68:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005e6a:	f7fb fa79 	bl	8001360 <__aeabi_dmul>
 8005e6e:	0004      	movs	r4, r0
 8005e70:	000d      	movs	r5, r1
 8005e72:	2e1f      	cmp	r6, #31
 8005e74:	dc0f      	bgt.n	8005e96 <__ieee754_rem_pio2+0x196>
 8005e76:	4b68      	ldr	r3, [pc, #416]	; (8006018 <__ieee754_rem_pio2+0x318>)
 8005e78:	1e72      	subs	r2, r6, #1
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	58d3      	ldr	r3, [r2, r3]
 8005e7e:	9a02      	ldr	r2, [sp, #8]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d008      	beq.n	8005e96 <__ieee754_rem_pio2+0x196>
 8005e84:	9804      	ldr	r0, [sp, #16]
 8005e86:	9905      	ldr	r1, [sp, #20]
 8005e88:	0022      	movs	r2, r4
 8005e8a:	002b      	movs	r3, r5
 8005e8c:	f7fb fd2a 	bl	80018e4 <__aeabi_dsub>
 8005e90:	6038      	str	r0, [r7, #0]
 8005e92:	6079      	str	r1, [r7, #4]
 8005e94:	e012      	b.n	8005ebc <__ieee754_rem_pio2+0x1bc>
 8005e96:	0022      	movs	r2, r4
 8005e98:	9804      	ldr	r0, [sp, #16]
 8005e9a:	9905      	ldr	r1, [sp, #20]
 8005e9c:	002b      	movs	r3, r5
 8005e9e:	f7fb fd21 	bl	80018e4 <__aeabi_dsub>
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	151b      	asrs	r3, r3, #20
 8005ea6:	9308      	str	r3, [sp, #32]
 8005ea8:	9a08      	ldr	r2, [sp, #32]
 8005eaa:	004b      	lsls	r3, r1, #1
 8005eac:	0d5b      	lsrs	r3, r3, #21
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	dc21      	bgt.n	8005ef8 <__ieee754_rem_pio2+0x1f8>
 8005eb4:	0002      	movs	r2, r0
 8005eb6:	000b      	movs	r3, r1
 8005eb8:	603a      	str	r2, [r7, #0]
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	9804      	ldr	r0, [sp, #16]
 8005ebe:	9905      	ldr	r1, [sp, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	9302      	str	r3, [sp, #8]
 8005ec6:	9b02      	ldr	r3, [sp, #8]
 8005ec8:	f7fb fd0c 	bl	80018e4 <__aeabi_dsub>
 8005ecc:	0022      	movs	r2, r4
 8005ece:	002b      	movs	r3, r5
 8005ed0:	f7fb fd08 	bl	80018e4 <__aeabi_dsub>
 8005ed4:	000b      	movs	r3, r1
 8005ed6:	0002      	movs	r2, r0
 8005ed8:	60ba      	str	r2, [r7, #8]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	db00      	blt.n	8005ee4 <__ieee754_rem_pio2+0x1e4>
 8005ee2:	e74a      	b.n	8005d7a <__ieee754_rem_pio2+0x7a>
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	061b      	lsls	r3, r3, #24
 8005ee8:	469c      	mov	ip, r3
 8005eea:	9c02      	ldr	r4, [sp, #8]
 8005eec:	18c9      	adds	r1, r1, r3
 8005eee:	4464      	add	r4, ip
 8005ef0:	607c      	str	r4, [r7, #4]
 8005ef2:	60b8      	str	r0, [r7, #8]
 8005ef4:	60f9      	str	r1, [r7, #12]
 8005ef6:	e776      	b.n	8005de6 <__ieee754_rem_pio2+0xe6>
 8005ef8:	22d3      	movs	r2, #211	; 0xd3
 8005efa:	9806      	ldr	r0, [sp, #24]
 8005efc:	9907      	ldr	r1, [sp, #28]
 8005efe:	4b3f      	ldr	r3, [pc, #252]	; (8005ffc <__ieee754_rem_pio2+0x2fc>)
 8005f00:	0552      	lsls	r2, r2, #21
 8005f02:	f7fb fa2d 	bl	8001360 <__aeabi_dmul>
 8005f06:	0004      	movs	r4, r0
 8005f08:	000d      	movs	r5, r1
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	000b      	movs	r3, r1
 8005f0e:	9804      	ldr	r0, [sp, #16]
 8005f10:	9905      	ldr	r1, [sp, #20]
 8005f12:	f7fb fce7 	bl	80018e4 <__aeabi_dsub>
 8005f16:	0002      	movs	r2, r0
 8005f18:	000b      	movs	r3, r1
 8005f1a:	9002      	str	r0, [sp, #8]
 8005f1c:	9103      	str	r1, [sp, #12]
 8005f1e:	9804      	ldr	r0, [sp, #16]
 8005f20:	9905      	ldr	r1, [sp, #20]
 8005f22:	f7fb fcdf 	bl	80018e4 <__aeabi_dsub>
 8005f26:	0022      	movs	r2, r4
 8005f28:	002b      	movs	r3, r5
 8005f2a:	f7fb fcdb 	bl	80018e4 <__aeabi_dsub>
 8005f2e:	0004      	movs	r4, r0
 8005f30:	000d      	movs	r5, r1
 8005f32:	9806      	ldr	r0, [sp, #24]
 8005f34:	9907      	ldr	r1, [sp, #28]
 8005f36:	4a32      	ldr	r2, [pc, #200]	; (8006000 <__ieee754_rem_pio2+0x300>)
 8005f38:	4b32      	ldr	r3, [pc, #200]	; (8006004 <__ieee754_rem_pio2+0x304>)
 8005f3a:	f7fb fa11 	bl	8001360 <__aeabi_dmul>
 8005f3e:	0022      	movs	r2, r4
 8005f40:	002b      	movs	r3, r5
 8005f42:	f7fb fccf 	bl	80018e4 <__aeabi_dsub>
 8005f46:	0002      	movs	r2, r0
 8005f48:	000b      	movs	r3, r1
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	000d      	movs	r5, r1
 8005f4e:	9802      	ldr	r0, [sp, #8]
 8005f50:	9903      	ldr	r1, [sp, #12]
 8005f52:	f7fb fcc7 	bl	80018e4 <__aeabi_dsub>
 8005f56:	9a08      	ldr	r2, [sp, #32]
 8005f58:	004b      	lsls	r3, r1, #1
 8005f5a:	0d5b      	lsrs	r3, r3, #21
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b31      	cmp	r3, #49	; 0x31
 8005f60:	dc08      	bgt.n	8005f74 <__ieee754_rem_pio2+0x274>
 8005f62:	0002      	movs	r2, r0
 8005f64:	000b      	movs	r3, r1
 8005f66:	603a      	str	r2, [r7, #0]
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	9a02      	ldr	r2, [sp, #8]
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	9204      	str	r2, [sp, #16]
 8005f70:	9305      	str	r3, [sp, #20]
 8005f72:	e7a3      	b.n	8005ebc <__ieee754_rem_pio2+0x1bc>
 8005f74:	22b8      	movs	r2, #184	; 0xb8
 8005f76:	9806      	ldr	r0, [sp, #24]
 8005f78:	9907      	ldr	r1, [sp, #28]
 8005f7a:	4b22      	ldr	r3, [pc, #136]	; (8006004 <__ieee754_rem_pio2+0x304>)
 8005f7c:	0592      	lsls	r2, r2, #22
 8005f7e:	f7fb f9ef 	bl	8001360 <__aeabi_dmul>
 8005f82:	0004      	movs	r4, r0
 8005f84:	000d      	movs	r5, r1
 8005f86:	0002      	movs	r2, r0
 8005f88:	000b      	movs	r3, r1
 8005f8a:	9802      	ldr	r0, [sp, #8]
 8005f8c:	9903      	ldr	r1, [sp, #12]
 8005f8e:	f7fb fca9 	bl	80018e4 <__aeabi_dsub>
 8005f92:	0002      	movs	r2, r0
 8005f94:	000b      	movs	r3, r1
 8005f96:	9004      	str	r0, [sp, #16]
 8005f98:	9105      	str	r1, [sp, #20]
 8005f9a:	9802      	ldr	r0, [sp, #8]
 8005f9c:	9903      	ldr	r1, [sp, #12]
 8005f9e:	f7fb fca1 	bl	80018e4 <__aeabi_dsub>
 8005fa2:	0022      	movs	r2, r4
 8005fa4:	002b      	movs	r3, r5
 8005fa6:	f7fb fc9d 	bl	80018e4 <__aeabi_dsub>
 8005faa:	0004      	movs	r4, r0
 8005fac:	000d      	movs	r5, r1
 8005fae:	9806      	ldr	r0, [sp, #24]
 8005fb0:	9907      	ldr	r1, [sp, #28]
 8005fb2:	4a1a      	ldr	r2, [pc, #104]	; (800601c <__ieee754_rem_pio2+0x31c>)
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <__ieee754_rem_pio2+0x320>)
 8005fb6:	f7fb f9d3 	bl	8001360 <__aeabi_dmul>
 8005fba:	0022      	movs	r2, r4
 8005fbc:	002b      	movs	r3, r5
 8005fbe:	f7fb fc91 	bl	80018e4 <__aeabi_dsub>
 8005fc2:	0004      	movs	r4, r0
 8005fc4:	000d      	movs	r5, r1
 8005fc6:	e75d      	b.n	8005e84 <__ieee754_rem_pio2+0x184>
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <__ieee754_rem_pio2+0x324>)
 8005fca:	9a02      	ldr	r2, [sp, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	dd2b      	ble.n	8006028 <__ieee754_rem_pio2+0x328>
 8005fd0:	0022      	movs	r2, r4
 8005fd2:	002b      	movs	r3, r5
 8005fd4:	0020      	movs	r0, r4
 8005fd6:	0029      	movs	r1, r5
 8005fd8:	f7fb fc84 	bl	80018e4 <__aeabi_dsub>
 8005fdc:	60b8      	str	r0, [r7, #8]
 8005fde:	60f9      	str	r1, [r7, #12]
 8005fe0:	6038      	str	r0, [r7, #0]
 8005fe2:	6079      	str	r1, [r7, #4]
 8005fe4:	e6a1      	b.n	8005d2a <__ieee754_rem_pio2+0x2a>
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	3fe921fb 	.word	0x3fe921fb
 8005fec:	4002d97b 	.word	0x4002d97b
 8005ff0:	3ff921fb 	.word	0x3ff921fb
 8005ff4:	54400000 	.word	0x54400000
 8005ff8:	1a626331 	.word	0x1a626331
 8005ffc:	3dd0b461 	.word	0x3dd0b461
 8006000:	2e037073 	.word	0x2e037073
 8006004:	3ba3198a 	.word	0x3ba3198a
 8006008:	413921fb 	.word	0x413921fb
 800600c:	6dc9c883 	.word	0x6dc9c883
 8006010:	3fe45f30 	.word	0x3fe45f30
 8006014:	3fe00000 	.word	0x3fe00000
 8006018:	08006a90 	.word	0x08006a90
 800601c:	252049c1 	.word	0x252049c1
 8006020:	397b839a 	.word	0x397b839a
 8006024:	7fefffff 	.word	0x7fefffff
 8006028:	9a02      	ldr	r2, [sp, #8]
 800602a:	0020      	movs	r0, r4
 800602c:	1516      	asrs	r6, r2, #20
 800602e:	4a29      	ldr	r2, [pc, #164]	; (80060d4 <__ieee754_rem_pio2+0x3d4>)
 8006030:	18b6      	adds	r6, r6, r2
 8006032:	9a02      	ldr	r2, [sp, #8]
 8006034:	0533      	lsls	r3, r6, #20
 8006036:	1ad5      	subs	r5, r2, r3
 8006038:	0029      	movs	r1, r5
 800603a:	f7fb ffd5 	bl	8001fe8 <__aeabi_d2iz>
 800603e:	f7fc f809 	bl	8002054 <__aeabi_i2d>
 8006042:	0002      	movs	r2, r0
 8006044:	000b      	movs	r3, r1
 8006046:	0020      	movs	r0, r4
 8006048:	0029      	movs	r1, r5
 800604a:	920a      	str	r2, [sp, #40]	; 0x28
 800604c:	930b      	str	r3, [sp, #44]	; 0x2c
 800604e:	f7fb fc49 	bl	80018e4 <__aeabi_dsub>
 8006052:	2200      	movs	r2, #0
 8006054:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <__ieee754_rem_pio2+0x3d8>)
 8006056:	f7fb f983 	bl	8001360 <__aeabi_dmul>
 800605a:	000d      	movs	r5, r1
 800605c:	0004      	movs	r4, r0
 800605e:	f7fb ffc3 	bl	8001fe8 <__aeabi_d2iz>
 8006062:	f7fb fff7 	bl	8002054 <__aeabi_i2d>
 8006066:	0002      	movs	r2, r0
 8006068:	000b      	movs	r3, r1
 800606a:	0020      	movs	r0, r4
 800606c:	0029      	movs	r1, r5
 800606e:	920c      	str	r2, [sp, #48]	; 0x30
 8006070:	930d      	str	r3, [sp, #52]	; 0x34
 8006072:	f7fb fc37 	bl	80018e4 <__aeabi_dsub>
 8006076:	2200      	movs	r2, #0
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <__ieee754_rem_pio2+0x3d8>)
 800607a:	f7fb f971 	bl	8001360 <__aeabi_dmul>
 800607e:	2503      	movs	r5, #3
 8006080:	900e      	str	r0, [sp, #56]	; 0x38
 8006082:	910f      	str	r1, [sp, #60]	; 0x3c
 8006084:	ac0a      	add	r4, sp, #40	; 0x28
 8006086:	2200      	movs	r2, #0
 8006088:	6920      	ldr	r0, [r4, #16]
 800608a:	6961      	ldr	r1, [r4, #20]
 800608c:	2300      	movs	r3, #0
 800608e:	9502      	str	r5, [sp, #8]
 8006090:	3c08      	subs	r4, #8
 8006092:	3d01      	subs	r5, #1
 8006094:	f7fa f9be 	bl	8000414 <__aeabi_dcmpeq>
 8006098:	2800      	cmp	r0, #0
 800609a:	d1f4      	bne.n	8006086 <__ieee754_rem_pio2+0x386>
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <__ieee754_rem_pio2+0x3dc>)
 800609e:	0032      	movs	r2, r6
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	2302      	movs	r3, #2
 80060a4:	0039      	movs	r1, r7
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	a80a      	add	r0, sp, #40	; 0x28
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	f000 f81c 	bl	80060e8 <__kernel_rem_pio2>
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	0006      	movs	r6, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db00      	blt.n	80060ba <__ieee754_rem_pio2+0x3ba>
 80060b8:	e65f      	b.n	8005d7a <__ieee754_rem_pio2+0x7a>
 80060ba:	2080      	movs	r0, #128	; 0x80
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	0600      	lsls	r0, r0, #24
 80060c2:	180b      	adds	r3, r1, r0
 80060c4:	68f9      	ldr	r1, [r7, #12]
 80060c6:	603a      	str	r2, [r7, #0]
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	180b      	adds	r3, r1, r0
 80060ce:	60ba      	str	r2, [r7, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	e688      	b.n	8005de6 <__ieee754_rem_pio2+0xe6>
 80060d4:	fffffbea 	.word	0xfffffbea
 80060d8:	41700000 	.word	0x41700000
 80060dc:	08006b10 	.word	0x08006b10

080060e0 <fabs>:
 80060e0:	0049      	lsls	r1, r1, #1
 80060e2:	084b      	lsrs	r3, r1, #1
 80060e4:	0019      	movs	r1, r3
 80060e6:	4770      	bx	lr

080060e8 <__kernel_rem_pio2>:
 80060e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ea:	4ccb      	ldr	r4, [pc, #812]	; (8006418 <__kernel_rem_pio2+0x330>)
 80060ec:	44a5      	add	sp, r4
 80060ee:	0014      	movs	r4, r2
 80060f0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80060f2:	930c      	str	r3, [sp, #48]	; 0x30
 80060f4:	4bc9      	ldr	r3, [pc, #804]	; (800641c <__kernel_rem_pio2+0x334>)
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	58d3      	ldr	r3, [r2, r3]
 80060fa:	900d      	str	r0, [sp, #52]	; 0x34
 80060fc:	9308      	str	r3, [sp, #32]
 80060fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006100:	9106      	str	r1, [sp, #24]
 8006102:	3b01      	subs	r3, #1
 8006104:	930b      	str	r3, [sp, #44]	; 0x2c
 8006106:	2300      	movs	r3, #0
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	0023      	movs	r3, r4
 800610c:	3314      	adds	r3, #20
 800610e:	db04      	blt.n	800611a <__kernel_rem_pio2+0x32>
 8006110:	2118      	movs	r1, #24
 8006112:	1ee0      	subs	r0, r4, #3
 8006114:	f7fa f882 	bl	800021c <__divsi3>
 8006118:	9000      	str	r0, [sp, #0]
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	ae24      	add	r6, sp, #144	; 0x90
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	2318      	movs	r3, #24
 8006122:	425b      	negs	r3, r3
 8006124:	4353      	muls	r3, r2
 8006126:	191b      	adds	r3, r3, r4
 8006128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800612a:	9302      	str	r3, [sp, #8]
 800612c:	9b00      	ldr	r3, [sp, #0]
 800612e:	1a9d      	subs	r5, r3, r2
 8006130:	002c      	movs	r4, r5
 8006132:	9b08      	ldr	r3, [sp, #32]
 8006134:	189f      	adds	r7, r3, r2
 8006136:	1b63      	subs	r3, r4, r5
 8006138:	429f      	cmp	r7, r3
 800613a:	da0f      	bge.n	800615c <__kernel_rem_pio2+0x74>
 800613c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800613e:	af74      	add	r7, sp, #464	; 0x1d0
 8006140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006142:	9a08      	ldr	r2, [sp, #32]
 8006144:	1af3      	subs	r3, r6, r3
 8006146:	429a      	cmp	r2, r3
 8006148:	db30      	blt.n	80061ac <__kernel_rem_pio2+0xc4>
 800614a:	ab24      	add	r3, sp, #144	; 0x90
 800614c:	00f4      	lsls	r4, r6, #3
 800614e:	2200      	movs	r2, #0
 8006150:	18e4      	adds	r4, r4, r3
 8006152:	2300      	movs	r3, #0
 8006154:	2500      	movs	r5, #0
 8006156:	9204      	str	r2, [sp, #16]
 8006158:	9305      	str	r3, [sp, #20]
 800615a:	e01e      	b.n	800619a <__kernel_rem_pio2+0xb2>
 800615c:	2c00      	cmp	r4, #0
 800615e:	db07      	blt.n	8006170 <__kernel_rem_pio2+0x88>
 8006160:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8006162:	00a3      	lsls	r3, r4, #2
 8006164:	58d0      	ldr	r0, [r2, r3]
 8006166:	f7fb ff75 	bl	8002054 <__aeabi_i2d>
 800616a:	c603      	stmia	r6!, {r0, r1}
 800616c:	3401      	adds	r4, #1
 800616e:	e7e2      	b.n	8006136 <__kernel_rem_pio2+0x4e>
 8006170:	2000      	movs	r0, #0
 8006172:	2100      	movs	r1, #0
 8006174:	e7f9      	b.n	800616a <__kernel_rem_pio2+0x82>
 8006176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006178:	00e9      	lsls	r1, r5, #3
 800617a:	1859      	adds	r1, r3, r1
 800617c:	6808      	ldr	r0, [r1, #0]
 800617e:	6849      	ldr	r1, [r1, #4]
 8006180:	6822      	ldr	r2, [r4, #0]
 8006182:	6863      	ldr	r3, [r4, #4]
 8006184:	f7fb f8ec 	bl	8001360 <__aeabi_dmul>
 8006188:	0002      	movs	r2, r0
 800618a:	000b      	movs	r3, r1
 800618c:	9804      	ldr	r0, [sp, #16]
 800618e:	9905      	ldr	r1, [sp, #20]
 8006190:	f7fa f98c 	bl	80004ac <__aeabi_dadd>
 8006194:	9004      	str	r0, [sp, #16]
 8006196:	9105      	str	r1, [sp, #20]
 8006198:	3501      	adds	r5, #1
 800619a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619c:	3c08      	subs	r4, #8
 800619e:	429d      	cmp	r5, r3
 80061a0:	dde9      	ble.n	8006176 <__kernel_rem_pio2+0x8e>
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	9c05      	ldr	r4, [sp, #20]
 80061a6:	3601      	adds	r6, #1
 80061a8:	c718      	stmia	r7!, {r3, r4}
 80061aa:	e7c9      	b.n	8006140 <__kernel_rem_pio2+0x58>
 80061ac:	9b08      	ldr	r3, [sp, #32]
 80061ae:	aa10      	add	r2, sp, #64	; 0x40
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	18d3      	adds	r3, r2, r3
 80061be:	930e      	str	r3, [sp, #56]	; 0x38
 80061c0:	9b08      	ldr	r3, [sp, #32]
 80061c2:	9304      	str	r3, [sp, #16]
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	aa74      	add	r2, sp, #464	; 0x1d0
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	18d3      	adds	r3, r2, r3
 80061cc:	681c      	ldr	r4, [r3, #0]
 80061ce:	685d      	ldr	r5, [r3, #4]
 80061d0:	ab10      	add	r3, sp, #64	; 0x40
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	930a      	str	r3, [sp, #40]	; 0x28
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	9307      	str	r3, [sp, #28]
 80061da:	9b07      	ldr	r3, [sp, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dc74      	bgt.n	80062ca <__kernel_rem_pio2+0x1e2>
 80061e0:	0020      	movs	r0, r4
 80061e2:	0029      	movs	r1, r5
 80061e4:	9a02      	ldr	r2, [sp, #8]
 80061e6:	f000 faeb 	bl	80067c0 <scalbn>
 80061ea:	23ff      	movs	r3, #255	; 0xff
 80061ec:	2200      	movs	r2, #0
 80061ee:	059b      	lsls	r3, r3, #22
 80061f0:	0004      	movs	r4, r0
 80061f2:	000d      	movs	r5, r1
 80061f4:	f7fb f8b4 	bl	8001360 <__aeabi_dmul>
 80061f8:	f000 fb4c 	bl	8006894 <floor>
 80061fc:	2200      	movs	r2, #0
 80061fe:	4b88      	ldr	r3, [pc, #544]	; (8006420 <__kernel_rem_pio2+0x338>)
 8006200:	f7fb f8ae 	bl	8001360 <__aeabi_dmul>
 8006204:	0002      	movs	r2, r0
 8006206:	000b      	movs	r3, r1
 8006208:	0020      	movs	r0, r4
 800620a:	0029      	movs	r1, r5
 800620c:	f7fb fb6a 	bl	80018e4 <__aeabi_dsub>
 8006210:	000d      	movs	r5, r1
 8006212:	0004      	movs	r4, r0
 8006214:	f7fb fee8 	bl	8001fe8 <__aeabi_d2iz>
 8006218:	900a      	str	r0, [sp, #40]	; 0x28
 800621a:	f7fb ff1b 	bl	8002054 <__aeabi_i2d>
 800621e:	000b      	movs	r3, r1
 8006220:	0002      	movs	r2, r0
 8006222:	0029      	movs	r1, r5
 8006224:	0020      	movs	r0, r4
 8006226:	f7fb fb5d 	bl	80018e4 <__aeabi_dsub>
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	0006      	movs	r6, r0
 800622e:	000f      	movs	r7, r1
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd74      	ble.n	800631e <__kernel_rem_pio2+0x236>
 8006234:	2018      	movs	r0, #24
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	aa10      	add	r2, sp, #64	; 0x40
 800623a:	3b01      	subs	r3, #1
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	589a      	ldr	r2, [r3, r2]
 8006240:	9902      	ldr	r1, [sp, #8]
 8006242:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006244:	1a40      	subs	r0, r0, r1
 8006246:	0011      	movs	r1, r2
 8006248:	4101      	asrs	r1, r0
 800624a:	1864      	adds	r4, r4, r1
 800624c:	4081      	lsls	r1, r0
 800624e:	1a52      	subs	r2, r2, r1
 8006250:	a910      	add	r1, sp, #64	; 0x40
 8006252:	505a      	str	r2, [r3, r1]
 8006254:	2317      	movs	r3, #23
 8006256:	9902      	ldr	r1, [sp, #8]
 8006258:	940a      	str	r4, [sp, #40]	; 0x28
 800625a:	1a5b      	subs	r3, r3, r1
 800625c:	411a      	asrs	r2, r3
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	9b07      	ldr	r3, [sp, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd6d      	ble.n	8006342 <__kernel_rem_pio2+0x25a>
 8006266:	2200      	movs	r2, #0
 8006268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626a:	2080      	movs	r0, #128	; 0x80
 800626c:	3301      	adds	r3, #1
 800626e:	930a      	str	r3, [sp, #40]	; 0x28
 8006270:	4b6c      	ldr	r3, [pc, #432]	; (8006424 <__kernel_rem_pio2+0x33c>)
 8006272:	0014      	movs	r4, r2
 8006274:	469c      	mov	ip, r3
 8006276:	2501      	movs	r5, #1
 8006278:	0440      	lsls	r0, r0, #17
 800627a:	9b04      	ldr	r3, [sp, #16]
 800627c:	4293      	cmp	r3, r2
 800627e:	dd00      	ble.n	8006282 <__kernel_rem_pio2+0x19a>
 8006280:	e09b      	b.n	80063ba <__kernel_rem_pio2+0x2d2>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	dd05      	ble.n	8006294 <__kernel_rem_pio2+0x1ac>
 8006288:	2b01      	cmp	r3, #1
 800628a:	d100      	bne.n	800628e <__kernel_rem_pio2+0x1a6>
 800628c:	e0ab      	b.n	80063e6 <__kernel_rem_pio2+0x2fe>
 800628e:	2b02      	cmp	r3, #2
 8006290:	d100      	bne.n	8006294 <__kernel_rem_pio2+0x1ac>
 8006292:	e0b2      	b.n	80063fa <__kernel_rem_pio2+0x312>
 8006294:	9b07      	ldr	r3, [sp, #28]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d153      	bne.n	8006342 <__kernel_rem_pio2+0x25a>
 800629a:	0032      	movs	r2, r6
 800629c:	003b      	movs	r3, r7
 800629e:	2000      	movs	r0, #0
 80062a0:	4961      	ldr	r1, [pc, #388]	; (8006428 <__kernel_rem_pio2+0x340>)
 80062a2:	f7fb fb1f 	bl	80018e4 <__aeabi_dsub>
 80062a6:	0006      	movs	r6, r0
 80062a8:	000f      	movs	r7, r1
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	d049      	beq.n	8006342 <__kernel_rem_pio2+0x25a>
 80062ae:	9a02      	ldr	r2, [sp, #8]
 80062b0:	2000      	movs	r0, #0
 80062b2:	495d      	ldr	r1, [pc, #372]	; (8006428 <__kernel_rem_pio2+0x340>)
 80062b4:	f000 fa84 	bl	80067c0 <scalbn>
 80062b8:	0002      	movs	r2, r0
 80062ba:	000b      	movs	r3, r1
 80062bc:	0030      	movs	r0, r6
 80062be:	0039      	movs	r1, r7
 80062c0:	f7fb fb10 	bl	80018e4 <__aeabi_dsub>
 80062c4:	0006      	movs	r6, r0
 80062c6:	000f      	movs	r7, r1
 80062c8:	e03b      	b.n	8006342 <__kernel_rem_pio2+0x25a>
 80062ca:	2200      	movs	r2, #0
 80062cc:	4b57      	ldr	r3, [pc, #348]	; (800642c <__kernel_rem_pio2+0x344>)
 80062ce:	0020      	movs	r0, r4
 80062d0:	0029      	movs	r1, r5
 80062d2:	f7fb f845 	bl	8001360 <__aeabi_dmul>
 80062d6:	f7fb fe87 	bl	8001fe8 <__aeabi_d2iz>
 80062da:	f7fb febb 	bl	8002054 <__aeabi_i2d>
 80062de:	2200      	movs	r2, #0
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <__kernel_rem_pio2+0x348>)
 80062e2:	0006      	movs	r6, r0
 80062e4:	000f      	movs	r7, r1
 80062e6:	f7fb f83b 	bl	8001360 <__aeabi_dmul>
 80062ea:	0002      	movs	r2, r0
 80062ec:	000b      	movs	r3, r1
 80062ee:	0020      	movs	r0, r4
 80062f0:	0029      	movs	r1, r5
 80062f2:	f7fb faf7 	bl	80018e4 <__aeabi_dsub>
 80062f6:	f7fb fe77 	bl	8001fe8 <__aeabi_d2iz>
 80062fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fc:	aa74      	add	r2, sp, #464	; 0x1d0
 80062fe:	c301      	stmia	r3!, {r0}
 8006300:	930a      	str	r3, [sp, #40]	; 0x28
 8006302:	9b07      	ldr	r3, [sp, #28]
 8006304:	0030      	movs	r0, r6
 8006306:	3b01      	subs	r3, #1
 8006308:	9307      	str	r3, [sp, #28]
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	18d3      	adds	r3, r2, r3
 800630e:	0039      	movs	r1, r7
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f7fa f8ca 	bl	80004ac <__aeabi_dadd>
 8006318:	0004      	movs	r4, r0
 800631a:	000d      	movs	r5, r1
 800631c:	e75d      	b.n	80061da <__kernel_rem_pio2+0xf2>
 800631e:	9b02      	ldr	r3, [sp, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <__kernel_rem_pio2+0x24c>
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	aa10      	add	r2, sp, #64	; 0x40
 8006328:	3b01      	subs	r3, #1
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	589b      	ldr	r3, [r3, r2]
 800632e:	15db      	asrs	r3, r3, #23
 8006330:	9307      	str	r3, [sp, #28]
 8006332:	e795      	b.n	8006260 <__kernel_rem_pio2+0x178>
 8006334:	2200      	movs	r2, #0
 8006336:	4b3f      	ldr	r3, [pc, #252]	; (8006434 <__kernel_rem_pio2+0x34c>)
 8006338:	f7fa f890 	bl	800045c <__aeabi_dcmpge>
 800633c:	2800      	cmp	r0, #0
 800633e:	d139      	bne.n	80063b4 <__kernel_rem_pio2+0x2cc>
 8006340:	9007      	str	r0, [sp, #28]
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	0030      	movs	r0, r6
 8006348:	0039      	movs	r1, r7
 800634a:	f7fa f863 	bl	8000414 <__aeabi_dcmpeq>
 800634e:	2800      	cmp	r0, #0
 8006350:	d100      	bne.n	8006354 <__kernel_rem_pio2+0x26c>
 8006352:	e0bc      	b.n	80064ce <__kernel_rem_pio2+0x3e6>
 8006354:	2200      	movs	r2, #0
 8006356:	9b04      	ldr	r3, [sp, #16]
 8006358:	3b01      	subs	r3, #1
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	9908      	ldr	r1, [sp, #32]
 800635e:	428b      	cmp	r3, r1
 8006360:	da53      	bge.n	800640a <__kernel_rem_pio2+0x322>
 8006362:	2a00      	cmp	r2, #0
 8006364:	d100      	bne.n	8006368 <__kernel_rem_pio2+0x280>
 8006366:	e098      	b.n	800649a <__kernel_rem_pio2+0x3b2>
 8006368:	9b02      	ldr	r3, [sp, #8]
 800636a:	aa10      	add	r2, sp, #64	; 0x40
 800636c:	3b18      	subs	r3, #24
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	9b00      	ldr	r3, [sp, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	589b      	ldr	r3, [r3, r2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d100      	bne.n	800637c <__kernel_rem_pio2+0x294>
 800637a:	e0a4      	b.n	80064c6 <__kernel_rem_pio2+0x3de>
 800637c:	2000      	movs	r0, #0
 800637e:	9a02      	ldr	r2, [sp, #8]
 8006380:	4929      	ldr	r1, [pc, #164]	; (8006428 <__kernel_rem_pio2+0x340>)
 8006382:	f000 fa1d 	bl	80067c0 <scalbn>
 8006386:	0006      	movs	r6, r0
 8006388:	000f      	movs	r7, r1
 800638a:	9c00      	ldr	r4, [sp, #0]
 800638c:	2c00      	cmp	r4, #0
 800638e:	db00      	blt.n	8006392 <__kernel_rem_pio2+0x2aa>
 8006390:	e0dc      	b.n	800654c <__kernel_rem_pio2+0x464>
 8006392:	4b29      	ldr	r3, [pc, #164]	; (8006438 <__kernel_rem_pio2+0x350>)
 8006394:	9c00      	ldr	r4, [sp, #0]
 8006396:	930b      	str	r3, [sp, #44]	; 0x2c
 8006398:	2c00      	cmp	r4, #0
 800639a:	da00      	bge.n	800639e <__kernel_rem_pio2+0x2b6>
 800639c:	e10f      	b.n	80065be <__kernel_rem_pio2+0x4d6>
 800639e:	00e6      	lsls	r6, r4, #3
 80063a0:	ab74      	add	r3, sp, #464	; 0x1d0
 80063a2:	18f3      	adds	r3, r6, r3
 80063a4:	9302      	str	r3, [sp, #8]
 80063a6:	9b00      	ldr	r3, [sp, #0]
 80063a8:	2600      	movs	r6, #0
 80063aa:	1b1b      	subs	r3, r3, r4
 80063ac:	2700      	movs	r7, #0
 80063ae:	2500      	movs	r5, #0
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	e0f6      	b.n	80065a2 <__kernel_rem_pio2+0x4ba>
 80063b4:	2302      	movs	r3, #2
 80063b6:	9307      	str	r3, [sp, #28]
 80063b8:	e755      	b.n	8006266 <__kernel_rem_pio2+0x17e>
 80063ba:	9b00      	ldr	r3, [sp, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2c00      	cmp	r4, #0
 80063c0:	d10b      	bne.n	80063da <__kernel_rem_pio2+0x2f2>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <__kernel_rem_pio2+0x2e6>
 80063c6:	9c00      	ldr	r4, [sp, #0]
 80063c8:	1ac3      	subs	r3, r0, r3
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	002b      	movs	r3, r5
 80063ce:	9c00      	ldr	r4, [sp, #0]
 80063d0:	3201      	adds	r2, #1
 80063d2:	3404      	adds	r4, #4
 80063d4:	9400      	str	r4, [sp, #0]
 80063d6:	001c      	movs	r4, r3
 80063d8:	e74f      	b.n	800627a <__kernel_rem_pio2+0x192>
 80063da:	4661      	mov	r1, ip
 80063dc:	1acb      	subs	r3, r1, r3
 80063de:	9900      	ldr	r1, [sp, #0]
 80063e0:	600b      	str	r3, [r1, #0]
 80063e2:	0023      	movs	r3, r4
 80063e4:	e7f3      	b.n	80063ce <__kernel_rem_pio2+0x2e6>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	aa10      	add	r2, sp, #64	; 0x40
 80063ea:	3b01      	subs	r3, #1
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	589a      	ldr	r2, [r3, r2]
 80063f0:	0252      	lsls	r2, r2, #9
 80063f2:	0a52      	lsrs	r2, r2, #9
 80063f4:	a910      	add	r1, sp, #64	; 0x40
 80063f6:	505a      	str	r2, [r3, r1]
 80063f8:	e74c      	b.n	8006294 <__kernel_rem_pio2+0x1ac>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	aa10      	add	r2, sp, #64	; 0x40
 80063fe:	3b01      	subs	r3, #1
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	589a      	ldr	r2, [r3, r2]
 8006404:	0292      	lsls	r2, r2, #10
 8006406:	0a92      	lsrs	r2, r2, #10
 8006408:	e7f4      	b.n	80063f4 <__kernel_rem_pio2+0x30c>
 800640a:	0099      	lsls	r1, r3, #2
 800640c:	a810      	add	r0, sp, #64	; 0x40
 800640e:	5809      	ldr	r1, [r1, r0]
 8006410:	3b01      	subs	r3, #1
 8006412:	430a      	orrs	r2, r1
 8006414:	e7a2      	b.n	800635c <__kernel_rem_pio2+0x274>
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	fffffd8c 	.word	0xfffffd8c
 800641c:	08006c58 	.word	0x08006c58
 8006420:	40200000 	.word	0x40200000
 8006424:	00ffffff 	.word	0x00ffffff
 8006428:	3ff00000 	.word	0x3ff00000
 800642c:	3e700000 	.word	0x3e700000
 8006430:	41700000 	.word	0x41700000
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	08006c18 	.word	0x08006c18
 800643c:	3301      	adds	r3, #1
 800643e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006440:	009a      	lsls	r2, r3, #2
 8006442:	4252      	negs	r2, r2
 8006444:	588a      	ldr	r2, [r1, r2]
 8006446:	2a00      	cmp	r2, #0
 8006448:	d0f8      	beq.n	800643c <__kernel_rem_pio2+0x354>
 800644a:	9a04      	ldr	r2, [sp, #16]
 800644c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800644e:	1c57      	adds	r7, r2, #1
 8006450:	1854      	adds	r4, r2, r1
 8006452:	00e4      	lsls	r4, r4, #3
 8006454:	aa24      	add	r2, sp, #144	; 0x90
 8006456:	1914      	adds	r4, r2, r4
 8006458:	9a04      	ldr	r2, [sp, #16]
 800645a:	18d3      	adds	r3, r2, r3
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	42bb      	cmp	r3, r7
 8006462:	da00      	bge.n	8006466 <__kernel_rem_pio2+0x37e>
 8006464:	e6ae      	b.n	80061c4 <__kernel_rem_pio2+0xdc>
 8006466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006468:	00bb      	lsls	r3, r7, #2
 800646a:	58d0      	ldr	r0, [r2, r3]
 800646c:	f7fb fdf2 	bl	8002054 <__aeabi_i2d>
 8006470:	2200      	movs	r2, #0
 8006472:	2300      	movs	r3, #0
 8006474:	0026      	movs	r6, r4
 8006476:	2500      	movs	r5, #0
 8006478:	6020      	str	r0, [r4, #0]
 800647a:	6061      	str	r1, [r4, #4]
 800647c:	9200      	str	r2, [sp, #0]
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006482:	429d      	cmp	r5, r3
 8006484:	dd0b      	ble.n	800649e <__kernel_rem_pio2+0x3b6>
 8006486:	00fb      	lsls	r3, r7, #3
 8006488:	aa74      	add	r2, sp, #464	; 0x1d0
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	3701      	adds	r7, #1
 800648e:	9900      	ldr	r1, [sp, #0]
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	3408      	adds	r4, #8
 8006494:	6019      	str	r1, [r3, #0]
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	e7e1      	b.n	800645e <__kernel_rem_pio2+0x376>
 800649a:	2301      	movs	r3, #1
 800649c:	e7cf      	b.n	800643e <__kernel_rem_pio2+0x356>
 800649e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a0:	00e9      	lsls	r1, r5, #3
 80064a2:	1859      	adds	r1, r3, r1
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	6849      	ldr	r1, [r1, #4]
 80064a8:	6832      	ldr	r2, [r6, #0]
 80064aa:	6873      	ldr	r3, [r6, #4]
 80064ac:	f7fa ff58 	bl	8001360 <__aeabi_dmul>
 80064b0:	0002      	movs	r2, r0
 80064b2:	000b      	movs	r3, r1
 80064b4:	9800      	ldr	r0, [sp, #0]
 80064b6:	9901      	ldr	r1, [sp, #4]
 80064b8:	f7f9 fff8 	bl	80004ac <__aeabi_dadd>
 80064bc:	3501      	adds	r5, #1
 80064be:	9000      	str	r0, [sp, #0]
 80064c0:	9101      	str	r1, [sp, #4]
 80064c2:	3e08      	subs	r6, #8
 80064c4:	e7dc      	b.n	8006480 <__kernel_rem_pio2+0x398>
 80064c6:	9b00      	ldr	r3, [sp, #0]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	e74c      	b.n	8006368 <__kernel_rem_pio2+0x280>
 80064ce:	9b02      	ldr	r3, [sp, #8]
 80064d0:	0030      	movs	r0, r6
 80064d2:	425a      	negs	r2, r3
 80064d4:	0039      	movs	r1, r7
 80064d6:	f000 f973 	bl	80067c0 <scalbn>
 80064da:	2200      	movs	r2, #0
 80064dc:	4bb6      	ldr	r3, [pc, #728]	; (80067b8 <__kernel_rem_pio2+0x6d0>)
 80064de:	0004      	movs	r4, r0
 80064e0:	000d      	movs	r5, r1
 80064e2:	f7f9 ffbb 	bl	800045c <__aeabi_dcmpge>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d025      	beq.n	8006536 <__kernel_rem_pio2+0x44e>
 80064ea:	2200      	movs	r2, #0
 80064ec:	4bb3      	ldr	r3, [pc, #716]	; (80067bc <__kernel_rem_pio2+0x6d4>)
 80064ee:	0020      	movs	r0, r4
 80064f0:	0029      	movs	r1, r5
 80064f2:	f7fa ff35 	bl	8001360 <__aeabi_dmul>
 80064f6:	f7fb fd77 	bl	8001fe8 <__aeabi_d2iz>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	0006      	movs	r6, r0
 80064fe:	009f      	lsls	r7, r3, #2
 8006500:	f7fb fda8 	bl	8002054 <__aeabi_i2d>
 8006504:	2200      	movs	r2, #0
 8006506:	4bac      	ldr	r3, [pc, #688]	; (80067b8 <__kernel_rem_pio2+0x6d0>)
 8006508:	f7fa ff2a 	bl	8001360 <__aeabi_dmul>
 800650c:	0002      	movs	r2, r0
 800650e:	000b      	movs	r3, r1
 8006510:	0020      	movs	r0, r4
 8006512:	0029      	movs	r1, r5
 8006514:	f7fb f9e6 	bl	80018e4 <__aeabi_dsub>
 8006518:	f7fb fd66 	bl	8001fe8 <__aeabi_d2iz>
 800651c:	ab10      	add	r3, sp, #64	; 0x40
 800651e:	51d8      	str	r0, [r3, r7]
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	aa10      	add	r2, sp, #64	; 0x40
 8006524:	3301      	adds	r3, #1
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	3318      	adds	r3, #24
 800652c:	9302      	str	r3, [sp, #8]
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	509e      	str	r6, [r3, r2]
 8006534:	e722      	b.n	800637c <__kernel_rem_pio2+0x294>
 8006536:	9b04      	ldr	r3, [sp, #16]
 8006538:	0020      	movs	r0, r4
 800653a:	0029      	movs	r1, r5
 800653c:	009e      	lsls	r6, r3, #2
 800653e:	f7fb fd53 	bl	8001fe8 <__aeabi_d2iz>
 8006542:	ab10      	add	r3, sp, #64	; 0x40
 8006544:	5198      	str	r0, [r3, r6]
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	e717      	b.n	800637c <__kernel_rem_pio2+0x294>
 800654c:	00e5      	lsls	r5, r4, #3
 800654e:	ab74      	add	r3, sp, #464	; 0x1d0
 8006550:	aa10      	add	r2, sp, #64	; 0x40
 8006552:	195d      	adds	r5, r3, r5
 8006554:	00a3      	lsls	r3, r4, #2
 8006556:	5898      	ldr	r0, [r3, r2]
 8006558:	f7fb fd7c 	bl	8002054 <__aeabi_i2d>
 800655c:	0032      	movs	r2, r6
 800655e:	003b      	movs	r3, r7
 8006560:	f7fa fefe 	bl	8001360 <__aeabi_dmul>
 8006564:	2200      	movs	r2, #0
 8006566:	6028      	str	r0, [r5, #0]
 8006568:	6069      	str	r1, [r5, #4]
 800656a:	4b94      	ldr	r3, [pc, #592]	; (80067bc <__kernel_rem_pio2+0x6d4>)
 800656c:	0030      	movs	r0, r6
 800656e:	0039      	movs	r1, r7
 8006570:	f7fa fef6 	bl	8001360 <__aeabi_dmul>
 8006574:	3c01      	subs	r4, #1
 8006576:	0006      	movs	r6, r0
 8006578:	000f      	movs	r7, r1
 800657a:	e707      	b.n	800638c <__kernel_rem_pio2+0x2a4>
 800657c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800657e:	9802      	ldr	r0, [sp, #8]
 8006580:	00e9      	lsls	r1, r5, #3
 8006582:	1859      	adds	r1, r3, r1
 8006584:	c80c      	ldmia	r0!, {r2, r3}
 8006586:	9002      	str	r0, [sp, #8]
 8006588:	6808      	ldr	r0, [r1, #0]
 800658a:	6849      	ldr	r1, [r1, #4]
 800658c:	f7fa fee8 	bl	8001360 <__aeabi_dmul>
 8006590:	0002      	movs	r2, r0
 8006592:	000b      	movs	r3, r1
 8006594:	0030      	movs	r0, r6
 8006596:	0039      	movs	r1, r7
 8006598:	f7f9 ff88 	bl	80004ac <__aeabi_dadd>
 800659c:	0006      	movs	r6, r0
 800659e:	000f      	movs	r7, r1
 80065a0:	3501      	adds	r5, #1
 80065a2:	9b08      	ldr	r3, [sp, #32]
 80065a4:	429d      	cmp	r5, r3
 80065a6:	dc02      	bgt.n	80065ae <__kernel_rem_pio2+0x4c6>
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	429d      	cmp	r5, r3
 80065ac:	dde6      	ble.n	800657c <__kernel_rem_pio2+0x494>
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	aa4c      	add	r2, sp, #304	; 0x130
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	18d3      	adds	r3, r2, r3
 80065b6:	601e      	str	r6, [r3, #0]
 80065b8:	605f      	str	r7, [r3, #4]
 80065ba:	3c01      	subs	r4, #1
 80065bc:	e6ec      	b.n	8006398 <__kernel_rem_pio2+0x2b0>
 80065be:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	dc0e      	bgt.n	80065e2 <__kernel_rem_pio2+0x4fa>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dd00      	ble.n	80065ca <__kernel_rem_pio2+0x4e2>
 80065c8:	e08c      	b.n	80066e4 <__kernel_rem_pio2+0x5fc>
 80065ca:	2500      	movs	r5, #0
 80065cc:	002c      	movs	r4, r5
 80065ce:	42ab      	cmp	r3, r5
 80065d0:	d046      	beq.n	8006660 <__kernel_rem_pio2+0x578>
 80065d2:	2007      	movs	r0, #7
 80065d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d6:	4003      	ands	r3, r0
 80065d8:	0018      	movs	r0, r3
 80065da:	239d      	movs	r3, #157	; 0x9d
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	449d      	add	sp, r3
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d1f4      	bne.n	80065d2 <__kernel_rem_pio2+0x4ea>
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	aa4c      	add	r2, sp, #304	; 0x130
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	18d4      	adds	r4, r2, r3
 80065f0:	0025      	movs	r5, r4
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	9302      	str	r3, [sp, #8]
 80065f6:	9b02      	ldr	r3, [sp, #8]
 80065f8:	3d08      	subs	r5, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dd00      	ble.n	8006600 <__kernel_rem_pio2+0x518>
 80065fe:	e07f      	b.n	8006700 <__kernel_rem_pio2+0x618>
 8006600:	9d00      	ldr	r5, [sp, #0]
 8006602:	3c08      	subs	r4, #8
 8006604:	2d01      	cmp	r5, #1
 8006606:	dd00      	ble.n	800660a <__kernel_rem_pio2+0x522>
 8006608:	e09c      	b.n	8006744 <__kernel_rem_pio2+0x65c>
 800660a:	2400      	movs	r4, #0
 800660c:	0021      	movs	r1, r4
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	dd00      	ble.n	8006616 <__kernel_rem_pio2+0x52e>
 8006614:	e0b4      	b.n	8006780 <__kernel_rem_pio2+0x698>
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 800661a:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800661c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 800661e:	984f      	ldr	r0, [sp, #316]	; 0x13c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d000      	beq.n	8006626 <__kernel_rem_pio2+0x53e>
 8006624:	e0ba      	b.n	800679c <__kernel_rem_pio2+0x6b4>
 8006626:	0033      	movs	r3, r6
 8006628:	003a      	movs	r2, r7
 800662a:	9e06      	ldr	r6, [sp, #24]
 800662c:	6032      	str	r2, [r6, #0]
 800662e:	6073      	str	r3, [r6, #4]
 8006630:	002a      	movs	r2, r5
 8006632:	0003      	movs	r3, r0
 8006634:	60b2      	str	r2, [r6, #8]
 8006636:	60f3      	str	r3, [r6, #12]
 8006638:	0022      	movs	r2, r4
 800663a:	000b      	movs	r3, r1
 800663c:	6132      	str	r2, [r6, #16]
 800663e:	6173      	str	r3, [r6, #20]
 8006640:	e7c7      	b.n	80065d2 <__kernel_rem_pio2+0x4ea>
 8006642:	9b00      	ldr	r3, [sp, #0]
 8006644:	aa4c      	add	r2, sp, #304	; 0x130
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	18d3      	adds	r3, r2, r3
 800664a:	0028      	movs	r0, r5
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	0021      	movs	r1, r4
 8006652:	f7f9 ff2b 	bl	80004ac <__aeabi_dadd>
 8006656:	0005      	movs	r5, r0
 8006658:	000c      	movs	r4, r1
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	3b01      	subs	r3, #1
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	9b00      	ldr	r3, [sp, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	daed      	bge.n	8006642 <__kernel_rem_pio2+0x55a>
 8006666:	9b07      	ldr	r3, [sp, #28]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <__kernel_rem_pio2+0x58a>
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	18e4      	adds	r4, r4, r3
 8006672:	002a      	movs	r2, r5
 8006674:	0023      	movs	r3, r4
 8006676:	9906      	ldr	r1, [sp, #24]
 8006678:	600a      	str	r2, [r1, #0]
 800667a:	604b      	str	r3, [r1, #4]
 800667c:	e7a9      	b.n	80065d2 <__kernel_rem_pio2+0x4ea>
 800667e:	00e3      	lsls	r3, r4, #3
 8006680:	aa4c      	add	r2, sp, #304	; 0x130
 8006682:	18d3      	adds	r3, r2, r3
 8006684:	0030      	movs	r0, r6
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	0029      	movs	r1, r5
 800668c:	f7f9 ff0e 	bl	80004ac <__aeabi_dadd>
 8006690:	0006      	movs	r6, r0
 8006692:	000d      	movs	r5, r1
 8006694:	3c01      	subs	r4, #1
 8006696:	2c00      	cmp	r4, #0
 8006698:	daf1      	bge.n	800667e <__kernel_rem_pio2+0x596>
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	0029      	movs	r1, r5
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <__kernel_rem_pio2+0x5c0>
 80066a2:	2380      	movs	r3, #128	; 0x80
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	18e9      	adds	r1, r5, r3
 80066a8:	0032      	movs	r2, r6
 80066aa:	000b      	movs	r3, r1
 80066ac:	9906      	ldr	r1, [sp, #24]
 80066ae:	2401      	movs	r4, #1
 80066b0:	600a      	str	r2, [r1, #0]
 80066b2:	604b      	str	r3, [r1, #4]
 80066b4:	984c      	ldr	r0, [sp, #304]	; 0x130
 80066b6:	994d      	ldr	r1, [sp, #308]	; 0x134
 80066b8:	002b      	movs	r3, r5
 80066ba:	f7fb f913 	bl	80018e4 <__aeabi_dsub>
 80066be:	0007      	movs	r7, r0
 80066c0:	000e      	movs	r6, r1
 80066c2:	ad4c      	add	r5, sp, #304	; 0x130
 80066c4:	9b00      	ldr	r3, [sp, #0]
 80066c6:	3508      	adds	r5, #8
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	da0f      	bge.n	80066ec <__kernel_rem_pio2+0x604>
 80066cc:	9b07      	ldr	r3, [sp, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <__kernel_rem_pio2+0x5f0>
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	061b      	lsls	r3, r3, #24
 80066d6:	18f6      	adds	r6, r6, r3
 80066d8:	003a      	movs	r2, r7
 80066da:	0033      	movs	r3, r6
 80066dc:	9906      	ldr	r1, [sp, #24]
 80066de:	608a      	str	r2, [r1, #8]
 80066e0:	60cb      	str	r3, [r1, #12]
 80066e2:	e776      	b.n	80065d2 <__kernel_rem_pio2+0x4ea>
 80066e4:	2600      	movs	r6, #0
 80066e6:	9c00      	ldr	r4, [sp, #0]
 80066e8:	0035      	movs	r5, r6
 80066ea:	e7d4      	b.n	8006696 <__kernel_rem_pio2+0x5ae>
 80066ec:	0038      	movs	r0, r7
 80066ee:	682a      	ldr	r2, [r5, #0]
 80066f0:	686b      	ldr	r3, [r5, #4]
 80066f2:	0031      	movs	r1, r6
 80066f4:	f7f9 feda 	bl	80004ac <__aeabi_dadd>
 80066f8:	3401      	adds	r4, #1
 80066fa:	0007      	movs	r7, r0
 80066fc:	000e      	movs	r6, r1
 80066fe:	e7e1      	b.n	80066c4 <__kernel_rem_pio2+0x5dc>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	68ae      	ldr	r6, [r5, #8]
 8006704:	68ef      	ldr	r7, [r5, #12]
 8006706:	3b01      	subs	r3, #1
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	682a      	ldr	r2, [r5, #0]
 800670c:	686b      	ldr	r3, [r5, #4]
 800670e:	9204      	str	r2, [sp, #16]
 8006710:	9305      	str	r3, [sp, #20]
 8006712:	9804      	ldr	r0, [sp, #16]
 8006714:	9905      	ldr	r1, [sp, #20]
 8006716:	0032      	movs	r2, r6
 8006718:	003b      	movs	r3, r7
 800671a:	f7f9 fec7 	bl	80004ac <__aeabi_dadd>
 800671e:	0002      	movs	r2, r0
 8006720:	000b      	movs	r3, r1
 8006722:	9008      	str	r0, [sp, #32]
 8006724:	9109      	str	r1, [sp, #36]	; 0x24
 8006726:	9804      	ldr	r0, [sp, #16]
 8006728:	9905      	ldr	r1, [sp, #20]
 800672a:	f7fb f8db 	bl	80018e4 <__aeabi_dsub>
 800672e:	0032      	movs	r2, r6
 8006730:	003b      	movs	r3, r7
 8006732:	f7f9 febb 	bl	80004ac <__aeabi_dadd>
 8006736:	9a08      	ldr	r2, [sp, #32]
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	60a8      	str	r0, [r5, #8]
 800673c:	60e9      	str	r1, [r5, #12]
 800673e:	602a      	str	r2, [r5, #0]
 8006740:	606b      	str	r3, [r5, #4]
 8006742:	e758      	b.n	80065f6 <__kernel_rem_pio2+0x50e>
 8006744:	6826      	ldr	r6, [r4, #0]
 8006746:	6867      	ldr	r7, [r4, #4]
 8006748:	68a2      	ldr	r2, [r4, #8]
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	0030      	movs	r0, r6
 800674e:	0039      	movs	r1, r7
 8006750:	9202      	str	r2, [sp, #8]
 8006752:	9303      	str	r3, [sp, #12]
 8006754:	f7f9 feaa 	bl	80004ac <__aeabi_dadd>
 8006758:	0002      	movs	r2, r0
 800675a:	000b      	movs	r3, r1
 800675c:	9004      	str	r0, [sp, #16]
 800675e:	9105      	str	r1, [sp, #20]
 8006760:	0030      	movs	r0, r6
 8006762:	0039      	movs	r1, r7
 8006764:	f7fb f8be 	bl	80018e4 <__aeabi_dsub>
 8006768:	9a02      	ldr	r2, [sp, #8]
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	f7f9 fe9e 	bl	80004ac <__aeabi_dadd>
 8006770:	9a04      	ldr	r2, [sp, #16]
 8006772:	9b05      	ldr	r3, [sp, #20]
 8006774:	60a0      	str	r0, [r4, #8]
 8006776:	60e1      	str	r1, [r4, #12]
 8006778:	6022      	str	r2, [r4, #0]
 800677a:	6063      	str	r3, [r4, #4]
 800677c:	3d01      	subs	r5, #1
 800677e:	e740      	b.n	8006602 <__kernel_rem_pio2+0x51a>
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	aa4c      	add	r2, sp, #304	; 0x130
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	18d3      	adds	r3, r2, r3
 8006788:	0020      	movs	r0, r4
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f7f9 fe8d 	bl	80004ac <__aeabi_dadd>
 8006792:	9b00      	ldr	r3, [sp, #0]
 8006794:	0004      	movs	r4, r0
 8006796:	3b01      	subs	r3, #1
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	e738      	b.n	800660e <__kernel_rem_pio2+0x526>
 800679c:	9b06      	ldr	r3, [sp, #24]
 800679e:	9a06      	ldr	r2, [sp, #24]
 80067a0:	601f      	str	r7, [r3, #0]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	061b      	lsls	r3, r3, #24
 80067a6:	18f6      	adds	r6, r6, r3
 80067a8:	18c0      	adds	r0, r0, r3
 80067aa:	18c9      	adds	r1, r1, r3
 80067ac:	6056      	str	r6, [r2, #4]
 80067ae:	6095      	str	r5, [r2, #8]
 80067b0:	60d0      	str	r0, [r2, #12]
 80067b2:	6114      	str	r4, [r2, #16]
 80067b4:	6151      	str	r1, [r2, #20]
 80067b6:	e70c      	b.n	80065d2 <__kernel_rem_pio2+0x4ea>
 80067b8:	41700000 	.word	0x41700000
 80067bc:	3e700000 	.word	0x3e700000

080067c0 <scalbn>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	0014      	movs	r4, r2
 80067c4:	004a      	lsls	r2, r1, #1
 80067c6:	000b      	movs	r3, r1
 80067c8:	0d52      	lsrs	r2, r2, #21
 80067ca:	d10f      	bne.n	80067ec <scalbn+0x2c>
 80067cc:	004b      	lsls	r3, r1, #1
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	4303      	orrs	r3, r0
 80067d2:	d011      	beq.n	80067f8 <scalbn+0x38>
 80067d4:	4b22      	ldr	r3, [pc, #136]	; (8006860 <scalbn+0xa0>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	f7fa fdc2 	bl	8001360 <__aeabi_dmul>
 80067dc:	4b21      	ldr	r3, [pc, #132]	; (8006864 <scalbn+0xa4>)
 80067de:	429c      	cmp	r4, r3
 80067e0:	da0b      	bge.n	80067fa <scalbn+0x3a>
 80067e2:	4a21      	ldr	r2, [pc, #132]	; (8006868 <scalbn+0xa8>)
 80067e4:	4b21      	ldr	r3, [pc, #132]	; (800686c <scalbn+0xac>)
 80067e6:	f7fa fdbb 	bl	8001360 <__aeabi_dmul>
 80067ea:	e005      	b.n	80067f8 <scalbn+0x38>
 80067ec:	4d20      	ldr	r5, [pc, #128]	; (8006870 <scalbn+0xb0>)
 80067ee:	42aa      	cmp	r2, r5
 80067f0:	d107      	bne.n	8006802 <scalbn+0x42>
 80067f2:	0002      	movs	r2, r0
 80067f4:	f7f9 fe5a 	bl	80004ac <__aeabi_dadd>
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	000b      	movs	r3, r1
 80067fc:	004a      	lsls	r2, r1, #1
 80067fe:	0d52      	lsrs	r2, r2, #21
 8006800:	3a36      	subs	r2, #54	; 0x36
 8006802:	4d1c      	ldr	r5, [pc, #112]	; (8006874 <scalbn+0xb4>)
 8006804:	42ac      	cmp	r4, r5
 8006806:	dd0a      	ble.n	800681e <scalbn+0x5e>
 8006808:	4c1b      	ldr	r4, [pc, #108]	; (8006878 <scalbn+0xb8>)
 800680a:	4d1c      	ldr	r5, [pc, #112]	; (800687c <scalbn+0xbc>)
 800680c:	2900      	cmp	r1, #0
 800680e:	da01      	bge.n	8006814 <scalbn+0x54>
 8006810:	4c19      	ldr	r4, [pc, #100]	; (8006878 <scalbn+0xb8>)
 8006812:	4d1b      	ldr	r5, [pc, #108]	; (8006880 <scalbn+0xc0>)
 8006814:	4a18      	ldr	r2, [pc, #96]	; (8006878 <scalbn+0xb8>)
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <scalbn+0xbc>)
 8006818:	0020      	movs	r0, r4
 800681a:	0029      	movs	r1, r5
 800681c:	e7e3      	b.n	80067e6 <scalbn+0x26>
 800681e:	18a2      	adds	r2, r4, r2
 8006820:	4c18      	ldr	r4, [pc, #96]	; (8006884 <scalbn+0xc4>)
 8006822:	42a2      	cmp	r2, r4
 8006824:	dcf0      	bgt.n	8006808 <scalbn+0x48>
 8006826:	2a00      	cmp	r2, #0
 8006828:	dd05      	ble.n	8006836 <scalbn+0x76>
 800682a:	4c17      	ldr	r4, [pc, #92]	; (8006888 <scalbn+0xc8>)
 800682c:	0512      	lsls	r2, r2, #20
 800682e:	4023      	ands	r3, r4
 8006830:	4313      	orrs	r3, r2
 8006832:	0019      	movs	r1, r3
 8006834:	e7e0      	b.n	80067f8 <scalbn+0x38>
 8006836:	0014      	movs	r4, r2
 8006838:	3435      	adds	r4, #53	; 0x35
 800683a:	da08      	bge.n	800684e <scalbn+0x8e>
 800683c:	4c0a      	ldr	r4, [pc, #40]	; (8006868 <scalbn+0xa8>)
 800683e:	4d0b      	ldr	r5, [pc, #44]	; (800686c <scalbn+0xac>)
 8006840:	2900      	cmp	r1, #0
 8006842:	da01      	bge.n	8006848 <scalbn+0x88>
 8006844:	4c08      	ldr	r4, [pc, #32]	; (8006868 <scalbn+0xa8>)
 8006846:	4d11      	ldr	r5, [pc, #68]	; (800688c <scalbn+0xcc>)
 8006848:	4a07      	ldr	r2, [pc, #28]	; (8006868 <scalbn+0xa8>)
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <scalbn+0xac>)
 800684c:	e7e4      	b.n	8006818 <scalbn+0x58>
 800684e:	4c0e      	ldr	r4, [pc, #56]	; (8006888 <scalbn+0xc8>)
 8006850:	3236      	adds	r2, #54	; 0x36
 8006852:	4023      	ands	r3, r4
 8006854:	0512      	lsls	r2, r2, #20
 8006856:	431a      	orrs	r2, r3
 8006858:	0011      	movs	r1, r2
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <scalbn+0xd0>)
 800685c:	2200      	movs	r2, #0
 800685e:	e7c2      	b.n	80067e6 <scalbn+0x26>
 8006860:	43500000 	.word	0x43500000
 8006864:	ffff3cb0 	.word	0xffff3cb0
 8006868:	c2f8f359 	.word	0xc2f8f359
 800686c:	01a56e1f 	.word	0x01a56e1f
 8006870:	000007ff 	.word	0x000007ff
 8006874:	0000c350 	.word	0x0000c350
 8006878:	8800759c 	.word	0x8800759c
 800687c:	7e37e43c 	.word	0x7e37e43c
 8006880:	fe37e43c 	.word	0xfe37e43c
 8006884:	000007fe 	.word	0x000007fe
 8006888:	800fffff 	.word	0x800fffff
 800688c:	81a56e1f 	.word	0x81a56e1f
 8006890:	3c900000 	.word	0x3c900000

08006894 <floor>:
 8006894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006896:	004b      	lsls	r3, r1, #1
 8006898:	4a3e      	ldr	r2, [pc, #248]	; (8006994 <floor+0x100>)
 800689a:	0d5b      	lsrs	r3, r3, #21
 800689c:	189f      	adds	r7, r3, r2
 800689e:	4684      	mov	ip, r0
 80068a0:	000e      	movs	r6, r1
 80068a2:	000c      	movs	r4, r1
 80068a4:	0005      	movs	r5, r0
 80068a6:	9001      	str	r0, [sp, #4]
 80068a8:	2f13      	cmp	r7, #19
 80068aa:	dc34      	bgt.n	8006916 <floor+0x82>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	da16      	bge.n	80068de <floor+0x4a>
 80068b0:	4a39      	ldr	r2, [pc, #228]	; (8006998 <floor+0x104>)
 80068b2:	4b3a      	ldr	r3, [pc, #232]	; (800699c <floor+0x108>)
 80068b4:	4660      	mov	r0, ip
 80068b6:	0031      	movs	r1, r6
 80068b8:	f7f9 fdf8 	bl	80004ac <__aeabi_dadd>
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	f7f9 fdc2 	bl	8000448 <__aeabi_dcmpgt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d007      	beq.n	80068d8 <floor+0x44>
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	da5d      	bge.n	8006988 <floor+0xf4>
 80068cc:	0074      	lsls	r4, r6, #1
 80068ce:	0864      	lsrs	r4, r4, #1
 80068d0:	4325      	orrs	r5, r4
 80068d2:	d05c      	beq.n	800698e <floor+0xfa>
 80068d4:	2500      	movs	r5, #0
 80068d6:	4c32      	ldr	r4, [pc, #200]	; (80069a0 <floor+0x10c>)
 80068d8:	46ac      	mov	ip, r5
 80068da:	0026      	movs	r6, r4
 80068dc:	e029      	b.n	8006932 <floor+0x9e>
 80068de:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <floor+0x110>)
 80068e0:	413b      	asrs	r3, r7
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	400b      	ands	r3, r1
 80068e6:	4303      	orrs	r3, r0
 80068e8:	d023      	beq.n	8006932 <floor+0x9e>
 80068ea:	4a2b      	ldr	r2, [pc, #172]	; (8006998 <floor+0x104>)
 80068ec:	4b2b      	ldr	r3, [pc, #172]	; (800699c <floor+0x108>)
 80068ee:	4660      	mov	r0, ip
 80068f0:	0031      	movs	r1, r6
 80068f2:	f7f9 fddb 	bl	80004ac <__aeabi_dadd>
 80068f6:	2200      	movs	r2, #0
 80068f8:	2300      	movs	r3, #0
 80068fa:	f7f9 fda5 	bl	8000448 <__aeabi_dcmpgt>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d0ea      	beq.n	80068d8 <floor+0x44>
 8006902:	2e00      	cmp	r6, #0
 8006904:	da03      	bge.n	800690e <floor+0x7a>
 8006906:	2380      	movs	r3, #128	; 0x80
 8006908:	035b      	lsls	r3, r3, #13
 800690a:	413b      	asrs	r3, r7
 800690c:	18f4      	adds	r4, r6, r3
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	2500      	movs	r5, #0
 8006912:	439c      	bics	r4, r3
 8006914:	e7e0      	b.n	80068d8 <floor+0x44>
 8006916:	2f33      	cmp	r7, #51	; 0x33
 8006918:	dd0f      	ble.n	800693a <floor+0xa6>
 800691a:	2380      	movs	r3, #128	; 0x80
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	429f      	cmp	r7, r3
 8006920:	d107      	bne.n	8006932 <floor+0x9e>
 8006922:	0002      	movs	r2, r0
 8006924:	000b      	movs	r3, r1
 8006926:	4660      	mov	r0, ip
 8006928:	0031      	movs	r1, r6
 800692a:	f7f9 fdbf 	bl	80004ac <__aeabi_dadd>
 800692e:	4684      	mov	ip, r0
 8006930:	000e      	movs	r6, r1
 8006932:	4660      	mov	r0, ip
 8006934:	0031      	movs	r1, r6
 8006936:	b003      	add	sp, #12
 8006938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693a:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <floor+0x114>)
 800693c:	189b      	adds	r3, r3, r2
 800693e:	2201      	movs	r2, #1
 8006940:	4252      	negs	r2, r2
 8006942:	40da      	lsrs	r2, r3
 8006944:	9200      	str	r2, [sp, #0]
 8006946:	4202      	tst	r2, r0
 8006948:	d0f3      	beq.n	8006932 <floor+0x9e>
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <floor+0x104>)
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <floor+0x108>)
 800694e:	4660      	mov	r0, ip
 8006950:	0031      	movs	r1, r6
 8006952:	f7f9 fdab 	bl	80004ac <__aeabi_dadd>
 8006956:	2200      	movs	r2, #0
 8006958:	2300      	movs	r3, #0
 800695a:	f7f9 fd75 	bl	8000448 <__aeabi_dcmpgt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d0ba      	beq.n	80068d8 <floor+0x44>
 8006962:	2e00      	cmp	r6, #0
 8006964:	da02      	bge.n	800696c <floor+0xd8>
 8006966:	2f14      	cmp	r7, #20
 8006968:	d103      	bne.n	8006972 <floor+0xde>
 800696a:	3401      	adds	r4, #1
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	439d      	bics	r5, r3
 8006970:	e7b2      	b.n	80068d8 <floor+0x44>
 8006972:	2234      	movs	r2, #52	; 0x34
 8006974:	2301      	movs	r3, #1
 8006976:	1bd2      	subs	r2, r2, r7
 8006978:	4093      	lsls	r3, r2
 800697a:	18ed      	adds	r5, r5, r3
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	429d      	cmp	r5, r3
 8006980:	419b      	sbcs	r3, r3
 8006982:	425b      	negs	r3, r3
 8006984:	18f4      	adds	r4, r6, r3
 8006986:	e7f1      	b.n	800696c <floor+0xd8>
 8006988:	2500      	movs	r5, #0
 800698a:	002c      	movs	r4, r5
 800698c:	e7a4      	b.n	80068d8 <floor+0x44>
 800698e:	2480      	movs	r4, #128	; 0x80
 8006990:	0624      	lsls	r4, r4, #24
 8006992:	e7a1      	b.n	80068d8 <floor+0x44>
 8006994:	fffffc01 	.word	0xfffffc01
 8006998:	8800759c 	.word	0x8800759c
 800699c:	7e37e43c 	.word	0x7e37e43c
 80069a0:	bff00000 	.word	0xbff00000
 80069a4:	000fffff 	.word	0x000fffff
 80069a8:	fffffbed 	.word	0xfffffbed

080069ac <_init>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b2:	bc08      	pop	{r3}
 80069b4:	469e      	mov	lr, r3
 80069b6:	4770      	bx	lr

080069b8 <_fini>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr
